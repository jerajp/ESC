
ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004110  08004110  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004110  08004110  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004110  08004110  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001108  20000070  08004188  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001178  08004188  00021178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd6  00000000  00000000  0002c23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002e880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000156be  00000000  00000000  0002f210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a09  00000000  00000000  000448ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070dc2  00000000  00000000  0004c2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003148  00000000  00000000  000bd114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004034 	.word	0x08004034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004034 	.word	0x08004034

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2003      	movs	r0, #3
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fd40 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000cc 	.word	0x200000cc

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000cc 	.word	0x200000cc

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000740:	e003      	b.n	800074a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	041a      	lsls	r2, r3, #16
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e26c      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 8087 	beq.w	8000882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000774:	4b92      	ldr	r3, [pc, #584]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 030c 	and.w	r3, r3, #12
 800077c:	2b04      	cmp	r3, #4
 800077e:	d00c      	beq.n	800079a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000780:	4b8f      	ldr	r3, [pc, #572]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	2b08      	cmp	r3, #8
 800078a:	d112      	bne.n	80007b2 <HAL_RCC_OscConfig+0x5e>
 800078c:	4b8c      	ldr	r3, [pc, #560]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000798:	d10b      	bne.n	80007b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079a:	4b89      	ldr	r3, [pc, #548]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d06c      	beq.n	8000880 <HAL_RCC_OscConfig+0x12c>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d168      	bne.n	8000880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e246      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ba:	d106      	bne.n	80007ca <HAL_RCC_OscConfig+0x76>
 80007bc:	4b80      	ldr	r3, [pc, #512]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a7f      	ldr	r2, [pc, #508]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	e02e      	b.n	8000828 <HAL_RCC_OscConfig+0xd4>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10c      	bne.n	80007ec <HAL_RCC_OscConfig+0x98>
 80007d2:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a7a      	ldr	r2, [pc, #488]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	4b78      	ldr	r3, [pc, #480]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a77      	ldr	r2, [pc, #476]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e01d      	b.n	8000828 <HAL_RCC_OscConfig+0xd4>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f4:	d10c      	bne.n	8000810 <HAL_RCC_OscConfig+0xbc>
 80007f6:	4b72      	ldr	r3, [pc, #456]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a71      	ldr	r2, [pc, #452]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	4b6f      	ldr	r3, [pc, #444]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a6e      	ldr	r2, [pc, #440]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	e00b      	b.n	8000828 <HAL_RCC_OscConfig+0xd4>
 8000810:	4b6b      	ldr	r3, [pc, #428]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a6a      	ldr	r2, [pc, #424]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b68      	ldr	r3, [pc, #416]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a67      	ldr	r2, [pc, #412]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d013      	beq.n	8000858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000830:	f7ff fce4 	bl	80001fc <HAL_GetTick>
 8000834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000836:	e008      	b.n	800084a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000838:	f7ff fce0 	bl	80001fc <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	2b64      	cmp	r3, #100	; 0x64
 8000844:	d901      	bls.n	800084a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000846:	2303      	movs	r3, #3
 8000848:	e1fa      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084a:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f0      	beq.n	8000838 <HAL_RCC_OscConfig+0xe4>
 8000856:	e014      	b.n	8000882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000858:	f7ff fcd0 	bl	80001fc <HAL_GetTick>
 800085c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800085e:	e008      	b.n	8000872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000860:	f7ff fccc 	bl	80001fc <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	2b64      	cmp	r3, #100	; 0x64
 800086c:	d901      	bls.n	8000872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800086e:	2303      	movs	r3, #3
 8000870:	e1e6      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000872:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f0      	bne.n	8000860 <HAL_RCC_OscConfig+0x10c>
 800087e:	e000      	b.n	8000882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d063      	beq.n	8000956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800088e:	4b4c      	ldr	r3, [pc, #304]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 030c 	and.w	r3, r3, #12
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00b      	beq.n	80008b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 030c 	and.w	r3, r3, #12
 80008a2:	2b08      	cmp	r3, #8
 80008a4:	d11c      	bne.n	80008e0 <HAL_RCC_OscConfig+0x18c>
 80008a6:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d116      	bne.n	80008e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b2:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d005      	beq.n	80008ca <HAL_RCC_OscConfig+0x176>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d001      	beq.n	80008ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e1ba      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ca:	4b3d      	ldr	r3, [pc, #244]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4939      	ldr	r1, [pc, #228]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008de:	e03a      	b.n	8000956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d020      	beq.n	800092a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <HAL_RCC_OscConfig+0x270>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ee:	f7ff fc85 	bl	80001fc <HAL_GetTick>
 80008f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008f6:	f7ff fc81 	bl	80001fc <HAL_GetTick>
 80008fa:	4602      	mov	r2, r0
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e19b      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000908:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f0      	beq.n	80008f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	4927      	ldr	r1, [pc, #156]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000924:	4313      	orrs	r3, r2
 8000926:	600b      	str	r3, [r1, #0]
 8000928:	e015      	b.n	8000956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <HAL_RCC_OscConfig+0x270>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000930:	f7ff fc64 	bl	80001fc <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fc60 	bl	80001fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b02      	cmp	r3, #2
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e17a      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f0      	bne.n	8000938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d03a      	beq.n	80009d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d019      	beq.n	800099e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_RCC_OscConfig+0x274>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000970:	f7ff fc44 	bl	80001fc <HAL_GetTick>
 8000974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000976:	e008      	b.n	800098a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000978:	f7ff fc40 	bl	80001fc <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d901      	bls.n	800098a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e15a      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f0      	beq.n	8000978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000996:	2001      	movs	r0, #1
 8000998:	f000 faaa 	bl	8000ef0 <RCC_Delay>
 800099c:	e01c      	b.n	80009d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_RCC_OscConfig+0x274>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc2a 	bl	80001fc <HAL_GetTick>
 80009a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009aa:	e00f      	b.n	80009cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fc26 	bl	80001fc <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d908      	bls.n	80009cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e140      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	42420000 	.word	0x42420000
 80009c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009cc:	4b9e      	ldr	r3, [pc, #632]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1e9      	bne.n	80009ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f000 80a6 	beq.w	8000b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ea:	4b97      	ldr	r3, [pc, #604]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10d      	bne.n	8000a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b94      	ldr	r3, [pc, #592]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a93      	ldr	r2, [pc, #588]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b91      	ldr	r3, [pc, #580]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a12:	4b8e      	ldr	r3, [pc, #568]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d118      	bne.n	8000a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a1e:	4b8b      	ldr	r3, [pc, #556]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a8a      	ldr	r2, [pc, #552]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fbe7 	bl	80001fc <HAL_GetTick>
 8000a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	e008      	b.n	8000a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a32:	f7ff fbe3 	bl	80001fc <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2b64      	cmp	r3, #100	; 0x64
 8000a3e:	d901      	bls.n	8000a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a40:	2303      	movs	r3, #3
 8000a42:	e0fd      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a44:	4b81      	ldr	r3, [pc, #516]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f0      	beq.n	8000a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <HAL_RCC_OscConfig+0x312>
 8000a58:	4b7b      	ldr	r3, [pc, #492]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a7a      	ldr	r2, [pc, #488]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6213      	str	r3, [r2, #32]
 8000a64:	e02d      	b.n	8000ac2 <HAL_RCC_OscConfig+0x36e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10c      	bne.n	8000a88 <HAL_RCC_OscConfig+0x334>
 8000a6e:	4b76      	ldr	r3, [pc, #472]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	4a75      	ldr	r2, [pc, #468]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	6213      	str	r3, [r2, #32]
 8000a7a:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	4a72      	ldr	r2, [pc, #456]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	f023 0304 	bic.w	r3, r3, #4
 8000a84:	6213      	str	r3, [r2, #32]
 8000a86:	e01c      	b.n	8000ac2 <HAL_RCC_OscConfig+0x36e>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	d10c      	bne.n	8000aaa <HAL_RCC_OscConfig+0x356>
 8000a90:	4b6d      	ldr	r3, [pc, #436]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	4a6c      	ldr	r2, [pc, #432]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6213      	str	r3, [r2, #32]
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	4a69      	ldr	r2, [pc, #420]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6213      	str	r3, [r2, #32]
 8000aa8:	e00b      	b.n	8000ac2 <HAL_RCC_OscConfig+0x36e>
 8000aaa:	4b67      	ldr	r3, [pc, #412]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a66      	ldr	r2, [pc, #408]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	4b64      	ldr	r3, [pc, #400]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4a63      	ldr	r2, [pc, #396]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	f023 0304 	bic.w	r3, r3, #4
 8000ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d015      	beq.n	8000af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aca:	f7ff fb97 	bl	80001fc <HAL_GetTick>
 8000ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	e00a      	b.n	8000ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fb93 	bl	80001fc <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e0ab      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae8:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0ee      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x37e>
 8000af4:	e014      	b.n	8000b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af6:	f7ff fb81 	bl	80001fc <HAL_GetTick>
 8000afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afc:	e00a      	b.n	8000b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fb7d 	bl	80001fc <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e095      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b14:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1ee      	bne.n	8000afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d105      	bne.n	8000b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 8081 	beq.w	8000c3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d061      	beq.n	8000c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d146      	bne.n	8000bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b50:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <HAL_RCC_OscConfig+0x4fc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b56:	f7ff fb51 	bl	80001fc <HAL_GetTick>
 8000b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5c:	e008      	b.n	8000b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b5e:	f7ff fb4d 	bl	80001fc <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d901      	bls.n	8000b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e067      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1f0      	bne.n	8000b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d108      	bne.n	8000b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	492d      	ldr	r1, [pc, #180]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a19      	ldr	r1, [r3, #32]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	4927      	ldr	r1, [pc, #156]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_RCC_OscConfig+0x4fc>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fb1d 	bl	80001fc <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e037      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f0      	beq.n	8000bbe <HAL_RCC_OscConfig+0x46a>
 8000bdc:	e02f      	b.n	8000c3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_RCC_OscConfig+0x4fc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fb0a 	bl	80001fc <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fb06 	bl	80001fc <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e020      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0x498>
 8000c0a:	e018      	b.n	8000c3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d101      	bne.n	8000c18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e013      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40007000 	.word	0x40007000
 8000c50:	42420060 	.word	0x42420060

08000c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e0d0      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c68:	4b6a      	ldr	r3, [pc, #424]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d910      	bls.n	8000c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c76:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 0207 	bic.w	r2, r3, #7
 8000c7e:	4965      	ldr	r1, [pc, #404]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c86:	4b63      	ldr	r3, [pc, #396]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d001      	beq.n	8000c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e0b8      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d020      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb0:	4b59      	ldr	r3, [pc, #356]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a58      	ldr	r2, [pc, #352]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc8:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd4:	4b50      	ldr	r3, [pc, #320]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	494d      	ldr	r1, [pc, #308]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d040      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d107      	bne.n	8000d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d115      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e07f      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d107      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e073      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e06b      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f023 0203 	bic.w	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4936      	ldr	r1, [pc, #216]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d40:	4313      	orrs	r3, r2
 8000d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d44:	f7ff fa5a 	bl	80001fc <HAL_GetTick>
 8000d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4a:	e00a      	b.n	8000d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4c:	f7ff fa56 	bl	80001fc <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e053      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 020c 	and.w	r2, r3, #12
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d1eb      	bne.n	8000d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d210      	bcs.n	8000da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 0207 	bic.w	r2, r3, #7
 8000d8a:	4922      	ldr	r1, [pc, #136]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d001      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e032      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d008      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4916      	ldr	r1, [pc, #88]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d009      	beq.n	8000de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	490e      	ldr	r1, [pc, #56]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000de2:	f000 f821 	bl	8000e28 <HAL_RCC_GetSysClockFreq>
 8000de6:	4601      	mov	r1, r0
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_RCC_ClockConfig+0x1c8>)
 8000df4:	5cd3      	ldrb	r3, [r2, r3]
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_RCC_ClockConfig+0x1cc>)
 8000dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_RCC_ClockConfig+0x1d0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9b8 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	08004068 	.word	0x08004068
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000000 	.word	0x20000000

08000e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e28:	b490      	push	{r4, r7}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e30:	1d3c      	adds	r4, r7, #4
 8000e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d002      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x40>
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d003      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x46>
 8000e66:	e02d      	b.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e6a:	623b      	str	r3, [r7, #32]
      break;
 8000e6c:	e02d      	b.n	8000eca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d013      	beq.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	0c5b      	lsrs	r3, r3, #17
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ea0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea6:	fb02 f203 	mul.w	r2, r2, r3
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	e004      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	623b      	str	r3, [r7, #32]
      break;
 8000ec2:	e002      	b.n	8000eca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ec6:	623b      	str	r3, [r7, #32]
      break;
 8000ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eca:	6a3b      	ldr	r3, [r7, #32]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc90      	pop	{r4, r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	0800404c 	.word	0x0800404c
 8000edc:	0800405c 	.word	0x0800405c
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	00f42400 	.word	0x00f42400
 8000ee8:	003d0900 	.word	0x003d0900
 8000eec:	007a1200 	.word	0x007a1200

08000ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <RCC_Delay+0x34>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <RCC_Delay+0x38>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f0c:	bf00      	nop
  }
  while (Delay --);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	60fa      	str	r2, [r7, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f9      	bne.n	8000f0c <RCC_Delay+0x1c>
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	10624dd3 	.word	0x10624dd3

08000f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e01d      	b.n	8000f7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f001 fe7c 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3304      	adds	r3, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f000 fc14 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	d007      	beq.n	8000fbc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e01d      	b.n	8001016 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d106      	bne.n	8000ff4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 fe80 	bl	8002cf4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3304      	adds	r3, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f000 fbc6 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e01d      	b.n	800106c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f815 	bl	8001074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2202      	movs	r2, #2
 800104e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f000 fb9b 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2201      	movs	r2, #1
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 ff8f 	bl	8001fbe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_TIM_PWM_Start+0x60>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d107      	bne.n	80010ba <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d007      	beq.n	80010dc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40012c00 	.word	0x40012c00

080010ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e01d      	b.n	800113a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f815 	bl	8001142 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3304      	adds	r3, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f000 fb34 	bl	8001798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 ff29 	bl	8001fbe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b06      	cmp	r3, #6
 800117c:	d007      	beq.n	800118e <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e04e      	b.n	8001250 <HAL_TIM_OC_ConfigChannel+0xb8>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2202      	movs	r2, #2
 80011be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d839      	bhi.n	800123c <HAL_TIM_OC_ConfigChannel+0xa4>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	08001205 	.word	0x08001205
 80011d4:	0800123d 	.word	0x0800123d
 80011d8:	0800123d 	.word	0x0800123d
 80011dc:	0800123d 	.word	0x0800123d
 80011e0:	08001213 	.word	0x08001213
 80011e4:	0800123d 	.word	0x0800123d
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	0800123d 	.word	0x0800123d
 80011f0:	08001221 	.word	0x08001221
 80011f4:	0800123d 	.word	0x0800123d
 80011f8:	0800123d 	.word	0x0800123d
 80011fc:	0800123d 	.word	0x0800123d
 8001200:	0800122f 	.word	0x0800122f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fb26 	bl	800185c <TIM_OC1_SetConfig>
      break;
 8001210:	e015      	b.n	800123e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fb85 	bl	8001928 <TIM_OC2_SetConfig>
      break;
 800121e:	e00e      	b.n	800123e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fbe8 	bl	80019fc <TIM_OC3_SetConfig>
      break;
 800122c:	e007      	b.n	800123e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fc4b 	bl	8001ad0 <TIM_OC4_SetConfig>
      break;
 800123a:	e000      	b.n	800123e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800123c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_TIM_IC_ConfigChannel+0x1a>
 800126e:	2302      	movs	r3, #2
 8001270:	e08a      	b.n	8001388 <HAL_TIM_IC_ConfigChannel+0x130>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2202      	movs	r2, #2
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11b      	bne.n	80012c0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f000 fcee 	bl	8001c78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020c 	bic.w	r2, r2, #12
 80012aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6999      	ldr	r1, [r3, #24]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	619a      	str	r2, [r3, #24]
 80012be:	e05a      	b.n	8001376 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d11c      	bne.n	8001300 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f000 fd57 	bl	8001d88 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80012e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6999      	ldr	r1, [r3, #24]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	021a      	lsls	r2, r3, #8
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	619a      	str	r2, [r3, #24]
 80012fe:	e03a      	b.n	8001376 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11b      	bne.n	800133e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f000 fda2 	bl	8001e5e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69da      	ldr	r2, [r3, #28]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 020c 	bic.w	r2, r2, #12
 8001328:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	69d9      	ldr	r1, [r3, #28]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	61da      	str	r2, [r3, #28]
 800133c:	e01b      	b.n	8001376 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f000 fdc1 	bl	8001ed4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001360:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	69d9      	ldr	r1, [r3, #28]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	021a      	lsls	r2, r3, #8
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0b4      	b.n	8001514 <HAL_TIM_PWM_ConfigChannel+0x184>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2202      	movs	r2, #2
 80013b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	f200 809f 	bhi.w	8001500 <HAL_TIM_PWM_ConfigChannel+0x170>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	08001501 	.word	0x08001501
 80013d0:	08001501 	.word	0x08001501
 80013d4:	08001501 	.word	0x08001501
 80013d8:	0800143d 	.word	0x0800143d
 80013dc:	08001501 	.word	0x08001501
 80013e0:	08001501 	.word	0x08001501
 80013e4:	08001501 	.word	0x08001501
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	08001501 	.word	0x08001501
 80013f0:	08001501 	.word	0x08001501
 80013f4:	08001501 	.word	0x08001501
 80013f8:	080014bf 	.word	0x080014bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fa2a 	bl	800185c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0208 	orr.w	r2, r2, #8
 8001416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0204 	bic.w	r2, r2, #4
 8001426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6999      	ldr	r1, [r3, #24]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	691a      	ldr	r2, [r3, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	619a      	str	r2, [r3, #24]
      break;
 800143a:	e062      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fa70 	bl	8001928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6999      	ldr	r1, [r3, #24]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	021a      	lsls	r2, r3, #8
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	619a      	str	r2, [r3, #24]
      break;
 800147c:	e041      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fab9 	bl	80019fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0208 	orr.w	r2, r2, #8
 8001498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	69d9      	ldr	r1, [r3, #28]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]
      break;
 80014bc:	e021      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fb03 	bl	8001ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69d9      	ldr	r1, [r3, #28]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
      break;
 80014fe:	e000      	b.n	8001502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001500:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_TIM_ConfigClockSource+0x18>
 8001530:	2302      	movs	r3, #2
 8001532:	e0a6      	b.n	8001682 <HAL_TIM_ConfigClockSource+0x166>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800155a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b40      	cmp	r3, #64	; 0x40
 800156a:	d067      	beq.n	800163c <HAL_TIM_ConfigClockSource+0x120>
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d80b      	bhi.n	8001588 <HAL_TIM_ConfigClockSource+0x6c>
 8001570:	2b10      	cmp	r3, #16
 8001572:	d073      	beq.n	800165c <HAL_TIM_ConfigClockSource+0x140>
 8001574:	2b10      	cmp	r3, #16
 8001576:	d802      	bhi.n	800157e <HAL_TIM_ConfigClockSource+0x62>
 8001578:	2b00      	cmp	r3, #0
 800157a:	d06f      	beq.n	800165c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800157c:	e078      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800157e:	2b20      	cmp	r3, #32
 8001580:	d06c      	beq.n	800165c <HAL_TIM_ConfigClockSource+0x140>
 8001582:	2b30      	cmp	r3, #48	; 0x30
 8001584:	d06a      	beq.n	800165c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001586:	e073      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001588:	2b70      	cmp	r3, #112	; 0x70
 800158a:	d00d      	beq.n	80015a8 <HAL_TIM_ConfigClockSource+0x8c>
 800158c:	2b70      	cmp	r3, #112	; 0x70
 800158e:	d804      	bhi.n	800159a <HAL_TIM_ConfigClockSource+0x7e>
 8001590:	2b50      	cmp	r3, #80	; 0x50
 8001592:	d033      	beq.n	80015fc <HAL_TIM_ConfigClockSource+0xe0>
 8001594:	2b60      	cmp	r3, #96	; 0x60
 8001596:	d041      	beq.n	800161c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001598:	e06a      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800159a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800159e:	d066      	beq.n	800166e <HAL_TIM_ConfigClockSource+0x152>
 80015a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015a4:	d017      	beq.n	80015d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80015a6:	e063      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f000 fce2 	bl	8001f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80015ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	609a      	str	r2, [r3, #8]
      break;
 80015d4:	e04c      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f000 fccb 	bl	8001f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015f8:	609a      	str	r2, [r3, #8]
      break;
 80015fa:	e039      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	461a      	mov	r2, r3
 800160a:	f000 fb8f 	bl	8001d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2150      	movs	r1, #80	; 0x50
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fc99 	bl	8001f4c <TIM_ITRx_SetConfig>
      break;
 800161a:	e029      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	461a      	mov	r2, r3
 800162a:	f000 fbe9 	bl	8001e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2160      	movs	r1, #96	; 0x60
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fc89 	bl	8001f4c <TIM_ITRx_SetConfig>
      break;
 800163a:	e019      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	461a      	mov	r2, r3
 800164a:	f000 fb6f 	bl	8001d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fc79 	bl	8001f4c <TIM_ITRx_SetConfig>
      break;
 800165a:	e009      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f000 fc70 	bl	8001f4c <TIM_ITRx_SetConfig>
      break;
 800166c:	e000      	b.n	8001670 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800166e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800169e:	2302      	movs	r3, #2
 80016a0:	e031      	b.n	8001706 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fa59 	bl	8001b6c <TIM_SlaveTimer_SetConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e018      	b.n	8001706 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d831      	bhi.n	8001788 <HAL_TIM_ReadCapturedValue+0x78>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <HAL_TIM_ReadCapturedValue+0x1c>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	08001761 	.word	0x08001761
 8001730:	08001789 	.word	0x08001789
 8001734:	08001789 	.word	0x08001789
 8001738:	08001789 	.word	0x08001789
 800173c:	0800176b 	.word	0x0800176b
 8001740:	08001789 	.word	0x08001789
 8001744:	08001789 	.word	0x08001789
 8001748:	08001789 	.word	0x08001789
 800174c:	08001775 	.word	0x08001775
 8001750:	08001789 	.word	0x08001789
 8001754:	08001789 	.word	0x08001789
 8001758:	08001789 	.word	0x08001789
 800175c:	0800177f 	.word	0x0800177f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001766:	60fb      	str	r3, [r7, #12]

      break;
 8001768:	e00f      	b.n	800178a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	60fb      	str	r3, [r7, #12]

      break;
 8001772:	e00a      	b.n	800178a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	60fb      	str	r3, [r7, #12]

      break;
 800177c:	e005      	b.n	800178a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	60fb      	str	r3, [r7, #12]

      break;
 8001786:	e000      	b.n	800178a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001788:	bf00      	nop
  }

  return tmpreg;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b6:	d007      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <TIM_Base_SetConfig+0xbc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <TIM_Base_SetConfig+0x30>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <TIM_Base_SetConfig+0xc0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00b      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d007      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <TIM_Base_SetConfig+0xbc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <TIM_Base_SetConfig+0x62>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <TIM_Base_SetConfig+0xc0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d108      	bne.n	800180c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <TIM_Base_SetConfig+0xb8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d103      	bne.n	8001840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	615a      	str	r2, [r3, #20]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40000400 	.word	0x40000400
 8001858:	40000800 	.word	0x40000800

0800185c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	f023 0201 	bic.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800188a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f023 0302 	bic.w	r3, r3, #2
 80018a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <TIM_OC1_SetConfig+0xc8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d10c      	bne.n	80018d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f023 0308 	bic.w	r3, r3, #8
 80018be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <TIM_OC1_SetConfig+0xc8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d111      	bne.n	80018fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	621a      	str	r2, [r3, #32]
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40012c00 	.word	0x40012c00

08001928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	f023 0210 	bic.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f023 0320 	bic.w	r3, r3, #32
 8001972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <TIM_OC2_SetConfig+0xd0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10d      	bne.n	80019a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800198e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <TIM_OC2_SetConfig+0xd0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d113      	bne.n	80019d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	621a      	str	r2, [r3, #32]
}
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40012c00 	.word	0x40012c00

080019fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <TIM_OC3_SetConfig+0xd0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10d      	bne.n	8001a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <TIM_OC3_SetConfig+0xd0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d113      	bne.n	8001aa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	621a      	str	r2, [r3, #32]
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00

08001ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	031b      	lsls	r3, r3, #12
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <TIM_OC4_SetConfig+0x98>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d109      	bne.n	8001b44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	621a      	str	r2, [r3, #32]
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b30      	cmp	r3, #48	; 0x30
 8001bb0:	d05c      	beq.n	8001c6c <TIM_SlaveTimer_SetConfig+0x100>
 8001bb2:	2b30      	cmp	r3, #48	; 0x30
 8001bb4:	d806      	bhi.n	8001bc4 <TIM_SlaveTimer_SetConfig+0x58>
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d058      	beq.n	8001c6c <TIM_SlaveTimer_SetConfig+0x100>
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d056      	beq.n	8001c6c <TIM_SlaveTimer_SetConfig+0x100>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d054      	beq.n	8001c6c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8001bc2:	e054      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8001bc4:	2b50      	cmp	r3, #80	; 0x50
 8001bc6:	d03d      	beq.n	8001c44 <TIM_SlaveTimer_SetConfig+0xd8>
 8001bc8:	2b50      	cmp	r3, #80	; 0x50
 8001bca:	d802      	bhi.n	8001bd2 <TIM_SlaveTimer_SetConfig+0x66>
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d010      	beq.n	8001bf2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8001bd0:	e04d      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8001bd2:	2b60      	cmp	r3, #96	; 0x60
 8001bd4:	d040      	beq.n	8001c58 <TIM_SlaveTimer_SetConfig+0xec>
 8001bd6:	2b70      	cmp	r3, #112	; 0x70
 8001bd8:	d000      	beq.n	8001bdc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8001bda:	e048      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f000 f9c8 	bl	8001f80 <TIM_ETR_SetConfig>
      break;
 8001bf0:	e03d      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d101      	bne.n	8001bfe <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e038      	b.n	8001c70 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c24:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	621a      	str	r2, [r3, #32]
      break;
 8001c42:	e014      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f000 f86b 	bl	8001d2c <TIM_TI1_ConfigInputStage>
      break;
 8001c56:	e00a      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	461a      	mov	r2, r3
 8001c66:	f000 f8cb 	bl	8001e00 <TIM_TI2_ConfigInputStage>
      break;
 8001c6a:	e000      	b.n	8001c6e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8001c6c:	bf00      	nop
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	f023 0201 	bic.w	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <TIM_TI1_SetConfig+0xa8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00b      	beq.n	8001cbe <TIM_TI1_SetConfig+0x46>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d007      	beq.n	8001cbe <TIM_TI1_SetConfig+0x46>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <TIM_TI1_SetConfig+0xac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d003      	beq.n	8001cbe <TIM_TI1_SetConfig+0x46>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <TIM_TI1_SetConfig+0xb0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <TIM_TI1_SetConfig+0x4a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <TIM_TI1_SetConfig+0x4c>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e003      	b.n	8001ce2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f023 030a 	bic.w	r3, r3, #10
 8001cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 030a 	and.w	r3, r3, #10
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	621a      	str	r2, [r3, #32]
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800

08001d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	f023 0201 	bic.w	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f023 030a 	bic.w	r3, r3, #10
 8001d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	621a      	str	r2, [r3, #32]
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	f023 0210 	bic.w	r2, r3, #16
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	031b      	lsls	r3, r3, #12
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	621a      	str	r2, [r3, #32]
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f023 0210 	bic.w	r2, r3, #16
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	031b      	lsls	r3, r3, #12
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	621a      	str	r2, [r3, #32]
}
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b087      	sub	sp, #28
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	621a      	str	r2, [r3, #32]
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	031b      	lsls	r3, r3, #12
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	031b      	lsls	r3, r3, #12
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	621a      	str	r2, [r3, #32]
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f043 0307 	orr.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	021a      	lsls	r2, r3, #8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	621a      	str	r2, [r3, #32]
}
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800201a:	2302      	movs	r3, #2
 800201c:	e032      	b.n	8002084 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002056:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4313      	orrs	r3, r2
 8002060:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <AH_BL>:
//	CLowOFF;
//}


void AH_BL(uint32_t Pulsewidth)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

	TIM2->CCR1=Pulsewidth; 	//Phase A   PWM
 8002098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2=0;		   	//Phase B   0
 80020a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a4:	2200      	movs	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3=0;			//Phase c   0
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ac:	2200      	movs	r2, #0
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c

	ALowOFF;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <AH_BL+0x50>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <AH_BL+0x50>)
 80020b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ba:	6113      	str	r3, [r2, #16]
	BLowON;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <AH_BL+0x50>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <AH_BL+0x50>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	6113      	str	r3, [r2, #16]
	CLowOFF;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <AH_BL+0x50>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <AH_BL+0x50>)
 80020ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d2:	6113      	str	r3, [r2, #16]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40010800 	.word	0x40010800

080020e4 <AH_CL>:

//Phase A PWM, C low, B open
void AH_CL(uint32_t Pulsewidth)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	TIM2->CCR1=Pulsewidth; 	//Phase A	PWM
 80020ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2=0;		   	//Phase B   0
 80020f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f8:	2200      	movs	r2, #0
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3=0;			//Phase c   0
 80020fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002100:	2200      	movs	r2, #0
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c

	ALowOFF;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <AH_CL+0x50>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <AH_CL+0x50>)
 800210a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800210e:	6113      	str	r3, [r2, #16]
	BLowOFF;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <AH_CL+0x50>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <AH_CL+0x50>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800211a:	6113      	str	r3, [r2, #16]
	CLowON;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <AH_CL+0x50>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <AH_CL+0x50>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6113      	str	r3, [r2, #16]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010800 	.word	0x40010800

08002138 <BH_CL>:

//Phase B PWM, C low, A open
void BH_CL(uint32_t Pulsewidth)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	TIM2->CCR1=0; 			//Phase A 	0
 8002140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002144:	2200      	movs	r2, #0
 8002146:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2=Pulsewidth;	//Phase B   PWM
 8002148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3=0;			//Phase c   0
 8002150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002154:	2200      	movs	r2, #0
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c

	ALowOFF;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <BH_CL+0x50>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <BH_CL+0x50>)
 800215e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002162:	6113      	str	r3, [r2, #16]
	BLowOFF;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <BH_CL+0x50>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <BH_CL+0x50>)
 800216a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216e:	6113      	str	r3, [r2, #16]
	CLowON;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <BH_CL+0x50>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <BH_CL+0x50>)
 8002176:	f043 0320 	orr.w	r3, r3, #32
 800217a:	6113      	str	r3, [r2, #16]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40010800 	.word	0x40010800

0800218c <BH_AL>:

//Phase B PWM, A low, C open
void BH_AL(uint32_t Pulsewidth)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	TIM2->CCR1=0; 			//Phase A 	0
 8002194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002198:	2200      	movs	r2, #0
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2=Pulsewidth;	//Phase B   PWM
 800219c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3=0;			//Phase c   0
 80021a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021a8:	2200      	movs	r2, #0
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c


	ALowON;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <BH_AL+0x50>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <BH_AL+0x50>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	6113      	str	r3, [r2, #16]
	BLowOFF;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <BH_AL+0x50>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <BH_AL+0x50>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	6113      	str	r3, [r2, #16]
	CLowOFF;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <BH_AL+0x50>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <BH_AL+0x50>)
 80021ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ce:	6113      	str	r3, [r2, #16]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010800 	.word	0x40010800

080021e0 <CH_AL>:

//Phase C PWM, A low, B open
void CH_AL(uint32_t Pulsewidth)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	TIM2->CCR1=0; 			//Phase A 	0
 80021e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2=0;			//Phase B   0
 80021f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f4:	2200      	movs	r2, #0
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3=Pulsewidth;	//Phase c   PWM
 80021f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	63d3      	str	r3, [r2, #60]	; 0x3c

	ALowON;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <CH_AL+0x50>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <CH_AL+0x50>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6113      	str	r3, [r2, #16]
	BLowOFF;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <CH_AL+0x50>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <CH_AL+0x50>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002216:	6113      	str	r3, [r2, #16]
	CLowOFF;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <CH_AL+0x50>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <CH_AL+0x50>)
 800221e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002222:	6113      	str	r3, [r2, #16]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010800 	.word	0x40010800

08002234 <CH_BL>:

//Phase C PWM, B low, C open
void CH_BL(uint32_t Pulsewidth)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	TIM2->CCR1=0; 			//Phase A 	0
 800223c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002240:	2200      	movs	r2, #0
 8002242:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2=0;			//Phase B   0
 8002244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002248:	2200      	movs	r2, #0
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3=Pulsewidth;	//Phase c   PWM
 800224c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	63d3      	str	r3, [r2, #60]	; 0x3c

	ALowOFF;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <CH_BL+0x50>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <CH_BL+0x50>)
 800225a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800225e:	6113      	str	r3, [r2, #16]
	BLowON;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <CH_BL+0x50>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <CH_BL+0x50>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6113      	str	r3, [r2, #16]
	CLowOFF;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <CH_BL+0x50>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <CH_BL+0x50>)
 8002272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002276:	6113      	str	r3, [r2, #16]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010800 	.word	0x40010800

08002288 <AllPhaseOFF>:

void AllPhaseOFF()
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
	TIM2->CCR1=0;		 	//Phase A   0
 800228c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002290:	2200      	movs	r2, #0
 8002292:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2=0;		   	//Phase B   0
 8002294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002298:	2200      	movs	r2, #0
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3=0;			//Phase c   0
 800229c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a0:	2200      	movs	r2, #0
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

	ALowOFF;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <AllPhaseOFF+0x48>)
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <AllPhaseOFF+0x48>)
 80022aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022ae:	6113      	str	r3, [r2, #16]
	BLowOFF;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <AllPhaseOFF+0x48>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <AllPhaseOFF+0x48>)
 80022b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ba:	6113      	str	r3, [r2, #16]
	CLowOFF;
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <AllPhaseOFF+0x48>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <AllPhaseOFF+0x48>)
 80022c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c6:	6113      	str	r3, [r2, #16]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40010800 	.word	0x40010800

080022d4 <set_next_step>:

void set_next_step(uint32_t state, uint32_t Pulsewidth)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  switch(state)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d827      	bhi.n	8002334 <set_next_step+0x60>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <set_next_step+0x18>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	08002315 	.word	0x08002315
 80022f8:	0800231d 	.word	0x0800231d
 80022fc:	08002325 	.word	0x08002325
 8002300:	0800232d 	.word	0x0800232d
  {
    case 0:
      AH_BL(Pulsewidth);
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f7ff fec3 	bl	8002090 <AH_BL>
      break;
 800230a:	e013      	b.n	8002334 <set_next_step+0x60>
    case 1:
      AH_CL(Pulsewidth);
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f7ff fee9 	bl	80020e4 <AH_CL>
      break;
 8002312:	e00f      	b.n	8002334 <set_next_step+0x60>
    case 2:
      BH_CL(Pulsewidth);
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f7ff ff0f 	bl	8002138 <BH_CL>
      break;
 800231a:	e00b      	b.n	8002334 <set_next_step+0x60>
    case 3:
      BH_AL(Pulsewidth);
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f7ff ff35 	bl	800218c <BH_AL>
      break;
 8002322:	e007      	b.n	8002334 <set_next_step+0x60>
    case 4:
      CH_AL(Pulsewidth);
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f7ff ff5b 	bl	80021e0 <CH_AL>
      break;
 800232a:	e003      	b.n	8002334 <set_next_step+0x60>
    case 5:
      CH_BL(Pulsewidth);
 800232c:	6838      	ldr	r0, [r7, #0]
 800232e:	f7ff ff81 	bl	8002234 <CH_BL>
      break;
 8002332:	bf00      	nop
  }
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <SetNextState>:

void SetNextState(uint32_t * MotoStat, uint32_t * PWMValue, uint32_t * ZeroCrossCnt)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
	uint32_t CcrossstateHist;

	static uint32_t CurrentState=0;
	static uint32_t ChangeStateFlag=0;

	uint32_t ZeroCrossValid=0;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ZeroCrossFlag;
	static uint32_t ZeroCrossStateChange;

	//Save previous States
	AcrossstateHist=Acrossstate;
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <SetNextState+0x25c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61fb      	str	r3, [r7, #28]
	BcrossstateHist=Bcrossstate;
 8002352:	4b92      	ldr	r3, [pc, #584]	; (800259c <SetNextState+0x260>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61bb      	str	r3, [r7, #24]
	CcrossstateHist=Ccrossstate;
 8002358:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <SetNextState+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	617b      	str	r3, [r7, #20]

	//Read Zero Cross Pins
	Acrossstate=ACROSSSTAT;
 800235e:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <SetNextState+0x268>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	4a8c      	ldr	r2, [pc, #560]	; (8002598 <SetNextState+0x25c>)
 8002368:	6013      	str	r3, [r2, #0]
	Bcrossstate=BCROSSSTAT;
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <SetNextState+0x268>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	4a8a      	ldr	r2, [pc, #552]	; (800259c <SetNextState+0x260>)
 8002374:	6013      	str	r3, [r2, #0]
	Ccrossstate=CCROSSSTAT;
 8002376:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <SetNextState+0x268>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	4a88      	ldr	r2, [pc, #544]	; (80025a0 <SetNextState+0x264>)
 8002380:	6013      	str	r3, [r2, #0]


	if(Acrossstate!=AcrossstateHist)
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <SetNextState+0x25c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	429a      	cmp	r2, r3
 800238a:	d025      	beq.n	80023d8 <SetNextState+0x9c>
	{
		if(Acrossstate)
 800238c:	4b82      	ldr	r3, [pc, #520]	; (8002598 <SetNextState+0x25c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00f      	beq.n	80023b4 <SetNextState+0x78>
		{
			ZeroCrossStateChange=1;
 8002394:	4b84      	ldr	r3, [pc, #528]	; (80025a8 <SetNextState+0x26c>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]
			if(*MotoStat==1)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d117      	bne.n	80023d2 <SetNextState+0x96>
			{
				CurrentState=0;
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <SetNextState+0x270>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
				*ZeroCrossCnt=*ZeroCrossCnt+1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e00e      	b.n	80023d2 <SetNextState+0x96>
			}
		}
		else
		{
			ZeroCrossStateChange=2;
 80023b4:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <SetNextState+0x26c>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
			if(*MotoStat==1)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <SetNextState+0x96>
			{
				CurrentState=1;
 80023c2:	4b7a      	ldr	r3, [pc, #488]	; (80025ac <SetNextState+0x270>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
				*ZeroCrossCnt=*ZeroCrossCnt+1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
			}
		}
		ZeroCrossFlag=1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	623b      	str	r3, [r7, #32]
 80023d6:	e057      	b.n	8002488 <SetNextState+0x14c>
	}

	else if(Bcrossstate!=BcrossstateHist)
 80023d8:	4b70      	ldr	r3, [pc, #448]	; (800259c <SetNextState+0x260>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d025      	beq.n	800242e <SetNextState+0xf2>
	{
		if(Bcrossstate)
 80023e2:	4b6e      	ldr	r3, [pc, #440]	; (800259c <SetNextState+0x260>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00f      	beq.n	800240a <SetNextState+0xce>
		{
			ZeroCrossStateChange=3;
 80023ea:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <SetNextState+0x26c>)
 80023ec:	2203      	movs	r2, #3
 80023ee:	601a      	str	r2, [r3, #0]
			if(*MotoStat==1)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d117      	bne.n	8002428 <SetNextState+0xec>
			{
				CurrentState=2;
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <SetNextState+0x270>)
 80023fa:	2202      	movs	r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
				*ZeroCrossCnt=*ZeroCrossCnt+1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e00e      	b.n	8002428 <SetNextState+0xec>
			}
		}
		else
		{
			ZeroCrossStateChange=4;
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <SetNextState+0x26c>)
 800240c:	2204      	movs	r2, #4
 800240e:	601a      	str	r2, [r3, #0]
			if(*MotoStat==1)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <SetNextState+0xec>
			{
				CurrentState=3;
 8002418:	4b64      	ldr	r3, [pc, #400]	; (80025ac <SetNextState+0x270>)
 800241a:	2203      	movs	r2, #3
 800241c:	601a      	str	r2, [r3, #0]
				*ZeroCrossCnt=*ZeroCrossCnt+1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
			}

		}
		ZeroCrossFlag=1;
 8002428:	2301      	movs	r3, #1
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	e02c      	b.n	8002488 <SetNextState+0x14c>
	}

	else if(Ccrossstate!=CcrossstateHist)
 800242e:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <SetNextState+0x264>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	d025      	beq.n	8002484 <SetNextState+0x148>
	{
		if(Ccrossstate)
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <SetNextState+0x264>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00f      	beq.n	8002460 <SetNextState+0x124>
		{
			ZeroCrossStateChange=5;
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <SetNextState+0x26c>)
 8002442:	2205      	movs	r2, #5
 8002444:	601a      	str	r2, [r3, #0]
			if(*MotoStat==1)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d117      	bne.n	800247e <SetNextState+0x142>
			{
				CurrentState=4;
 800244e:	4b57      	ldr	r3, [pc, #348]	; (80025ac <SetNextState+0x270>)
 8002450:	2204      	movs	r2, #4
 8002452:	601a      	str	r2, [r3, #0]
				*ZeroCrossCnt=*ZeroCrossCnt+1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00e      	b.n	800247e <SetNextState+0x142>
			}
		}
		else
		{
			ZeroCrossStateChange=0;
 8002460:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <SetNextState+0x26c>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
			if(*MotoStat==1)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <SetNextState+0x142>
			{
				CurrentState=5;
 800246e:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <SetNextState+0x270>)
 8002470:	2205      	movs	r2, #5
 8002472:	601a      	str	r2, [r3, #0]
				*ZeroCrossCnt=*ZeroCrossCnt+1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
			}
		}
		ZeroCrossFlag=1;
 800247e:	2301      	movs	r3, #1
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	e001      	b.n	8002488 <SetNextState+0x14c>
	}

	else ZeroCrossFlag=0;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]


	if(ZeroCrossFlag)
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80ae 	beq.w	80025ec <SetNextState+0x2b0>
	{
		switch(ZeroCrossStateChange)
 8002490:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <SetNextState+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b05      	cmp	r3, #5
 8002496:	f200 80a9 	bhi.w	80025ec <SetNextState+0x2b0>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <SetNextState+0x164>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b9 	.word	0x080024b9
 80024a4:	080024e1 	.word	0x080024e1
 80024a8:	08002509 	.word	0x08002509
 80024ac:	08002531 	.word	0x08002531
 80024b0:	08002559 	.word	0x08002559
 80024b4:	08002581 	.word	0x08002581
		{
			case 0 :{
						if(CurrentState==5)
 80024b8:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <SetNextState+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d107      	bne.n	80024d0 <SetNextState+0x194>
						{
							ZeroCrossValid=1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
							watchState0++;
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <SetNextState+0x274>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <SetNextState+0x274>)
 80024cc:	6013      	str	r3, [r2, #0]
						else
						{
							ZeroCrossValid=0;
							watchState0Err++;
						}
					}break;
 80024ce:	e08d      	b.n	80025ec <SetNextState+0x2b0>
							ZeroCrossValid=0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
							watchState0Err++;
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <SetNextState+0x278>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a36      	ldr	r2, [pc, #216]	; (80025b4 <SetNextState+0x278>)
 80024dc:	6013      	str	r3, [r2, #0]
					}break;
 80024de:	e085      	b.n	80025ec <SetNextState+0x2b0>
			case 1 :{
						if(CurrentState==0)
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <SetNextState+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <SetNextState+0x1bc>
						{
							ZeroCrossValid=1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
							watchState1++;
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <SetNextState+0x27c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <SetNextState+0x27c>)
 80024f4:	6013      	str	r3, [r2, #0]
						else
						{
							ZeroCrossValid=0;
							watchState1Err++;
						}
					}break;
 80024f6:	e079      	b.n	80025ec <SetNextState+0x2b0>
							ZeroCrossValid=0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
							watchState1Err++;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <SetNextState+0x280>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <SetNextState+0x280>)
 8002504:	6013      	str	r3, [r2, #0]
					}break;
 8002506:	e071      	b.n	80025ec <SetNextState+0x2b0>
			case 2 :{
						if(CurrentState==1)
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <SetNextState+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <SetNextState+0x1e4>
						{
							ZeroCrossValid=1;
 8002510:	2301      	movs	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
							watchState2++;
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <SetNextState+0x284>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <SetNextState+0x284>)
 800251c:	6013      	str	r3, [r2, #0]
						else
						{
							ZeroCrossValid=0;
							watchState2Err++;
						}
					}break;
 800251e:	e065      	b.n	80025ec <SetNextState+0x2b0>
							ZeroCrossValid=0;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
							watchState2Err++;
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <SetNextState+0x288>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <SetNextState+0x288>)
 800252c:	6013      	str	r3, [r2, #0]
					}break;
 800252e:	e05d      	b.n	80025ec <SetNextState+0x2b0>
			case 3 :{
						if(CurrentState==2)
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <SetNextState+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d107      	bne.n	8002548 <SetNextState+0x20c>
						{
							ZeroCrossValid=1;
 8002538:	2301      	movs	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
							watchState3++;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <SetNextState+0x28c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <SetNextState+0x28c>)
 8002544:	6013      	str	r3, [r2, #0]
						else
						{
							ZeroCrossValid=0;
							watchState3Err++;
						}
					}break;
 8002546:	e051      	b.n	80025ec <SetNextState+0x2b0>
							ZeroCrossValid=0;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
							watchState3Err++;
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <SetNextState+0x290>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <SetNextState+0x290>)
 8002554:	6013      	str	r3, [r2, #0]
					}break;
 8002556:	e049      	b.n	80025ec <SetNextState+0x2b0>
			case 4 :{
						if(CurrentState==3)
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <SetNextState+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d107      	bne.n	8002570 <SetNextState+0x234>
						{
							ZeroCrossValid=1;
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
							watchState4++;
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <SetNextState+0x294>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <SetNextState+0x294>)
 800256c:	6013      	str	r3, [r2, #0]
						else
						{
							ZeroCrossValid=0;
							watchState4Err++;
						}
					}break;
 800256e:	e03d      	b.n	80025ec <SetNextState+0x2b0>
							ZeroCrossValid=0;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
							watchState4Err++;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <SetNextState+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <SetNextState+0x298>)
 800257c:	6013      	str	r3, [r2, #0]
					}break;
 800257e:	e035      	b.n	80025ec <SetNextState+0x2b0>
			case 5 :{
						if(CurrentState==4)
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <SetNextState+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d129      	bne.n	80025dc <SetNextState+0x2a0>
						{
							ZeroCrossValid=1;
 8002588:	2301      	movs	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
							watchState5++;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <SetNextState+0x29c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <SetNextState+0x29c>)
 8002594:	6013      	str	r3, [r2, #0]
						else
						{
							ZeroCrossValid=0;
							watchState5Err++;
							}
					}break;
 8002596:	e028      	b.n	80025ea <SetNextState+0x2ae>
 8002598:	2000008c 	.word	0x2000008c
 800259c:	20000090 	.word	0x20000090
 80025a0:	20000094 	.word	0x20000094
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	20000098 	.word	0x20000098
 80025ac:	2000009c 	.word	0x2000009c
 80025b0:	2000012c 	.word	0x2000012c
 80025b4:	2000116c 	.word	0x2000116c
 80025b8:	200000e0 	.word	0x200000e0
 80025bc:	2000017c 	.word	0x2000017c
 80025c0:	200000d4 	.word	0x200000d4
 80025c4:	200000dc 	.word	0x200000dc
 80025c8:	20000130 	.word	0x20000130
 80025cc:	20001170 	.word	0x20001170
 80025d0:	200000d0 	.word	0x200000d0
 80025d4:	20001164 	.word	0x20001164
 80025d8:	20000178 	.word	0x20000178
							ZeroCrossValid=0;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
							watchState5Err++;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <SetNextState+0x2f8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <SetNextState+0x2f8>)
 80025e8:	6013      	str	r3, [r2, #0]
					}break;
 80025ea:	bf00      	nop
		}
	}

	if (*MotoStat==2)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d11b      	bne.n	800262c <SetNextState+0x2f0>
	{
		if(ZeroCrossValid && ZeroCrossFlag)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <SetNextState+0x2ca>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <SetNextState+0x2ca>
		{

			ChangeStateFlag=1; 				//Trigger State change
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <SetNextState+0x2fc>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]
		}

		if(ChangeStateFlag)
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <SetNextState+0x2fc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00e      	beq.n	800262c <SetNextState+0x2f0>
		{
			set_next_step(ZeroCrossStateChange,* PWMValue);
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <SetNextState+0x300>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f7ff fe5b 	bl	80022d4 <set_next_step>
			CurrentState=ZeroCrossStateChange; 	//set new state
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <SetNextState+0x300>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a07      	ldr	r2, [pc, #28]	; (8002640 <SetNextState+0x304>)
 8002624:	6013      	str	r3, [r2, #0]
			ChangeStateFlag=0; 					//reset
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SetNextState+0x2fc>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
		}
	}


}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200000d8 	.word	0x200000d8
 8002638:	200000a0 	.word	0x200000a0
 800263c:	20000098 	.word	0x20000098
 8002640:	2000009c 	.word	0x2000009c

08002644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800264c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800265c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800266c:	e000      	b.n	8002670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800266e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f9      	beq.n	800266e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800267a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002684:	687b      	ldr	r3, [r7, #4]
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002694:	f7fd fd5a 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002698:	f000 f844 	bl	8002724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269c:	f000 fa0a 	bl	8002ab4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80026a0:	f000 f886 	bl	80027b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80026a4:	f000 f924 	bl	80028f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026a8:	f000 f9ae 	bl	8002a08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ALowOFF;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <main+0x80>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <main+0x80>)
 80026b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026b6:	6113      	str	r3, [r2, #16]
  BLowOFF;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <main+0x80>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <main+0x80>)
 80026be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c2:	6113      	str	r3, [r2, #16]
  CLowOFF;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <main+0x80>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4a11      	ldr	r2, [pc, #68]	; (8002710 <main+0x80>)
 80026ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ce:	6113      	str	r3, [r2, #16]
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 80026d0:	2100      	movs	r1, #0
 80026d2:	4810      	ldr	r0, [pc, #64]	; (8002714 <main+0x84>)
 80026d4:	f7fe fd3e 	bl	8001154 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 80026d8:	2104      	movs	r1, #4
 80026da:	480e      	ldr	r0, [pc, #56]	; (8002714 <main+0x84>)
 80026dc:	f7fe fd3a 	bl	8001154 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80026e0:	480d      	ldr	r0, [pc, #52]	; (8002718 <main+0x88>)
 80026e2:	f7fe fc4e 	bl	8000f82 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80026e6:	2100      	movs	r1, #0
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <main+0x8c>)
 80026ea:	f7fe fccd 	bl	8001088 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80026ee:	2104      	movs	r1, #4
 80026f0:	480a      	ldr	r0, [pc, #40]	; (800271c <main+0x8c>)
 80026f2:	f7fe fcc9 	bl	8001088 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80026f6:	2108      	movs	r1, #8
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <main+0x8c>)
 80026fa:	f7fe fcc5 	bl	8001088 <HAL_TIM_PWM_Start>
	  //Flush buffer using function or Flush buffer using /n
	  //printf("tester%u",watch1);
	  //fflush(stdout);
	  //ITMstringSend("Hello\n\r",7); //more direct approach

	  MainLoop++;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <main+0x90>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <main+0x90>)
 8002706:	6013      	str	r3, [r2, #0]
	  HAL_Delay(50);
 8002708:	2032      	movs	r0, #50	; 0x32
 800270a:	f7fd fd81 	bl	8000210 <HAL_Delay>
	  MainLoop++;
 800270e:	e7f6      	b.n	80026fe <main+0x6e>
 8002710:	40010800 	.word	0x40010800
 8002714:	20000134 	.word	0x20000134
 8002718:	200000ec 	.word	0x200000ec
 800271c:	20001124 	.word	0x20001124
 8002720:	20000180 	.word	0x20000180

08002724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b090      	sub	sp, #64	; 0x40
 8002728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	2228      	movs	r2, #40	; 0x28
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fd88 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800274a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002756:	2301      	movs	r3, #1
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275a:	2302      	movs	r3, #2
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800275e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002764:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800276a:	f107 0318 	add.w	r3, r7, #24
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fff0 	bl	8000754 <HAL_RCC_OscConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800277a:	f000 fa30 	bl	8002bde <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277e:	230f      	movs	r3, #15
 8002780:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002782:	2302      	movs	r3, #2
 8002784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800278a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2102      	movs	r1, #2
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fa5b 	bl	8000c54 <HAL_RCC_ClockConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80027a4:	f000 fa1b 	bl	8002bde <Error_Handler>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3740      	adds	r7, #64	; 0x40
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b090      	sub	sp, #64	; 0x40
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ea:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <MX_TIM1_Init+0x138>)
 80027ec:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <MX_TIM1_Init+0x13c>)
 80027ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80027f0:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <MX_TIM1_Init+0x138>)
 80027f2:	2247      	movs	r2, #71	; 0x47
 80027f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <MX_TIM1_Init+0x138>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <MX_TIM1_Init+0x138>)
 80027fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002802:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <MX_TIM1_Init+0x138>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <MX_TIM1_Init+0x138>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <MX_TIM1_Init+0x138>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002816:	4834      	ldr	r0, [pc, #208]	; (80028e8 <MX_TIM1_Init+0x138>)
 8002818:	f7fe fb88 	bl	8000f2c <HAL_TIM_Base_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002822:	f000 f9dc 	bl	8002bde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800282c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002830:	4619      	mov	r1, r3
 8002832:	482d      	ldr	r0, [pc, #180]	; (80028e8 <MX_TIM1_Init+0x138>)
 8002834:	f7fe fe72 	bl	800151c <HAL_TIM_ConfigClockSource>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800283e:	f000 f9ce 	bl	8002bde <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002842:	4829      	ldr	r0, [pc, #164]	; (80028e8 <MX_TIM1_Init+0x138>)
 8002844:	f7fe fc52 	bl	80010ec <HAL_TIM_IC_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800284e:	f000 f9c6 	bl	8002bde <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002852:	2304      	movs	r3, #4
 8002854:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002856:	2350      	movs	r3, #80	; 0x50
 8002858:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	481e      	ldr	r0, [pc, #120]	; (80028e8 <MX_TIM1_Init+0x138>)
 800286e:	f7fe ff0c 	bl	800168a <HAL_TIM_SlaveConfigSynchro>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002878:	f000 f9b1 	bl	8002bde <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002880:	2301      	movs	r3, #1
 8002882:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2200      	movs	r2, #0
 8002892:	4619      	mov	r1, r3
 8002894:	4814      	ldr	r0, [pc, #80]	; (80028e8 <MX_TIM1_Init+0x138>)
 8002896:	f7fe fcdf 	bl	8001258 <HAL_TIM_IC_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80028a0:	f000 f99d 	bl	8002bde <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80028a4:	2302      	movs	r3, #2
 80028a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80028a8:	2302      	movs	r3, #2
 80028aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2204      	movs	r2, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	480c      	ldr	r0, [pc, #48]	; (80028e8 <MX_TIM1_Init+0x138>)
 80028b6:	f7fe fccf 	bl	8001258 <HAL_TIM_IC_ConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80028c0:	f000 f98d 	bl	8002bde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_TIM1_Init+0x138>)
 80028d2:	f7ff fb98 	bl	8002006 <HAL_TIMEx_MasterConfigSynchronization>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80028dc:	f000 f97f 	bl	8002bde <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	3740      	adds	r7, #64	; 0x40
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000134 	.word	0x20000134
 80028ec:	40012c00 	.word	0x40012c00

080028f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	f107 0320 	add.w	r3, r7, #32
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	615a      	str	r2, [r3, #20]
 800291e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002920:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <MX_TIM2_Init+0x114>)
 800292a:	2203      	movs	r2, #3
 800292c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002934:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293c:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <MX_TIM2_Init+0x114>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002948:	482e      	ldr	r0, [pc, #184]	; (8002a04 <MX_TIM2_Init+0x114>)
 800294a:	f7fe faef 	bl	8000f2c <HAL_TIM_Base_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002954:	f000 f943 	bl	8002bde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800295e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002962:	4619      	mov	r1, r3
 8002964:	4827      	ldr	r0, [pc, #156]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002966:	f7fe fdd9 	bl	800151c <HAL_TIM_ConfigClockSource>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002970:	f000 f935 	bl	8002bde <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002974:	4823      	ldr	r0, [pc, #140]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002976:	f7fe fb52 	bl	800101e <HAL_TIM_PWM_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002980:	f000 f92d 	bl	8002bde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298c:	f107 0320 	add.w	r3, r7, #32
 8002990:	4619      	mov	r1, r3
 8002992:	481c      	ldr	r0, [pc, #112]	; (8002a04 <MX_TIM2_Init+0x114>)
 8002994:	f7ff fb37 	bl	8002006 <HAL_TIMEx_MasterConfigSynchronization>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800299e:	f000 f91e 	bl	8002bde <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a2:	2360      	movs	r3, #96	; 0x60
 80029a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4812      	ldr	r0, [pc, #72]	; (8002a04 <MX_TIM2_Init+0x114>)
 80029ba:	f7fe fce9 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029c4:	f000 f90b 	bl	8002bde <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2204      	movs	r2, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_TIM2_Init+0x114>)
 80029d0:	f7fe fcde 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80029da:	f000 f900 	bl	8002bde <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2208      	movs	r2, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	4807      	ldr	r0, [pc, #28]	; (8002a04 <MX_TIM2_Init+0x114>)
 80029e6:	f7fe fcd3 	bl	8001390 <HAL_TIM_PWM_ConfigChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80029f0:	f000 f8f5 	bl	8002bde <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <MX_TIM2_Init+0x114>)
 80029f6:	f000 f9a3 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 80029fa:	bf00      	nop
 80029fc:	3738      	adds	r7, #56	; 0x38
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20001124 	.word	0x20001124

08002a08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0e:	f107 0320 	add.w	r3, r7, #32
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	615a      	str	r2, [r3, #20]
 8002a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a2c:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <MX_TIM3_Init+0xa8>)
 8002a2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002a50:	4816      	ldr	r0, [pc, #88]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a52:	f7fe fab9 	bl	8000fc8 <HAL_TIM_OC_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a5c:	f000 f8bf 	bl	8002bde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a68:	f107 0320 	add.w	r3, r7, #32
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480f      	ldr	r0, [pc, #60]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a70:	f7ff fac9 	bl	8002006 <HAL_TIMEx_MasterConfigSynchronization>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a7a:	f000 f8b0 	bl	8002bde <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	4619      	mov	r1, r3
 8002a94:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_TIM3_Init+0xa4>)
 8002a96:	f7fe fb7f 	bl	8001198 <HAL_TIM_OC_ConfigChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002aa0:	f000 f89d 	bl	8002bde <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200000ec 	.word	0x200000ec
 8002ab0:	40000400 	.word	0x40000400

08002ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a39      	ldr	r2, [pc, #228]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002ace:	f043 0320 	orr.w	r3, r3, #32
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae0:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af8:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	6193      	str	r3, [r2, #24]
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <MX_GPIO_Init+0x100>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ALow_Pin|BLow_Pin|CLow_Pin, GPIO_PIN_RESET);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2138      	movs	r1, #56	; 0x38
 8002b14:	4828      	ldr	r0, [pc, #160]	; (8002bb8 <MX_GPIO_Init+0x104>)
 8002b16:	f7fd fe05 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b20:	4826      	ldr	r0, [pc, #152]	; (8002bbc <MX_GPIO_Init+0x108>)
 8002b22:	f7fd fdff 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ALow_Pin BLow_Pin CLow_Pin */
  GPIO_InitStruct.Pin = ALow_Pin|BLow_Pin|CLow_Pin;
 8002b26:	2338      	movs	r3, #56	; 0x38
 8002b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	481e      	ldr	r0, [pc, #120]	; (8002bb8 <MX_GPIO_Init+0x104>)
 8002b3e:	f7fd fc97 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Azero_Pin Bzero_Pin Czero_Pin */
  GPIO_InitStruct.Pin = Azero_Pin|Bzero_Pin|Czero_Pin;
 8002b42:	f240 4303 	movw	r3, #1027	; 0x403
 8002b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <MX_GPIO_Init+0x10c>)
 8002b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4619      	mov	r1, r3
 8002b56:	4819      	ldr	r0, [pc, #100]	; (8002bbc <MX_GPIO_Init+0x108>)
 8002b58:	f7fd fc8a 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	4619      	mov	r1, r3
 8002b74:	4811      	ldr	r0, [pc, #68]	; (8002bbc <MX_GPIO_Init+0x108>)
 8002b76:	f7fd fc7b 	bl	8000470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2006      	movs	r0, #6
 8002b80:	f7fd fc3f 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b84:	2006      	movs	r0, #6
 8002b86:	f7fd fc58 	bl	800043a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2007      	movs	r0, #7
 8002b90:	f7fd fc37 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b94:	2007      	movs	r0, #7
 8002b96:	f7fd fc50 	bl	800043a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	2028      	movs	r0, #40	; 0x28
 8002ba0:	f7fd fc2f 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ba4:	2028      	movs	r0, #40	; 0x28
 8002ba6:	f7fd fc48 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	40010c00 	.word	0x40010c00
 8002bc0:	10310000 	.word	0x10310000

08002bc4 <__io_putchar>:
  for(i=0 ; i<len ; i++)
    ITM_SendChar((*ptr++));
}

void __io_putchar(char value) //implementation of function from syscall.c to be used in _write function to be used in printf
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(value);
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fd37 	bl	8002644 <ITM_SendChar>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_MspInit+0x5c>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_MspInit+0x5c>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6193      	str	r3, [r2, #24]
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_MspInit+0x5c>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_MspInit+0x60>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_MspInit+0x60>)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010000 	.word	0x40010000

08002c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0318 	add.w	r3, r7, #24
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <HAL_TIM_Base_MspInit+0x98>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d125      	bne.n	8002cbc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002c76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 0318 	add.w	r3, r7, #24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8002cb6:	f7fd fbdb 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cba:	e010      	b.n	8002cde <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d10b      	bne.n	8002cde <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a08      	ldr	r2, [pc, #32]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_TIM_Base_MspInit+0x9c>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010800 	.word	0x40010800

08002cf4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_TIM_OC_MspInit+0x44>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d113      	bne.n	8002d2e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_TIM_OC_MspInit+0x48>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_TIM_OC_MspInit+0x48>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	61d3      	str	r3, [r2, #28]
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_TIM_OC_MspInit+0x48>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2102      	movs	r1, #2
 8002d22:	201d      	movs	r0, #29
 8002d24:	f7fd fb6d 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d28:	201d      	movs	r0, #29
 8002d2a:	f7fd fb86 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d117      	bne.n	8002d90 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <HAL_TIM_MspPostInit+0x58>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_TIM_MspPostInit+0x58>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_TIM_MspPostInit+0x58>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = AHigh_Pin|Bhigh_Pin|Chigh_Pin;
 8002d78:	2307      	movs	r3, #7
 8002d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4804      	ldr	r0, [pc, #16]	; (8002d9c <HAL_TIM_MspPostInit+0x5c>)
 8002d8c:	f7fd fb70 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d90:	bf00      	nop
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010800 	.word	0x40010800

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <HardFault_Handler+0x4>

08002db2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <MemManage_Handler+0x4>

08002db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <BusFault_Handler+0x4>

08002dbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <UsageFault_Handler+0x4>

08002dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dec:	f7fd f9f4 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  //GET INPUT PWM
  Pulsewidth_us=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);//numbers 1000-2000 [us] +-3 possible
 8002df0:	2104      	movs	r1, #4
 8002df2:	4838      	ldr	r0, [pc, #224]	; (8002ed4 <SysTick_Handler+0xec>)
 8002df4:	f7fe fc8c 	bl	8001710 <HAL_TIM_ReadCapturedValue>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <SysTick_Handler+0xf0>)
 8002dfc:	601a      	str	r2, [r3, #0]
  if(Pulsewidth_us<1000)Pulsewidth_us=1000;						//Saturate max Value
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <SysTick_Handler+0xf0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e06:	d204      	bcs.n	8002e12 <SysTick_Handler+0x2a>
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <SysTick_Handler+0xf0>)
 8002e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e008      	b.n	8002e24 <SysTick_Handler+0x3c>
  else if(Pulsewidth_us>2000)Pulsewidth_us=2000;				//Saturate min Value
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <SysTick_Handler+0xf0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e1a:	d903      	bls.n	8002e24 <SysTick_Handler+0x3c>
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <SysTick_Handler+0xf0>)
 8002e1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e22:	601a      	str	r2, [r3, #0]
  PulsewidthCalc_us=Pulsewidth_us-1000;							//numbers 0-1000 [us]
 8002e24:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <SysTick_Handler+0xf0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <SysTick_Handler+0xf4>)
 8002e2e:	6013      	str	r3, [r2, #0]

  //limit VALUE TO MAX PWM
  PulsewidthCalc_us_limited=PulsewidthCalc_us;
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <SysTick_Handler+0xf4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <SysTick_Handler+0xf8>)
 8002e36:	6013      	str	r3, [r2, #0]
  if(PulsewidthCalc_us_limited>=PWM_MAX_LIMIT)PulsewidthCalc_us_limited=PWM_MAX_LIMIT;
 8002e38:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <SysTick_Handler+0xf8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e40:	d303      	bcc.n	8002e4a <SysTick_Handler+0x62>
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <SysTick_Handler+0xf8>)
 8002e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e48:	601a      	str	r2, [r3, #0]

  //Manual spinning conditon
  if(MotorStatus==0 && PulsewidthCalc_us >= MINSTARTTRESHOLD)
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <SysTick_Handler+0xfc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <SysTick_Handler+0x7e>
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <SysTick_Handler+0xf4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b31      	cmp	r3, #49	; 0x31
 8002e58:	d905      	bls.n	8002e66 <SysTick_Handler+0x7e>
  {
	  MotorStatus=1;
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <SysTick_Handler+0xfc>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
	  MotorStateManual=0;
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <SysTick_Handler+0x100>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
  }

  //Stop condition
  if(MotorStatus!=0 && PulsewidthCalc_us < MINSTARTTRESHOLD)
 8002e66:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <SysTick_Handler+0xfc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <SysTick_Handler+0x98>
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <SysTick_Handler+0xf4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b31      	cmp	r3, #49	; 0x31
 8002e74:	d804      	bhi.n	8002e80 <SysTick_Handler+0x98>
  {
	  MotorStatus=0;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <SysTick_Handler+0xfc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
	  AllPhaseOFF();
 8002e7c:	f7ff fa04 	bl	8002288 <AllPhaseOFF>
  }

  //Manually change state to achieve spin
  if(MotorStatus==1)
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <SysTick_Handler+0xfc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11d      	bne.n	8002ec4 <SysTick_Handler+0xdc>
  {
	  statedelaycount++;
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <SysTick_Handler+0x104>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <SysTick_Handler+0x104>)
 8002e90:	6013      	str	r3, [r2, #0]
	  if(statedelaycount>= MANUALSPINSTATEDELAY)
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <SysTick_Handler+0x104>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d914      	bls.n	8002ec4 <SysTick_Handler+0xdc>
	  {
		  set_next_step(MotorStateManual,MAUNALPWMSTART);
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <SysTick_Handler+0x100>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2164      	movs	r1, #100	; 0x64
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fa17 	bl	80022d4 <set_next_step>
		  MotorStateManual++;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <SysTick_Handler+0x100>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <SysTick_Handler+0x100>)
 8002eae:	6013      	str	r3, [r2, #0]
		  if(MotorStateManual==6){MotorStateManual=0;}
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <SysTick_Handler+0x100>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d102      	bne.n	8002ebe <SysTick_Handler+0xd6>
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <SysTick_Handler+0x100>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
		  statedelaycount=0;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <SysTick_Handler+0x104>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
	  }
  }
  printf("MS=%u \n",MotorStatus);
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <SysTick_Handler+0xfc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <SysTick_Handler+0x108>)
 8002ecc:	f000 f9c4 	bl	8003258 <iprintf>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000134 	.word	0x20000134
 8002ed8:	200000a4 	.word	0x200000a4
 8002edc:	200000a8 	.word	0x200000a8
 8002ee0:	200000ac 	.word	0x200000ac
 8002ee4:	200000b8 	.word	0x200000b8
 8002ee8:	200000b4 	.word	0x200000b4
 8002eec:	200000b0 	.word	0x200000b0
 8002ef0:	08004060 	.word	0x08004060

08002ef4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  EXTI->PR |=(EXTI_PR_PR0); //clear IT flag
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <EXTI0_IRQHandler+0x28>)
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <EXTI0_IRQHandler+0x28>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6153      	str	r3, [r2, #20]
  watch1++;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <EXTI0_IRQHandler+0x2c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <EXTI0_IRQHandler+0x2c>)
 8002f0c:	6013      	str	r3, [r2, #0]
  SetNextState(&MotorStatus, &PulsewidthCalc_us_limited, &ZeroCrossCount);
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <EXTI0_IRQHandler+0x30>)
 8002f10:	4905      	ldr	r1, [pc, #20]	; (8002f28 <EXTI0_IRQHandler+0x34>)
 8002f12:	4806      	ldr	r0, [pc, #24]	; (8002f2c <EXTI0_IRQHandler+0x38>)
 8002f14:	f7ff fa12 	bl	800233c <SetNextState>


  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40010400 	.word	0x40010400
 8002f20:	200000e8 	.word	0x200000e8
 8002f24:	200000bc 	.word	0x200000bc
 8002f28:	200000ac 	.word	0x200000ac
 8002f2c:	200000b8 	.word	0x200000b8

08002f30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  EXTI->PR |=(EXTI_PR_PR1); //clear IT flag
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <EXTI1_IRQHandler+0x28>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <EXTI1_IRQHandler+0x28>)
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	6153      	str	r3, [r2, #20]
  watch2++;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <EXTI1_IRQHandler+0x2c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <EXTI1_IRQHandler+0x2c>)
 8002f48:	6013      	str	r3, [r2, #0]
  SetNextState(&MotorStatus, &PulsewidthCalc_us_limited, &ZeroCrossCount);
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <EXTI1_IRQHandler+0x30>)
 8002f4c:	4905      	ldr	r1, [pc, #20]	; (8002f64 <EXTI1_IRQHandler+0x34>)
 8002f4e:	4806      	ldr	r0, [pc, #24]	; (8002f68 <EXTI1_IRQHandler+0x38>)
 8002f50:	f7ff f9f4 	bl	800233c <SetNextState>


  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	200000e4 	.word	0x200000e4
 8002f60:	200000bc 	.word	0x200000bc
 8002f64:	200000ac 	.word	0x200000ac
 8002f68:	200000b8 	.word	0x200000b8

08002f6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  LED_ON;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <TIM3_IRQHandler+0x5c>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <TIM3_IRQHandler+0x5c>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6113      	str	r3, [r2, #16]
  TIM3->SR &=~(TIM_SR_UIF); //clear UIF flag
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <TIM3_IRQHandler+0x60>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <TIM3_IRQHandler+0x60>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6113      	str	r3, [r2, #16]


  //Estimate if motor is spinning enough to switch to AUTO state management

  if(MotorStatus==1 && ZeroCrossCount>MANUALTOAUTOTHRESHOULD)
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <TIM3_IRQHandler+0x64>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d109      	bne.n	8002fa4 <TIM3_IRQHandler+0x38>
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <TIM3_IRQHandler+0x68>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d905      	bls.n	8002fa4 <TIM3_IRQHandler+0x38>
  {
	  MotorStatus=2;
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <TIM3_IRQHandler+0x64>)
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	601a      	str	r2, [r3, #0]
	  ZeroCrossCount=0;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <TIM3_IRQHandler+0x68>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
  }
  if(MotorStatus==0)
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <TIM3_IRQHandler+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <TIM3_IRQHandler+0x46>
  {
	  ZeroCrossCount=0;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <TIM3_IRQHandler+0x68>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  LED_OFF;
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <TIM3_IRQHandler+0x5c>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <TIM3_IRQHandler+0x5c>)
 8002fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fbc:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40010c00 	.word	0x40010c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	200000b8 	.word	0x200000b8
 8002fd4:	200000bc 	.word	0x200000bc

08002fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  EXTI->PR |=(EXTI_PR_PR10); //clear IT flag
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <EXTI15_10_IRQHandler+0x28>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <EXTI15_10_IRQHandler+0x28>)
 8002fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe6:	6153      	str	r3, [r2, #20]
  watch3++;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <EXTI15_10_IRQHandler+0x2c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a05      	ldr	r2, [pc, #20]	; (8003004 <EXTI15_10_IRQHandler+0x2c>)
 8002ff0:	6013      	str	r3, [r2, #0]
  SetNextState(&MotorStatus, &PulsewidthCalc_us_limited, &ZeroCrossCount);
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <EXTI15_10_IRQHandler+0x30>)
 8002ff4:	4905      	ldr	r1, [pc, #20]	; (800300c <EXTI15_10_IRQHandler+0x34>)
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <EXTI15_10_IRQHandler+0x38>)
 8002ff8:	f7ff f9a0 	bl	800233c <SetNextState>


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40010400 	.word	0x40010400
 8003004:	20000174 	.word	0x20000174
 8003008:	200000bc 	.word	0x200000bc
 800300c:	200000ac 	.word	0x200000ac
 8003010:	200000b8 	.word	0x200000b8

08003014 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e00a      	b.n	800303c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003026:	f3af 8000 	nop.w
 800302a:	4601      	mov	r1, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	60ba      	str	r2, [r7, #8]
 8003032:	b2ca      	uxtb	r2, r1
 8003034:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	dbf0      	blt.n	8003026 <_read+0x12>
	}

return len;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e009      	b.n	8003074 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	60ba      	str	r2, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fdab 	bl	8002bc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	dbf1      	blt.n	8003060 <_write+0x12>
		 //ITM_SendChar(*ptr++); //more direct way
	}
	return len;
 800307c:	687b      	ldr	r3, [r7, #4]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_close>:

int _close(int file)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
	return -1;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ac:	605a      	str	r2, [r3, #4]
	return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <_isatty>:

int _isatty(int file)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	return 1;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
	return 0;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
	...

080030e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_sbrk+0x50>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <_sbrk+0x16>
		heap_end = &end;
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <_sbrk+0x50>)
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <_sbrk+0x54>)
 80030fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <_sbrk+0x50>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <_sbrk+0x50>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	466a      	mov	r2, sp
 800310e:	4293      	cmp	r3, r2
 8003110:	d907      	bls.n	8003122 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003112:	f000 f86f 	bl	80031f4 <__errno>
 8003116:	4602      	mov	r2, r0
 8003118:	230c      	movs	r3, #12
 800311a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800311c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003120:	e006      	b.n	8003130 <_sbrk+0x48>
	}

	heap_end += incr;
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <_sbrk+0x50>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	4a03      	ldr	r2, [pc, #12]	; (8003138 <_sbrk+0x50>)
 800312c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200000c0 	.word	0x200000c0
 800313c:	20001178 	.word	0x20001178

08003140 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <SystemInit+0x5c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <SystemInit+0x5c>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <SystemInit+0x5c>)
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4911      	ldr	r1, [pc, #68]	; (800319c <SystemInit+0x5c>)
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <SystemInit+0x60>)
 8003158:	4013      	ands	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <SystemInit+0x5c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <SystemInit+0x5c>)
 8003162:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <SystemInit+0x5c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	; (800319c <SystemInit+0x5c>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <SystemInit+0x5c>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <SystemInit+0x5c>)
 800317e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003182:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SystemInit+0x5c>)
 8003186:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800318a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <SystemInit+0x64>)
 800318e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003192:	609a      	str	r2, [r3, #8]
#endif 
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40021000 	.word	0x40021000
 80031a0:	f8ff0000 	.word	0xf8ff0000
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031aa:	e003      	b.n	80031b4 <LoopCopyDataInit>

080031ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031b2:	3104      	adds	r1, #4

080031b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031b4:	480a      	ldr	r0, [pc, #40]	; (80031e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031bc:	d3f6      	bcc.n	80031ac <CopyDataInit>
  ldr r2, =_sbss
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031c0:	e002      	b.n	80031c8 <LoopFillZerobss>

080031c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031c4:	f842 3b04 	str.w	r3, [r2], #4

080031c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031cc:	d3f9      	bcc.n	80031c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031ce:	f7ff ffb7 	bl	8003140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f000 f815 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031d6:	f7ff fa5b 	bl	8002690 <main>
  bx lr
 80031da:	4770      	bx	lr
  ldr r3, =_sidata
 80031dc:	08004118 	.word	0x08004118
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031e4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80031e8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80031ec:	20001178 	.word	0x20001178

080031f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC1_2_IRQHandler>
	...

080031f4 <__errno>:
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <__errno+0x8>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	2000000c 	.word	0x2000000c

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	2500      	movs	r5, #0
 8003204:	4e0c      	ldr	r6, [pc, #48]	; (8003238 <__libc_init_array+0x38>)
 8003206:	4c0d      	ldr	r4, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003208:	1ba4      	subs	r4, r4, r6
 800320a:	10a4      	asrs	r4, r4, #2
 800320c:	42a5      	cmp	r5, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	f000 ff10 	bl	8004034 <_init>
 8003214:	2500      	movs	r5, #0
 8003216:	4e0a      	ldr	r6, [pc, #40]	; (8003240 <__libc_init_array+0x40>)
 8003218:	4c0a      	ldr	r4, [pc, #40]	; (8003244 <__libc_init_array+0x44>)
 800321a:	1ba4      	subs	r4, r4, r6
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	42a5      	cmp	r5, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003228:	4798      	blx	r3
 800322a:	3501      	adds	r5, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003232:	4798      	blx	r3
 8003234:	3501      	adds	r5, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	08004110 	.word	0x08004110
 800323c:	08004110 	.word	0x08004110
 8003240:	08004110 	.word	0x08004110
 8003244:	08004114 	.word	0x08004114

08003248 <memset>:
 8003248:	4603      	mov	r3, r0
 800324a:	4402      	add	r2, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <iprintf>:
 8003258:	b40f      	push	{r0, r1, r2, r3}
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <iprintf+0x2c>)
 800325c:	b513      	push	{r0, r1, r4, lr}
 800325e:	681c      	ldr	r4, [r3, #0]
 8003260:	b124      	cbz	r4, 800326c <iprintf+0x14>
 8003262:	69a3      	ldr	r3, [r4, #24]
 8003264:	b913      	cbnz	r3, 800326c <iprintf+0x14>
 8003266:	4620      	mov	r0, r4
 8003268:	f000 f84e 	bl	8003308 <__sinit>
 800326c:	ab05      	add	r3, sp, #20
 800326e:	9a04      	ldr	r2, [sp, #16]
 8003270:	68a1      	ldr	r1, [r4, #8]
 8003272:	4620      	mov	r0, r4
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	f000 f953 	bl	8003520 <_vfiprintf_r>
 800327a:	b002      	add	sp, #8
 800327c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003280:	b004      	add	sp, #16
 8003282:	4770      	bx	lr
 8003284:	2000000c 	.word	0x2000000c

08003288 <std>:
 8003288:	2300      	movs	r3, #0
 800328a:	b510      	push	{r4, lr}
 800328c:	4604      	mov	r4, r0
 800328e:	e9c0 3300 	strd	r3, r3, [r0]
 8003292:	6083      	str	r3, [r0, #8]
 8003294:	8181      	strh	r1, [r0, #12]
 8003296:	6643      	str	r3, [r0, #100]	; 0x64
 8003298:	81c2      	strh	r2, [r0, #14]
 800329a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800329e:	6183      	str	r3, [r0, #24]
 80032a0:	4619      	mov	r1, r3
 80032a2:	2208      	movs	r2, #8
 80032a4:	305c      	adds	r0, #92	; 0x5c
 80032a6:	f7ff ffcf 	bl	8003248 <memset>
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <std+0x38>)
 80032ac:	6224      	str	r4, [r4, #32]
 80032ae:	6263      	str	r3, [r4, #36]	; 0x24
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <std+0x3c>)
 80032b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <std+0x40>)
 80032b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <std+0x44>)
 80032ba:	6323      	str	r3, [r4, #48]	; 0x30
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	bf00      	nop
 80032c0:	08003a7d 	.word	0x08003a7d
 80032c4:	08003a9f 	.word	0x08003a9f
 80032c8:	08003ad7 	.word	0x08003ad7
 80032cc:	08003afb 	.word	0x08003afb

080032d0 <_cleanup_r>:
 80032d0:	4901      	ldr	r1, [pc, #4]	; (80032d8 <_cleanup_r+0x8>)
 80032d2:	f000 b885 	b.w	80033e0 <_fwalk_reent>
 80032d6:	bf00      	nop
 80032d8:	08003dd5 	.word	0x08003dd5

080032dc <__sfmoreglue>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	2568      	movs	r5, #104	; 0x68
 80032e0:	1e4a      	subs	r2, r1, #1
 80032e2:	4355      	muls	r5, r2
 80032e4:	460e      	mov	r6, r1
 80032e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ea:	f000 f897 	bl	800341c <_malloc_r>
 80032ee:	4604      	mov	r4, r0
 80032f0:	b140      	cbz	r0, 8003304 <__sfmoreglue+0x28>
 80032f2:	2100      	movs	r1, #0
 80032f4:	e9c0 1600 	strd	r1, r6, [r0]
 80032f8:	300c      	adds	r0, #12
 80032fa:	60a0      	str	r0, [r4, #8]
 80032fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003300:	f7ff ffa2 	bl	8003248 <memset>
 8003304:	4620      	mov	r0, r4
 8003306:	bd70      	pop	{r4, r5, r6, pc}

08003308 <__sinit>:
 8003308:	6983      	ldr	r3, [r0, #24]
 800330a:	b510      	push	{r4, lr}
 800330c:	4604      	mov	r4, r0
 800330e:	bb33      	cbnz	r3, 800335e <__sinit+0x56>
 8003310:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003314:	6503      	str	r3, [r0, #80]	; 0x50
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <__sinit+0x58>)
 8003318:	4a12      	ldr	r2, [pc, #72]	; (8003364 <__sinit+0x5c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6282      	str	r2, [r0, #40]	; 0x28
 800331e:	4298      	cmp	r0, r3
 8003320:	bf04      	itt	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	6183      	streq	r3, [r0, #24]
 8003326:	f000 f81f 	bl	8003368 <__sfp>
 800332a:	6060      	str	r0, [r4, #4]
 800332c:	4620      	mov	r0, r4
 800332e:	f000 f81b 	bl	8003368 <__sfp>
 8003332:	60a0      	str	r0, [r4, #8]
 8003334:	4620      	mov	r0, r4
 8003336:	f000 f817 	bl	8003368 <__sfp>
 800333a:	2200      	movs	r2, #0
 800333c:	60e0      	str	r0, [r4, #12]
 800333e:	2104      	movs	r1, #4
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	f7ff ffa1 	bl	8003288 <std>
 8003346:	2201      	movs	r2, #1
 8003348:	2109      	movs	r1, #9
 800334a:	68a0      	ldr	r0, [r4, #8]
 800334c:	f7ff ff9c 	bl	8003288 <std>
 8003350:	2202      	movs	r2, #2
 8003352:	2112      	movs	r1, #18
 8003354:	68e0      	ldr	r0, [r4, #12]
 8003356:	f7ff ff97 	bl	8003288 <std>
 800335a:	2301      	movs	r3, #1
 800335c:	61a3      	str	r3, [r4, #24]
 800335e:	bd10      	pop	{r4, pc}
 8003360:	08004078 	.word	0x08004078
 8003364:	080032d1 	.word	0x080032d1

08003368 <__sfp>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <__sfp+0x70>)
 800336c:	4607      	mov	r7, r0
 800336e:	681e      	ldr	r6, [r3, #0]
 8003370:	69b3      	ldr	r3, [r6, #24]
 8003372:	b913      	cbnz	r3, 800337a <__sfp+0x12>
 8003374:	4630      	mov	r0, r6
 8003376:	f7ff ffc7 	bl	8003308 <__sinit>
 800337a:	3648      	adds	r6, #72	; 0x48
 800337c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003380:	3b01      	subs	r3, #1
 8003382:	d503      	bpl.n	800338c <__sfp+0x24>
 8003384:	6833      	ldr	r3, [r6, #0]
 8003386:	b133      	cbz	r3, 8003396 <__sfp+0x2e>
 8003388:	6836      	ldr	r6, [r6, #0]
 800338a:	e7f7      	b.n	800337c <__sfp+0x14>
 800338c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003390:	b16d      	cbz	r5, 80033ae <__sfp+0x46>
 8003392:	3468      	adds	r4, #104	; 0x68
 8003394:	e7f4      	b.n	8003380 <__sfp+0x18>
 8003396:	2104      	movs	r1, #4
 8003398:	4638      	mov	r0, r7
 800339a:	f7ff ff9f 	bl	80032dc <__sfmoreglue>
 800339e:	6030      	str	r0, [r6, #0]
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1f1      	bne.n	8003388 <__sfp+0x20>
 80033a4:	230c      	movs	r3, #12
 80033a6:	4604      	mov	r4, r0
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4620      	mov	r0, r4
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <__sfp+0x74>)
 80033b0:	6665      	str	r5, [r4, #100]	; 0x64
 80033b2:	e9c4 5500 	strd	r5, r5, [r4]
 80033b6:	60a5      	str	r5, [r4, #8]
 80033b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80033bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80033c0:	2208      	movs	r2, #8
 80033c2:	4629      	mov	r1, r5
 80033c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033c8:	f7ff ff3e 	bl	8003248 <memset>
 80033cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033d4:	e7e9      	b.n	80033aa <__sfp+0x42>
 80033d6:	bf00      	nop
 80033d8:	08004078 	.word	0x08004078
 80033dc:	ffff0001 	.word	0xffff0001

080033e0 <_fwalk_reent>:
 80033e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e4:	4680      	mov	r8, r0
 80033e6:	4689      	mov	r9, r1
 80033e8:	2600      	movs	r6, #0
 80033ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033ee:	b914      	cbnz	r4, 80033f6 <_fwalk_reent+0x16>
 80033f0:	4630      	mov	r0, r6
 80033f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033fa:	3f01      	subs	r7, #1
 80033fc:	d501      	bpl.n	8003402 <_fwalk_reent+0x22>
 80033fe:	6824      	ldr	r4, [r4, #0]
 8003400:	e7f5      	b.n	80033ee <_fwalk_reent+0xe>
 8003402:	89ab      	ldrh	r3, [r5, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d907      	bls.n	8003418 <_fwalk_reent+0x38>
 8003408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800340c:	3301      	adds	r3, #1
 800340e:	d003      	beq.n	8003418 <_fwalk_reent+0x38>
 8003410:	4629      	mov	r1, r5
 8003412:	4640      	mov	r0, r8
 8003414:	47c8      	blx	r9
 8003416:	4306      	orrs	r6, r0
 8003418:	3568      	adds	r5, #104	; 0x68
 800341a:	e7ee      	b.n	80033fa <_fwalk_reent+0x1a>

0800341c <_malloc_r>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	1ccd      	adds	r5, r1, #3
 8003420:	f025 0503 	bic.w	r5, r5, #3
 8003424:	3508      	adds	r5, #8
 8003426:	2d0c      	cmp	r5, #12
 8003428:	bf38      	it	cc
 800342a:	250c      	movcc	r5, #12
 800342c:	2d00      	cmp	r5, #0
 800342e:	4606      	mov	r6, r0
 8003430:	db01      	blt.n	8003436 <_malloc_r+0x1a>
 8003432:	42a9      	cmp	r1, r5
 8003434:	d903      	bls.n	800343e <_malloc_r+0x22>
 8003436:	230c      	movs	r3, #12
 8003438:	6033      	str	r3, [r6, #0]
 800343a:	2000      	movs	r0, #0
 800343c:	bd70      	pop	{r4, r5, r6, pc}
 800343e:	f000 fd77 	bl	8003f30 <__malloc_lock>
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <_malloc_r+0xac>)
 8003444:	6814      	ldr	r4, [r2, #0]
 8003446:	4621      	mov	r1, r4
 8003448:	b991      	cbnz	r1, 8003470 <_malloc_r+0x54>
 800344a:	4c20      	ldr	r4, [pc, #128]	; (80034cc <_malloc_r+0xb0>)
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	b91b      	cbnz	r3, 8003458 <_malloc_r+0x3c>
 8003450:	4630      	mov	r0, r6
 8003452:	f000 fb03 	bl	8003a5c <_sbrk_r>
 8003456:	6020      	str	r0, [r4, #0]
 8003458:	4629      	mov	r1, r5
 800345a:	4630      	mov	r0, r6
 800345c:	f000 fafe 	bl	8003a5c <_sbrk_r>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d124      	bne.n	80034ae <_malloc_r+0x92>
 8003464:	230c      	movs	r3, #12
 8003466:	4630      	mov	r0, r6
 8003468:	6033      	str	r3, [r6, #0]
 800346a:	f000 fd62 	bl	8003f32 <__malloc_unlock>
 800346e:	e7e4      	b.n	800343a <_malloc_r+0x1e>
 8003470:	680b      	ldr	r3, [r1, #0]
 8003472:	1b5b      	subs	r3, r3, r5
 8003474:	d418      	bmi.n	80034a8 <_malloc_r+0x8c>
 8003476:	2b0b      	cmp	r3, #11
 8003478:	d90f      	bls.n	800349a <_malloc_r+0x7e>
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	18cc      	adds	r4, r1, r3
 800347e:	50cd      	str	r5, [r1, r3]
 8003480:	4630      	mov	r0, r6
 8003482:	f000 fd56 	bl	8003f32 <__malloc_unlock>
 8003486:	f104 000b 	add.w	r0, r4, #11
 800348a:	1d23      	adds	r3, r4, #4
 800348c:	f020 0007 	bic.w	r0, r0, #7
 8003490:	1ac3      	subs	r3, r0, r3
 8003492:	d0d3      	beq.n	800343c <_malloc_r+0x20>
 8003494:	425a      	negs	r2, r3
 8003496:	50e2      	str	r2, [r4, r3]
 8003498:	e7d0      	b.n	800343c <_malloc_r+0x20>
 800349a:	684b      	ldr	r3, [r1, #4]
 800349c:	428c      	cmp	r4, r1
 800349e:	bf16      	itet	ne
 80034a0:	6063      	strne	r3, [r4, #4]
 80034a2:	6013      	streq	r3, [r2, #0]
 80034a4:	460c      	movne	r4, r1
 80034a6:	e7eb      	b.n	8003480 <_malloc_r+0x64>
 80034a8:	460c      	mov	r4, r1
 80034aa:	6849      	ldr	r1, [r1, #4]
 80034ac:	e7cc      	b.n	8003448 <_malloc_r+0x2c>
 80034ae:	1cc4      	adds	r4, r0, #3
 80034b0:	f024 0403 	bic.w	r4, r4, #3
 80034b4:	42a0      	cmp	r0, r4
 80034b6:	d005      	beq.n	80034c4 <_malloc_r+0xa8>
 80034b8:	1a21      	subs	r1, r4, r0
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 face 	bl	8003a5c <_sbrk_r>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d0cf      	beq.n	8003464 <_malloc_r+0x48>
 80034c4:	6025      	str	r5, [r4, #0]
 80034c6:	e7db      	b.n	8003480 <_malloc_r+0x64>
 80034c8:	200000c4 	.word	0x200000c4
 80034cc:	200000c8 	.word	0x200000c8

080034d0 <__sfputc_r>:
 80034d0:	6893      	ldr	r3, [r2, #8]
 80034d2:	b410      	push	{r4}
 80034d4:	3b01      	subs	r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	6093      	str	r3, [r2, #8]
 80034da:	da07      	bge.n	80034ec <__sfputc_r+0x1c>
 80034dc:	6994      	ldr	r4, [r2, #24]
 80034de:	42a3      	cmp	r3, r4
 80034e0:	db01      	blt.n	80034e6 <__sfputc_r+0x16>
 80034e2:	290a      	cmp	r1, #10
 80034e4:	d102      	bne.n	80034ec <__sfputc_r+0x1c>
 80034e6:	bc10      	pop	{r4}
 80034e8:	f000 bb0c 	b.w	8003b04 <__swbuf_r>
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	1c58      	adds	r0, r3, #1
 80034f0:	6010      	str	r0, [r2, #0]
 80034f2:	7019      	strb	r1, [r3, #0]
 80034f4:	4608      	mov	r0, r1
 80034f6:	bc10      	pop	{r4}
 80034f8:	4770      	bx	lr

080034fa <__sfputs_r>:
 80034fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fc:	4606      	mov	r6, r0
 80034fe:	460f      	mov	r7, r1
 8003500:	4614      	mov	r4, r2
 8003502:	18d5      	adds	r5, r2, r3
 8003504:	42ac      	cmp	r4, r5
 8003506:	d101      	bne.n	800350c <__sfputs_r+0x12>
 8003508:	2000      	movs	r0, #0
 800350a:	e007      	b.n	800351c <__sfputs_r+0x22>
 800350c:	463a      	mov	r2, r7
 800350e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003512:	4630      	mov	r0, r6
 8003514:	f7ff ffdc 	bl	80034d0 <__sfputc_r>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d1f3      	bne.n	8003504 <__sfputs_r+0xa>
 800351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003520 <_vfiprintf_r>:
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	460c      	mov	r4, r1
 8003526:	b09d      	sub	sp, #116	; 0x74
 8003528:	4617      	mov	r7, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4606      	mov	r6, r0
 800352e:	b118      	cbz	r0, 8003538 <_vfiprintf_r+0x18>
 8003530:	6983      	ldr	r3, [r0, #24]
 8003532:	b90b      	cbnz	r3, 8003538 <_vfiprintf_r+0x18>
 8003534:	f7ff fee8 	bl	8003308 <__sinit>
 8003538:	4b7c      	ldr	r3, [pc, #496]	; (800372c <_vfiprintf_r+0x20c>)
 800353a:	429c      	cmp	r4, r3
 800353c:	d158      	bne.n	80035f0 <_vfiprintf_r+0xd0>
 800353e:	6874      	ldr	r4, [r6, #4]
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	0718      	lsls	r0, r3, #28
 8003544:	d55e      	bpl.n	8003604 <_vfiprintf_r+0xe4>
 8003546:	6923      	ldr	r3, [r4, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05b      	beq.n	8003604 <_vfiprintf_r+0xe4>
 800354c:	2300      	movs	r3, #0
 800354e:	9309      	str	r3, [sp, #36]	; 0x24
 8003550:	2320      	movs	r3, #32
 8003552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003556:	2330      	movs	r3, #48	; 0x30
 8003558:	f04f 0b01 	mov.w	fp, #1
 800355c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003560:	9503      	str	r5, [sp, #12]
 8003562:	46b8      	mov	r8, r7
 8003564:	4645      	mov	r5, r8
 8003566:	f815 3b01 	ldrb.w	r3, [r5], #1
 800356a:	b10b      	cbz	r3, 8003570 <_vfiprintf_r+0x50>
 800356c:	2b25      	cmp	r3, #37	; 0x25
 800356e:	d154      	bne.n	800361a <_vfiprintf_r+0xfa>
 8003570:	ebb8 0a07 	subs.w	sl, r8, r7
 8003574:	d00b      	beq.n	800358e <_vfiprintf_r+0x6e>
 8003576:	4653      	mov	r3, sl
 8003578:	463a      	mov	r2, r7
 800357a:	4621      	mov	r1, r4
 800357c:	4630      	mov	r0, r6
 800357e:	f7ff ffbc 	bl	80034fa <__sfputs_r>
 8003582:	3001      	adds	r0, #1
 8003584:	f000 80c2 	beq.w	800370c <_vfiprintf_r+0x1ec>
 8003588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800358a:	4453      	add	r3, sl
 800358c:	9309      	str	r3, [sp, #36]	; 0x24
 800358e:	f898 3000 	ldrb.w	r3, [r8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80ba 	beq.w	800370c <_vfiprintf_r+0x1ec>
 8003598:	2300      	movs	r3, #0
 800359a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800359e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035a2:	9304      	str	r3, [sp, #16]
 80035a4:	9307      	str	r3, [sp, #28]
 80035a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035aa:	931a      	str	r3, [sp, #104]	; 0x68
 80035ac:	46a8      	mov	r8, r5
 80035ae:	2205      	movs	r2, #5
 80035b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80035b4:	485e      	ldr	r0, [pc, #376]	; (8003730 <_vfiprintf_r+0x210>)
 80035b6:	f000 fcad 	bl	8003f14 <memchr>
 80035ba:	9b04      	ldr	r3, [sp, #16]
 80035bc:	bb78      	cbnz	r0, 800361e <_vfiprintf_r+0xfe>
 80035be:	06d9      	lsls	r1, r3, #27
 80035c0:	bf44      	itt	mi
 80035c2:	2220      	movmi	r2, #32
 80035c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035c8:	071a      	lsls	r2, r3, #28
 80035ca:	bf44      	itt	mi
 80035cc:	222b      	movmi	r2, #43	; 0x2b
 80035ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035d2:	782a      	ldrb	r2, [r5, #0]
 80035d4:	2a2a      	cmp	r2, #42	; 0x2a
 80035d6:	d02a      	beq.n	800362e <_vfiprintf_r+0x10e>
 80035d8:	46a8      	mov	r8, r5
 80035da:	2000      	movs	r0, #0
 80035dc:	250a      	movs	r5, #10
 80035de:	9a07      	ldr	r2, [sp, #28]
 80035e0:	4641      	mov	r1, r8
 80035e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e6:	3b30      	subs	r3, #48	; 0x30
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d969      	bls.n	80036c0 <_vfiprintf_r+0x1a0>
 80035ec:	b360      	cbz	r0, 8003648 <_vfiprintf_r+0x128>
 80035ee:	e024      	b.n	800363a <_vfiprintf_r+0x11a>
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <_vfiprintf_r+0x214>)
 80035f2:	429c      	cmp	r4, r3
 80035f4:	d101      	bne.n	80035fa <_vfiprintf_r+0xda>
 80035f6:	68b4      	ldr	r4, [r6, #8]
 80035f8:	e7a2      	b.n	8003540 <_vfiprintf_r+0x20>
 80035fa:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <_vfiprintf_r+0x218>)
 80035fc:	429c      	cmp	r4, r3
 80035fe:	bf08      	it	eq
 8003600:	68f4      	ldreq	r4, [r6, #12]
 8003602:	e79d      	b.n	8003540 <_vfiprintf_r+0x20>
 8003604:	4621      	mov	r1, r4
 8003606:	4630      	mov	r0, r6
 8003608:	f000 fae0 	bl	8003bcc <__swsetup_r>
 800360c:	2800      	cmp	r0, #0
 800360e:	d09d      	beq.n	800354c <_vfiprintf_r+0x2c>
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003614:	b01d      	add	sp, #116	; 0x74
 8003616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800361a:	46a8      	mov	r8, r5
 800361c:	e7a2      	b.n	8003564 <_vfiprintf_r+0x44>
 800361e:	4a44      	ldr	r2, [pc, #272]	; (8003730 <_vfiprintf_r+0x210>)
 8003620:	4645      	mov	r5, r8
 8003622:	1a80      	subs	r0, r0, r2
 8003624:	fa0b f000 	lsl.w	r0, fp, r0
 8003628:	4318      	orrs	r0, r3
 800362a:	9004      	str	r0, [sp, #16]
 800362c:	e7be      	b.n	80035ac <_vfiprintf_r+0x8c>
 800362e:	9a03      	ldr	r2, [sp, #12]
 8003630:	1d11      	adds	r1, r2, #4
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	9103      	str	r1, [sp, #12]
 8003636:	2a00      	cmp	r2, #0
 8003638:	db01      	blt.n	800363e <_vfiprintf_r+0x11e>
 800363a:	9207      	str	r2, [sp, #28]
 800363c:	e004      	b.n	8003648 <_vfiprintf_r+0x128>
 800363e:	4252      	negs	r2, r2
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	9207      	str	r2, [sp, #28]
 8003646:	9304      	str	r3, [sp, #16]
 8003648:	f898 3000 	ldrb.w	r3, [r8]
 800364c:	2b2e      	cmp	r3, #46	; 0x2e
 800364e:	d10e      	bne.n	800366e <_vfiprintf_r+0x14e>
 8003650:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003654:	2b2a      	cmp	r3, #42	; 0x2a
 8003656:	d138      	bne.n	80036ca <_vfiprintf_r+0x1aa>
 8003658:	9b03      	ldr	r3, [sp, #12]
 800365a:	f108 0802 	add.w	r8, r8, #2
 800365e:	1d1a      	adds	r2, r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	9203      	str	r2, [sp, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	bfb8      	it	lt
 8003668:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800366c:	9305      	str	r3, [sp, #20]
 800366e:	4d33      	ldr	r5, [pc, #204]	; (800373c <_vfiprintf_r+0x21c>)
 8003670:	2203      	movs	r2, #3
 8003672:	f898 1000 	ldrb.w	r1, [r8]
 8003676:	4628      	mov	r0, r5
 8003678:	f000 fc4c 	bl	8003f14 <memchr>
 800367c:	b140      	cbz	r0, 8003690 <_vfiprintf_r+0x170>
 800367e:	2340      	movs	r3, #64	; 0x40
 8003680:	1b40      	subs	r0, r0, r5
 8003682:	fa03 f000 	lsl.w	r0, r3, r0
 8003686:	9b04      	ldr	r3, [sp, #16]
 8003688:	f108 0801 	add.w	r8, r8, #1
 800368c:	4303      	orrs	r3, r0
 800368e:	9304      	str	r3, [sp, #16]
 8003690:	f898 1000 	ldrb.w	r1, [r8]
 8003694:	2206      	movs	r2, #6
 8003696:	482a      	ldr	r0, [pc, #168]	; (8003740 <_vfiprintf_r+0x220>)
 8003698:	f108 0701 	add.w	r7, r8, #1
 800369c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036a0:	f000 fc38 	bl	8003f14 <memchr>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d037      	beq.n	8003718 <_vfiprintf_r+0x1f8>
 80036a8:	4b26      	ldr	r3, [pc, #152]	; (8003744 <_vfiprintf_r+0x224>)
 80036aa:	bb1b      	cbnz	r3, 80036f4 <_vfiprintf_r+0x1d4>
 80036ac:	9b03      	ldr	r3, [sp, #12]
 80036ae:	3307      	adds	r3, #7
 80036b0:	f023 0307 	bic.w	r3, r3, #7
 80036b4:	3308      	adds	r3, #8
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ba:	444b      	add	r3, r9
 80036bc:	9309      	str	r3, [sp, #36]	; 0x24
 80036be:	e750      	b.n	8003562 <_vfiprintf_r+0x42>
 80036c0:	fb05 3202 	mla	r2, r5, r2, r3
 80036c4:	2001      	movs	r0, #1
 80036c6:	4688      	mov	r8, r1
 80036c8:	e78a      	b.n	80035e0 <_vfiprintf_r+0xc0>
 80036ca:	2300      	movs	r3, #0
 80036cc:	250a      	movs	r5, #10
 80036ce:	4619      	mov	r1, r3
 80036d0:	f108 0801 	add.w	r8, r8, #1
 80036d4:	9305      	str	r3, [sp, #20]
 80036d6:	4640      	mov	r0, r8
 80036d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036dc:	3a30      	subs	r2, #48	; 0x30
 80036de:	2a09      	cmp	r2, #9
 80036e0:	d903      	bls.n	80036ea <_vfiprintf_r+0x1ca>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0c3      	beq.n	800366e <_vfiprintf_r+0x14e>
 80036e6:	9105      	str	r1, [sp, #20]
 80036e8:	e7c1      	b.n	800366e <_vfiprintf_r+0x14e>
 80036ea:	fb05 2101 	mla	r1, r5, r1, r2
 80036ee:	2301      	movs	r3, #1
 80036f0:	4680      	mov	r8, r0
 80036f2:	e7f0      	b.n	80036d6 <_vfiprintf_r+0x1b6>
 80036f4:	ab03      	add	r3, sp, #12
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4622      	mov	r2, r4
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <_vfiprintf_r+0x228>)
 80036fc:	a904      	add	r1, sp, #16
 80036fe:	4630      	mov	r0, r6
 8003700:	f3af 8000 	nop.w
 8003704:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003708:	4681      	mov	r9, r0
 800370a:	d1d5      	bne.n	80036b8 <_vfiprintf_r+0x198>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	065b      	lsls	r3, r3, #25
 8003710:	f53f af7e 	bmi.w	8003610 <_vfiprintf_r+0xf0>
 8003714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003716:	e77d      	b.n	8003614 <_vfiprintf_r+0xf4>
 8003718:	ab03      	add	r3, sp, #12
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	4622      	mov	r2, r4
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <_vfiprintf_r+0x228>)
 8003720:	a904      	add	r1, sp, #16
 8003722:	4630      	mov	r0, r6
 8003724:	f000 f888 	bl	8003838 <_printf_i>
 8003728:	e7ec      	b.n	8003704 <_vfiprintf_r+0x1e4>
 800372a:	bf00      	nop
 800372c:	0800409c 	.word	0x0800409c
 8003730:	080040dc 	.word	0x080040dc
 8003734:	080040bc 	.word	0x080040bc
 8003738:	0800407c 	.word	0x0800407c
 800373c:	080040e2 	.word	0x080040e2
 8003740:	080040e6 	.word	0x080040e6
 8003744:	00000000 	.word	0x00000000
 8003748:	080034fb 	.word	0x080034fb

0800374c <_printf_common>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	4691      	mov	r9, r2
 8003752:	461f      	mov	r7, r3
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	4606      	mov	r6, r0
 800375a:	4293      	cmp	r3, r2
 800375c:	bfb8      	it	lt
 800375e:	4613      	movlt	r3, r2
 8003760:	f8c9 3000 	str.w	r3, [r9]
 8003764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003768:	460c      	mov	r4, r1
 800376a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800376e:	b112      	cbz	r2, 8003776 <_printf_common+0x2a>
 8003770:	3301      	adds	r3, #1
 8003772:	f8c9 3000 	str.w	r3, [r9]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	0699      	lsls	r1, r3, #26
 800377a:	bf42      	ittt	mi
 800377c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003780:	3302      	addmi	r3, #2
 8003782:	f8c9 3000 	strmi.w	r3, [r9]
 8003786:	6825      	ldr	r5, [r4, #0]
 8003788:	f015 0506 	ands.w	r5, r5, #6
 800378c:	d107      	bne.n	800379e <_printf_common+0x52>
 800378e:	f104 0a19 	add.w	sl, r4, #25
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	f8d9 2000 	ldr.w	r2, [r9]
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	42ab      	cmp	r3, r5
 800379c:	dc29      	bgt.n	80037f2 <_printf_common+0xa6>
 800379e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	3300      	adds	r3, #0
 80037a6:	bf18      	it	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	0692      	lsls	r2, r2, #26
 80037ac:	d42e      	bmi.n	800380c <_printf_common+0xc0>
 80037ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037b2:	4639      	mov	r1, r7
 80037b4:	4630      	mov	r0, r6
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d021      	beq.n	8003800 <_printf_common+0xb4>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	68e5      	ldr	r5, [r4, #12]
 80037c0:	f003 0306 	and.w	r3, r3, #6
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	bf18      	it	ne
 80037c8:	2500      	movne	r5, #0
 80037ca:	f8d9 2000 	ldr.w	r2, [r9]
 80037ce:	f04f 0900 	mov.w	r9, #0
 80037d2:	bf08      	it	eq
 80037d4:	1aad      	subeq	r5, r5, r2
 80037d6:	68a3      	ldr	r3, [r4, #8]
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	bf08      	it	eq
 80037dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bfc4      	itt	gt
 80037e4:	1a9b      	subgt	r3, r3, r2
 80037e6:	18ed      	addgt	r5, r5, r3
 80037e8:	341a      	adds	r4, #26
 80037ea:	454d      	cmp	r5, r9
 80037ec:	d11a      	bne.n	8003824 <_printf_common+0xd8>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e008      	b.n	8003804 <_printf_common+0xb8>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4652      	mov	r2, sl
 80037f6:	4639      	mov	r1, r7
 80037f8:	4630      	mov	r0, r6
 80037fa:	47c0      	blx	r8
 80037fc:	3001      	adds	r0, #1
 80037fe:	d103      	bne.n	8003808 <_printf_common+0xbc>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003808:	3501      	adds	r5, #1
 800380a:	e7c2      	b.n	8003792 <_printf_common+0x46>
 800380c:	2030      	movs	r0, #48	; 0x30
 800380e:	18e1      	adds	r1, r4, r3
 8003810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800381a:	4422      	add	r2, r4
 800381c:	3302      	adds	r3, #2
 800381e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003822:	e7c4      	b.n	80037ae <_printf_common+0x62>
 8003824:	2301      	movs	r3, #1
 8003826:	4622      	mov	r2, r4
 8003828:	4639      	mov	r1, r7
 800382a:	4630      	mov	r0, r6
 800382c:	47c0      	blx	r8
 800382e:	3001      	adds	r0, #1
 8003830:	d0e6      	beq.n	8003800 <_printf_common+0xb4>
 8003832:	f109 0901 	add.w	r9, r9, #1
 8003836:	e7d8      	b.n	80037ea <_printf_common+0x9e>

08003838 <_printf_i>:
 8003838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800383c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003840:	460c      	mov	r4, r1
 8003842:	7e09      	ldrb	r1, [r1, #24]
 8003844:	b085      	sub	sp, #20
 8003846:	296e      	cmp	r1, #110	; 0x6e
 8003848:	4617      	mov	r7, r2
 800384a:	4606      	mov	r6, r0
 800384c:	4698      	mov	r8, r3
 800384e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003850:	f000 80b3 	beq.w	80039ba <_printf_i+0x182>
 8003854:	d822      	bhi.n	800389c <_printf_i+0x64>
 8003856:	2963      	cmp	r1, #99	; 0x63
 8003858:	d036      	beq.n	80038c8 <_printf_i+0x90>
 800385a:	d80a      	bhi.n	8003872 <_printf_i+0x3a>
 800385c:	2900      	cmp	r1, #0
 800385e:	f000 80b9 	beq.w	80039d4 <_printf_i+0x19c>
 8003862:	2958      	cmp	r1, #88	; 0x58
 8003864:	f000 8083 	beq.w	800396e <_printf_i+0x136>
 8003868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800386c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003870:	e032      	b.n	80038d8 <_printf_i+0xa0>
 8003872:	2964      	cmp	r1, #100	; 0x64
 8003874:	d001      	beq.n	800387a <_printf_i+0x42>
 8003876:	2969      	cmp	r1, #105	; 0x69
 8003878:	d1f6      	bne.n	8003868 <_printf_i+0x30>
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	0605      	lsls	r5, r0, #24
 8003880:	f103 0104 	add.w	r1, r3, #4
 8003884:	d52a      	bpl.n	80038dc <_printf_i+0xa4>
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6011      	str	r1, [r2, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da03      	bge.n	8003896 <_printf_i+0x5e>
 800388e:	222d      	movs	r2, #45	; 0x2d
 8003890:	425b      	negs	r3, r3
 8003892:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003896:	486f      	ldr	r0, [pc, #444]	; (8003a54 <_printf_i+0x21c>)
 8003898:	220a      	movs	r2, #10
 800389a:	e039      	b.n	8003910 <_printf_i+0xd8>
 800389c:	2973      	cmp	r1, #115	; 0x73
 800389e:	f000 809d 	beq.w	80039dc <_printf_i+0x1a4>
 80038a2:	d808      	bhi.n	80038b6 <_printf_i+0x7e>
 80038a4:	296f      	cmp	r1, #111	; 0x6f
 80038a6:	d020      	beq.n	80038ea <_printf_i+0xb2>
 80038a8:	2970      	cmp	r1, #112	; 0x70
 80038aa:	d1dd      	bne.n	8003868 <_printf_i+0x30>
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f043 0320 	orr.w	r3, r3, #32
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	e003      	b.n	80038be <_printf_i+0x86>
 80038b6:	2975      	cmp	r1, #117	; 0x75
 80038b8:	d017      	beq.n	80038ea <_printf_i+0xb2>
 80038ba:	2978      	cmp	r1, #120	; 0x78
 80038bc:	d1d4      	bne.n	8003868 <_printf_i+0x30>
 80038be:	2378      	movs	r3, #120	; 0x78
 80038c0:	4865      	ldr	r0, [pc, #404]	; (8003a58 <_printf_i+0x220>)
 80038c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038c6:	e055      	b.n	8003974 <_printf_i+0x13c>
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ce:	1d19      	adds	r1, r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6011      	str	r1, [r2, #0]
 80038d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d8:	2301      	movs	r3, #1
 80038da:	e08c      	b.n	80039f6 <_printf_i+0x1be>
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038e2:	6011      	str	r1, [r2, #0]
 80038e4:	bf18      	it	ne
 80038e6:	b21b      	sxthne	r3, r3
 80038e8:	e7cf      	b.n	800388a <_printf_i+0x52>
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	6825      	ldr	r5, [r4, #0]
 80038ee:	1d18      	adds	r0, r3, #4
 80038f0:	6010      	str	r0, [r2, #0]
 80038f2:	0628      	lsls	r0, r5, #24
 80038f4:	d501      	bpl.n	80038fa <_printf_i+0xc2>
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e002      	b.n	8003900 <_printf_i+0xc8>
 80038fa:	0668      	lsls	r0, r5, #25
 80038fc:	d5fb      	bpl.n	80038f6 <_printf_i+0xbe>
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	296f      	cmp	r1, #111	; 0x6f
 8003902:	bf14      	ite	ne
 8003904:	220a      	movne	r2, #10
 8003906:	2208      	moveq	r2, #8
 8003908:	4852      	ldr	r0, [pc, #328]	; (8003a54 <_printf_i+0x21c>)
 800390a:	2100      	movs	r1, #0
 800390c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003910:	6865      	ldr	r5, [r4, #4]
 8003912:	2d00      	cmp	r5, #0
 8003914:	60a5      	str	r5, [r4, #8]
 8003916:	f2c0 8095 	blt.w	8003a44 <_printf_i+0x20c>
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	f021 0104 	bic.w	r1, r1, #4
 8003920:	6021      	str	r1, [r4, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d13d      	bne.n	80039a2 <_printf_i+0x16a>
 8003926:	2d00      	cmp	r5, #0
 8003928:	f040 808e 	bne.w	8003a48 <_printf_i+0x210>
 800392c:	4665      	mov	r5, ip
 800392e:	2a08      	cmp	r2, #8
 8003930:	d10b      	bne.n	800394a <_printf_i+0x112>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	07db      	lsls	r3, r3, #31
 8003936:	d508      	bpl.n	800394a <_printf_i+0x112>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	bfde      	ittt	le
 8003940:	2330      	movle	r3, #48	; 0x30
 8003942:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003946:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800394a:	ebac 0305 	sub.w	r3, ip, r5
 800394e:	6123      	str	r3, [r4, #16]
 8003950:	f8cd 8000 	str.w	r8, [sp]
 8003954:	463b      	mov	r3, r7
 8003956:	aa03      	add	r2, sp, #12
 8003958:	4621      	mov	r1, r4
 800395a:	4630      	mov	r0, r6
 800395c:	f7ff fef6 	bl	800374c <_printf_common>
 8003960:	3001      	adds	r0, #1
 8003962:	d14d      	bne.n	8003a00 <_printf_i+0x1c8>
 8003964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003968:	b005      	add	sp, #20
 800396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800396e:	4839      	ldr	r0, [pc, #228]	; (8003a54 <_printf_i+0x21c>)
 8003970:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	6821      	ldr	r1, [r4, #0]
 8003978:	1d1d      	adds	r5, r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6015      	str	r5, [r2, #0]
 800397e:	060a      	lsls	r2, r1, #24
 8003980:	d50b      	bpl.n	800399a <_printf_i+0x162>
 8003982:	07ca      	lsls	r2, r1, #31
 8003984:	bf44      	itt	mi
 8003986:	f041 0120 	orrmi.w	r1, r1, #32
 800398a:	6021      	strmi	r1, [r4, #0]
 800398c:	b91b      	cbnz	r3, 8003996 <_printf_i+0x15e>
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	f022 0220 	bic.w	r2, r2, #32
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	e7b7      	b.n	800390a <_printf_i+0xd2>
 800399a:	064d      	lsls	r5, r1, #25
 800399c:	bf48      	it	mi
 800399e:	b29b      	uxthmi	r3, r3
 80039a0:	e7ef      	b.n	8003982 <_printf_i+0x14a>
 80039a2:	4665      	mov	r5, ip
 80039a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039a8:	fb02 3311 	mls	r3, r2, r1, r3
 80039ac:	5cc3      	ldrb	r3, [r0, r3]
 80039ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039b2:	460b      	mov	r3, r1
 80039b4:	2900      	cmp	r1, #0
 80039b6:	d1f5      	bne.n	80039a4 <_printf_i+0x16c>
 80039b8:	e7b9      	b.n	800392e <_printf_i+0xf6>
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	6825      	ldr	r5, [r4, #0]
 80039be:	1d18      	adds	r0, r3, #4
 80039c0:	6961      	ldr	r1, [r4, #20]
 80039c2:	6010      	str	r0, [r2, #0]
 80039c4:	0628      	lsls	r0, r5, #24
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	d501      	bpl.n	80039ce <_printf_i+0x196>
 80039ca:	6019      	str	r1, [r3, #0]
 80039cc:	e002      	b.n	80039d4 <_printf_i+0x19c>
 80039ce:	066a      	lsls	r2, r5, #25
 80039d0:	d5fb      	bpl.n	80039ca <_printf_i+0x192>
 80039d2:	8019      	strh	r1, [r3, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	4665      	mov	r5, ip
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	e7b9      	b.n	8003950 <_printf_i+0x118>
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	1d19      	adds	r1, r3, #4
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	681d      	ldr	r5, [r3, #0]
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	2100      	movs	r1, #0
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 fa93 	bl	8003f14 <memchr>
 80039ee:	b108      	cbz	r0, 80039f4 <_printf_i+0x1bc>
 80039f0:	1b40      	subs	r0, r0, r5
 80039f2:	6060      	str	r0, [r4, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fe:	e7a7      	b.n	8003950 <_printf_i+0x118>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	462a      	mov	r2, r5
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0aa      	beq.n	8003964 <_printf_i+0x12c>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	079b      	lsls	r3, r3, #30
 8003a12:	d413      	bmi.n	8003a3c <_printf_i+0x204>
 8003a14:	68e0      	ldr	r0, [r4, #12]
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	bfb8      	it	lt
 8003a1c:	4618      	movlt	r0, r3
 8003a1e:	e7a3      	b.n	8003968 <_printf_i+0x130>
 8003a20:	2301      	movs	r3, #1
 8003a22:	464a      	mov	r2, r9
 8003a24:	4639      	mov	r1, r7
 8003a26:	4630      	mov	r0, r6
 8003a28:	47c0      	blx	r8
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d09a      	beq.n	8003964 <_printf_i+0x12c>
 8003a2e:	3501      	adds	r5, #1
 8003a30:	68e3      	ldr	r3, [r4, #12]
 8003a32:	9a03      	ldr	r2, [sp, #12]
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	42ab      	cmp	r3, r5
 8003a38:	dcf2      	bgt.n	8003a20 <_printf_i+0x1e8>
 8003a3a:	e7eb      	b.n	8003a14 <_printf_i+0x1dc>
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	f104 0919 	add.w	r9, r4, #25
 8003a42:	e7f5      	b.n	8003a30 <_printf_i+0x1f8>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ac      	bne.n	80039a2 <_printf_i+0x16a>
 8003a48:	7803      	ldrb	r3, [r0, #0]
 8003a4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a52:	e76c      	b.n	800392e <_printf_i+0xf6>
 8003a54:	080040ed 	.word	0x080040ed
 8003a58:	080040fe 	.word	0x080040fe

08003a5c <_sbrk_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4c05      	ldr	r4, [pc, #20]	; (8003a78 <_sbrk_r+0x1c>)
 8003a62:	4605      	mov	r5, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	f7ff fb3e 	bl	80030e8 <_sbrk>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_sbrk_r+0x1a>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_sbrk_r+0x1a>
 8003a74:	602b      	str	r3, [r5, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	20001174 	.word	0x20001174

08003a7c <__sread>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a84:	f000 faa2 	bl	8003fcc <_read_r>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	bfab      	itete	ge
 8003a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a90:	181b      	addge	r3, r3, r0
 8003a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a96:	bfac      	ite	ge
 8003a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a9a:	81a3      	strhlt	r3, [r4, #12]
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <__swrite>:
 8003a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	898b      	ldrh	r3, [r1, #12]
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	460c      	mov	r4, r1
 8003aac:	4616      	mov	r6, r2
 8003aae:	d505      	bpl.n	8003abc <__swrite+0x1e>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab8:	f000 f9b6 	bl	8003e28 <_lseek_r>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	4632      	mov	r2, r6
 8003ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac4:	81a3      	strh	r3, [r4, #12]
 8003ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aca:	463b      	mov	r3, r7
 8003acc:	4628      	mov	r0, r5
 8003ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad2:	f000 b869 	b.w	8003ba8 <_write_r>

08003ad6 <__sseek>:
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	460c      	mov	r4, r1
 8003ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ade:	f000 f9a3 	bl	8003e28 <_lseek_r>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	bf15      	itete	ne
 8003ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003af2:	81a3      	strheq	r3, [r4, #12]
 8003af4:	bf18      	it	ne
 8003af6:	81a3      	strhne	r3, [r4, #12]
 8003af8:	bd10      	pop	{r4, pc}

08003afa <__sclose>:
 8003afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afe:	f000 b8d3 	b.w	8003ca8 <_close_r>
	...

08003b04 <__swbuf_r>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	460e      	mov	r6, r1
 8003b08:	4614      	mov	r4, r2
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	b118      	cbz	r0, 8003b16 <__swbuf_r+0x12>
 8003b0e:	6983      	ldr	r3, [r0, #24]
 8003b10:	b90b      	cbnz	r3, 8003b16 <__swbuf_r+0x12>
 8003b12:	f7ff fbf9 	bl	8003308 <__sinit>
 8003b16:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <__swbuf_r+0x98>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d12a      	bne.n	8003b72 <__swbuf_r+0x6e>
 8003b1c:	686c      	ldr	r4, [r5, #4]
 8003b1e:	69a3      	ldr	r3, [r4, #24]
 8003b20:	60a3      	str	r3, [r4, #8]
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	071a      	lsls	r2, r3, #28
 8003b26:	d52e      	bpl.n	8003b86 <__swbuf_r+0x82>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	b363      	cbz	r3, 8003b86 <__swbuf_r+0x82>
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	b2f6      	uxtb	r6, r6
 8003b32:	1ac0      	subs	r0, r0, r3
 8003b34:	6963      	ldr	r3, [r4, #20]
 8003b36:	4637      	mov	r7, r6
 8003b38:	4283      	cmp	r3, r0
 8003b3a:	dc04      	bgt.n	8003b46 <__swbuf_r+0x42>
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 f948 	bl	8003dd4 <_fflush_r>
 8003b44:	bb28      	cbnz	r0, 8003b92 <__swbuf_r+0x8e>
 8003b46:	68a3      	ldr	r3, [r4, #8]
 8003b48:	3001      	adds	r0, #1
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	60a3      	str	r3, [r4, #8]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	6022      	str	r2, [r4, #0]
 8003b54:	701e      	strb	r6, [r3, #0]
 8003b56:	6963      	ldr	r3, [r4, #20]
 8003b58:	4283      	cmp	r3, r0
 8003b5a:	d004      	beq.n	8003b66 <__swbuf_r+0x62>
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	07db      	lsls	r3, r3, #31
 8003b60:	d519      	bpl.n	8003b96 <__swbuf_r+0x92>
 8003b62:	2e0a      	cmp	r6, #10
 8003b64:	d117      	bne.n	8003b96 <__swbuf_r+0x92>
 8003b66:	4621      	mov	r1, r4
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 f933 	bl	8003dd4 <_fflush_r>
 8003b6e:	b190      	cbz	r0, 8003b96 <__swbuf_r+0x92>
 8003b70:	e00f      	b.n	8003b92 <__swbuf_r+0x8e>
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <__swbuf_r+0x9c>)
 8003b74:	429c      	cmp	r4, r3
 8003b76:	d101      	bne.n	8003b7c <__swbuf_r+0x78>
 8003b78:	68ac      	ldr	r4, [r5, #8]
 8003b7a:	e7d0      	b.n	8003b1e <__swbuf_r+0x1a>
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <__swbuf_r+0xa0>)
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	bf08      	it	eq
 8003b82:	68ec      	ldreq	r4, [r5, #12]
 8003b84:	e7cb      	b.n	8003b1e <__swbuf_r+0x1a>
 8003b86:	4621      	mov	r1, r4
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f000 f81f 	bl	8003bcc <__swsetup_r>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0cc      	beq.n	8003b2c <__swbuf_r+0x28>
 8003b92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b96:	4638      	mov	r0, r7
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	0800409c 	.word	0x0800409c
 8003ba0:	080040bc 	.word	0x080040bc
 8003ba4:	0800407c 	.word	0x0800407c

08003ba8 <_write_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4c05      	ldr	r4, [pc, #20]	; (8003bc8 <_write_r+0x20>)
 8003bb4:	6022      	str	r2, [r4, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f7ff fa49 	bl	800304e <_write>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_write_r+0x1e>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_write_r+0x1e>
 8003bc4:	602b      	str	r3, [r5, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	20001174 	.word	0x20001174

08003bcc <__swsetup_r>:
 8003bcc:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <__swsetup_r+0xcc>)
 8003bce:	b570      	push	{r4, r5, r6, lr}
 8003bd0:	681d      	ldr	r5, [r3, #0]
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	b125      	cbz	r5, 8003be2 <__swsetup_r+0x16>
 8003bd8:	69ab      	ldr	r3, [r5, #24]
 8003bda:	b913      	cbnz	r3, 8003be2 <__swsetup_r+0x16>
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f7ff fb93 	bl	8003308 <__sinit>
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <__swsetup_r+0xd0>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	d10f      	bne.n	8003c08 <__swsetup_r+0x3c>
 8003be8:	686c      	ldr	r4, [r5, #4]
 8003bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	0715      	lsls	r5, r2, #28
 8003bf2:	d42c      	bmi.n	8003c4e <__swsetup_r+0x82>
 8003bf4:	06d0      	lsls	r0, r2, #27
 8003bf6:	d411      	bmi.n	8003c1c <__swsetup_r+0x50>
 8003bf8:	2209      	movs	r2, #9
 8003bfa:	6032      	str	r2, [r6, #0]
 8003bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c06:	e03e      	b.n	8003c86 <__swsetup_r+0xba>
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <__swsetup_r+0xd4>)
 8003c0a:	429c      	cmp	r4, r3
 8003c0c:	d101      	bne.n	8003c12 <__swsetup_r+0x46>
 8003c0e:	68ac      	ldr	r4, [r5, #8]
 8003c10:	e7eb      	b.n	8003bea <__swsetup_r+0x1e>
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <__swsetup_r+0xd8>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	bf08      	it	eq
 8003c18:	68ec      	ldreq	r4, [r5, #12]
 8003c1a:	e7e6      	b.n	8003bea <__swsetup_r+0x1e>
 8003c1c:	0751      	lsls	r1, r2, #29
 8003c1e:	d512      	bpl.n	8003c46 <__swsetup_r+0x7a>
 8003c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c22:	b141      	cbz	r1, 8003c36 <__swsetup_r+0x6a>
 8003c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	d002      	beq.n	8003c32 <__swsetup_r+0x66>
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f000 f981 	bl	8003f34 <_free_r>
 8003c32:	2300      	movs	r3, #0
 8003c34:	6363      	str	r3, [r4, #52]	; 0x34
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c3c:	81a3      	strh	r3, [r4, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6063      	str	r3, [r4, #4]
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	b94b      	cbnz	r3, 8003c66 <__swsetup_r+0x9a>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5c:	d003      	beq.n	8003c66 <__swsetup_r+0x9a>
 8003c5e:	4621      	mov	r1, r4
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f917 	bl	8003e94 <__smakebuf_r>
 8003c66:	89a2      	ldrh	r2, [r4, #12]
 8003c68:	f012 0301 	ands.w	r3, r2, #1
 8003c6c:	d00c      	beq.n	8003c88 <__swsetup_r+0xbc>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	6963      	ldr	r3, [r4, #20]
 8003c74:	425b      	negs	r3, r3
 8003c76:	61a3      	str	r3, [r4, #24]
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	b953      	cbnz	r3, 8003c92 <__swsetup_r+0xc6>
 8003c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c84:	d1ba      	bne.n	8003bfc <__swsetup_r+0x30>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	0792      	lsls	r2, r2, #30
 8003c8a:	bf58      	it	pl
 8003c8c:	6963      	ldrpl	r3, [r4, #20]
 8003c8e:	60a3      	str	r3, [r4, #8]
 8003c90:	e7f2      	b.n	8003c78 <__swsetup_r+0xac>
 8003c92:	2000      	movs	r0, #0
 8003c94:	e7f7      	b.n	8003c86 <__swsetup_r+0xba>
 8003c96:	bf00      	nop
 8003c98:	2000000c 	.word	0x2000000c
 8003c9c:	0800409c 	.word	0x0800409c
 8003ca0:	080040bc 	.word	0x080040bc
 8003ca4:	0800407c 	.word	0x0800407c

08003ca8 <_close_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	2300      	movs	r3, #0
 8003cac:	4c05      	ldr	r4, [pc, #20]	; (8003cc4 <_close_r+0x1c>)
 8003cae:	4605      	mov	r5, r0
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	f7ff f9e7 	bl	8003086 <_close>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d102      	bne.n	8003cc2 <_close_r+0x1a>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	b103      	cbz	r3, 8003cc2 <_close_r+0x1a>
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
 8003cc4:	20001174 	.word	0x20001174

08003cc8 <__sflush_r>:
 8003cc8:	898a      	ldrh	r2, [r1, #12]
 8003cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cce:	4605      	mov	r5, r0
 8003cd0:	0710      	lsls	r0, r2, #28
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	d458      	bmi.n	8003d88 <__sflush_r+0xc0>
 8003cd6:	684b      	ldr	r3, [r1, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dc05      	bgt.n	8003ce8 <__sflush_r+0x20>
 8003cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	dc02      	bgt.n	8003ce8 <__sflush_r+0x20>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cea:	2e00      	cmp	r6, #0
 8003cec:	d0f9      	beq.n	8003ce2 <__sflush_r+0x1a>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cf4:	682f      	ldr	r7, [r5, #0]
 8003cf6:	6a21      	ldr	r1, [r4, #32]
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	d032      	beq.n	8003d62 <__sflush_r+0x9a>
 8003cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	075a      	lsls	r2, r3, #29
 8003d02:	d505      	bpl.n	8003d10 <__sflush_r+0x48>
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	1ac0      	subs	r0, r0, r3
 8003d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d0a:	b10b      	cbz	r3, 8003d10 <__sflush_r+0x48>
 8003d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d0e:	1ac0      	subs	r0, r0, r3
 8003d10:	2300      	movs	r3, #0
 8003d12:	4602      	mov	r2, r0
 8003d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d16:	6a21      	ldr	r1, [r4, #32]
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b0      	blx	r6
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	d106      	bne.n	8003d30 <__sflush_r+0x68>
 8003d22:	6829      	ldr	r1, [r5, #0]
 8003d24:	291d      	cmp	r1, #29
 8003d26:	d848      	bhi.n	8003dba <__sflush_r+0xf2>
 8003d28:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <__sflush_r+0x108>)
 8003d2a:	40ca      	lsrs	r2, r1
 8003d2c:	07d6      	lsls	r6, r2, #31
 8003d2e:	d544      	bpl.n	8003dba <__sflush_r+0xf2>
 8003d30:	2200      	movs	r2, #0
 8003d32:	6062      	str	r2, [r4, #4]
 8003d34:	6922      	ldr	r2, [r4, #16]
 8003d36:	04d9      	lsls	r1, r3, #19
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	d504      	bpl.n	8003d46 <__sflush_r+0x7e>
 8003d3c:	1c42      	adds	r2, r0, #1
 8003d3e:	d101      	bne.n	8003d44 <__sflush_r+0x7c>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b903      	cbnz	r3, 8003d46 <__sflush_r+0x7e>
 8003d44:	6560      	str	r0, [r4, #84]	; 0x54
 8003d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d48:	602f      	str	r7, [r5, #0]
 8003d4a:	2900      	cmp	r1, #0
 8003d4c:	d0c9      	beq.n	8003ce2 <__sflush_r+0x1a>
 8003d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d52:	4299      	cmp	r1, r3
 8003d54:	d002      	beq.n	8003d5c <__sflush_r+0x94>
 8003d56:	4628      	mov	r0, r5
 8003d58:	f000 f8ec 	bl	8003f34 <_free_r>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8003d60:	e7c0      	b.n	8003ce4 <__sflush_r+0x1c>
 8003d62:	2301      	movs	r3, #1
 8003d64:	4628      	mov	r0, r5
 8003d66:	47b0      	blx	r6
 8003d68:	1c41      	adds	r1, r0, #1
 8003d6a:	d1c8      	bne.n	8003cfe <__sflush_r+0x36>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0c5      	beq.n	8003cfe <__sflush_r+0x36>
 8003d72:	2b1d      	cmp	r3, #29
 8003d74:	d001      	beq.n	8003d7a <__sflush_r+0xb2>
 8003d76:	2b16      	cmp	r3, #22
 8003d78:	d101      	bne.n	8003d7e <__sflush_r+0xb6>
 8003d7a:	602f      	str	r7, [r5, #0]
 8003d7c:	e7b1      	b.n	8003ce2 <__sflush_r+0x1a>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	e7ad      	b.n	8003ce4 <__sflush_r+0x1c>
 8003d88:	690f      	ldr	r7, [r1, #16]
 8003d8a:	2f00      	cmp	r7, #0
 8003d8c:	d0a9      	beq.n	8003ce2 <__sflush_r+0x1a>
 8003d8e:	0793      	lsls	r3, r2, #30
 8003d90:	bf18      	it	ne
 8003d92:	2300      	movne	r3, #0
 8003d94:	680e      	ldr	r6, [r1, #0]
 8003d96:	bf08      	it	eq
 8003d98:	694b      	ldreq	r3, [r1, #20]
 8003d9a:	eba6 0807 	sub.w	r8, r6, r7
 8003d9e:	600f      	str	r7, [r1, #0]
 8003da0:	608b      	str	r3, [r1, #8]
 8003da2:	f1b8 0f00 	cmp.w	r8, #0
 8003da6:	dd9c      	ble.n	8003ce2 <__sflush_r+0x1a>
 8003da8:	4643      	mov	r3, r8
 8003daa:	463a      	mov	r2, r7
 8003dac:	6a21      	ldr	r1, [r4, #32]
 8003dae:	4628      	mov	r0, r5
 8003db0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003db2:	47b0      	blx	r6
 8003db4:	2800      	cmp	r0, #0
 8003db6:	dc06      	bgt.n	8003dc6 <__sflush_r+0xfe>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc4:	e78e      	b.n	8003ce4 <__sflush_r+0x1c>
 8003dc6:	4407      	add	r7, r0
 8003dc8:	eba8 0800 	sub.w	r8, r8, r0
 8003dcc:	e7e9      	b.n	8003da2 <__sflush_r+0xda>
 8003dce:	bf00      	nop
 8003dd0:	20400001 	.word	0x20400001

08003dd4 <_fflush_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	690b      	ldr	r3, [r1, #16]
 8003dd8:	4605      	mov	r5, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	b1db      	cbz	r3, 8003e16 <_fflush_r+0x42>
 8003dde:	b118      	cbz	r0, 8003de8 <_fflush_r+0x14>
 8003de0:	6983      	ldr	r3, [r0, #24]
 8003de2:	b90b      	cbnz	r3, 8003de8 <_fflush_r+0x14>
 8003de4:	f7ff fa90 	bl	8003308 <__sinit>
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <_fflush_r+0x48>)
 8003dea:	429c      	cmp	r4, r3
 8003dec:	d109      	bne.n	8003e02 <_fflush_r+0x2e>
 8003dee:	686c      	ldr	r4, [r5, #4]
 8003df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003df4:	b17b      	cbz	r3, 8003e16 <_fflush_r+0x42>
 8003df6:	4621      	mov	r1, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dfe:	f7ff bf63 	b.w	8003cc8 <__sflush_r>
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <_fflush_r+0x4c>)
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d101      	bne.n	8003e0c <_fflush_r+0x38>
 8003e08:	68ac      	ldr	r4, [r5, #8]
 8003e0a:	e7f1      	b.n	8003df0 <_fflush_r+0x1c>
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <_fflush_r+0x50>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	bf08      	it	eq
 8003e12:	68ec      	ldreq	r4, [r5, #12]
 8003e14:	e7ec      	b.n	8003df0 <_fflush_r+0x1c>
 8003e16:	2000      	movs	r0, #0
 8003e18:	bd38      	pop	{r3, r4, r5, pc}
 8003e1a:	bf00      	nop
 8003e1c:	0800409c 	.word	0x0800409c
 8003e20:	080040bc 	.word	0x080040bc
 8003e24:	0800407c 	.word	0x0800407c

08003e28 <_lseek_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	2200      	movs	r2, #0
 8003e32:	4c05      	ldr	r4, [pc, #20]	; (8003e48 <_lseek_r+0x20>)
 8003e34:	6022      	str	r2, [r4, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7ff f949 	bl	80030ce <_lseek>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_lseek_r+0x1e>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_lseek_r+0x1e>
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	20001174 	.word	0x20001174

08003e4c <__swhatbuf_r>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	460e      	mov	r6, r1
 8003e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e54:	b096      	sub	sp, #88	; 0x58
 8003e56:	2900      	cmp	r1, #0
 8003e58:	4614      	mov	r4, r2
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	da07      	bge.n	8003e6e <__swhatbuf_r+0x22>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	602b      	str	r3, [r5, #0]
 8003e62:	89b3      	ldrh	r3, [r6, #12]
 8003e64:	061a      	lsls	r2, r3, #24
 8003e66:	d410      	bmi.n	8003e8a <__swhatbuf_r+0x3e>
 8003e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e6c:	e00e      	b.n	8003e8c <__swhatbuf_r+0x40>
 8003e6e:	466a      	mov	r2, sp
 8003e70:	f000 f8be 	bl	8003ff0 <_fstat_r>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	dbf2      	blt.n	8003e5e <__swhatbuf_r+0x12>
 8003e78:	9a01      	ldr	r2, [sp, #4]
 8003e7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e82:	425a      	negs	r2, r3
 8003e84:	415a      	adcs	r2, r3
 8003e86:	602a      	str	r2, [r5, #0]
 8003e88:	e7ee      	b.n	8003e68 <__swhatbuf_r+0x1c>
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	b016      	add	sp, #88	; 0x58
 8003e92:	bd70      	pop	{r4, r5, r6, pc}

08003e94 <__smakebuf_r>:
 8003e94:	898b      	ldrh	r3, [r1, #12]
 8003e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e98:	079d      	lsls	r5, r3, #30
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	d507      	bpl.n	8003eb0 <__smakebuf_r+0x1c>
 8003ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	6163      	str	r3, [r4, #20]
 8003eac:	b002      	add	sp, #8
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	ab01      	add	r3, sp, #4
 8003eb2:	466a      	mov	r2, sp
 8003eb4:	f7ff ffca 	bl	8003e4c <__swhatbuf_r>
 8003eb8:	9900      	ldr	r1, [sp, #0]
 8003eba:	4605      	mov	r5, r0
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f7ff faad 	bl	800341c <_malloc_r>
 8003ec2:	b948      	cbnz	r0, 8003ed8 <__smakebuf_r+0x44>
 8003ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec8:	059a      	lsls	r2, r3, #22
 8003eca:	d4ef      	bmi.n	8003eac <__smakebuf_r+0x18>
 8003ecc:	f023 0303 	bic.w	r3, r3, #3
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	e7e3      	b.n	8003ea0 <__smakebuf_r+0xc>
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <__smakebuf_r+0x7c>)
 8003eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	6020      	str	r0, [r4, #0]
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	9b00      	ldr	r3, [sp, #0]
 8003ee8:	6120      	str	r0, [r4, #16]
 8003eea:	6163      	str	r3, [r4, #20]
 8003eec:	9b01      	ldr	r3, [sp, #4]
 8003eee:	b15b      	cbz	r3, 8003f08 <__smakebuf_r+0x74>
 8003ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 f88d 	bl	8004014 <_isatty_r>
 8003efa:	b128      	cbz	r0, 8003f08 <__smakebuf_r+0x74>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	431d      	orrs	r5, r3
 8003f0c:	81a5      	strh	r5, [r4, #12]
 8003f0e:	e7cd      	b.n	8003eac <__smakebuf_r+0x18>
 8003f10:	080032d1 	.word	0x080032d1

08003f14 <memchr>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	b2c9      	uxtb	r1, r1
 8003f18:	4402      	add	r2, r0
 8003f1a:	4290      	cmp	r0, r2
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	d101      	bne.n	8003f24 <memchr+0x10>
 8003f20:	2300      	movs	r3, #0
 8003f22:	e003      	b.n	8003f2c <memchr+0x18>
 8003f24:	781c      	ldrb	r4, [r3, #0]
 8003f26:	3001      	adds	r0, #1
 8003f28:	428c      	cmp	r4, r1
 8003f2a:	d1f6      	bne.n	8003f1a <memchr+0x6>
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd10      	pop	{r4, pc}

08003f30 <__malloc_lock>:
 8003f30:	4770      	bx	lr

08003f32 <__malloc_unlock>:
 8003f32:	4770      	bx	lr

08003f34 <_free_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4605      	mov	r5, r0
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	d043      	beq.n	8003fc4 <_free_r+0x90>
 8003f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f40:	1f0c      	subs	r4, r1, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bfb8      	it	lt
 8003f46:	18e4      	addlt	r4, r4, r3
 8003f48:	f7ff fff2 	bl	8003f30 <__malloc_lock>
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <_free_r+0x94>)
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	4610      	mov	r0, r2
 8003f52:	b933      	cbnz	r3, 8003f62 <_free_r+0x2e>
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6014      	str	r4, [r2, #0]
 8003f58:	4628      	mov	r0, r5
 8003f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f5e:	f7ff bfe8 	b.w	8003f32 <__malloc_unlock>
 8003f62:	42a3      	cmp	r3, r4
 8003f64:	d90b      	bls.n	8003f7e <_free_r+0x4a>
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	1862      	adds	r2, r4, r1
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	bf01      	itttt	eq
 8003f6e:	681a      	ldreq	r2, [r3, #0]
 8003f70:	685b      	ldreq	r3, [r3, #4]
 8003f72:	1852      	addeq	r2, r2, r1
 8003f74:	6022      	streq	r2, [r4, #0]
 8003f76:	6063      	str	r3, [r4, #4]
 8003f78:	6004      	str	r4, [r0, #0]
 8003f7a:	e7ed      	b.n	8003f58 <_free_r+0x24>
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	b10a      	cbz	r2, 8003f86 <_free_r+0x52>
 8003f82:	42a2      	cmp	r2, r4
 8003f84:	d9fa      	bls.n	8003f7c <_free_r+0x48>
 8003f86:	6819      	ldr	r1, [r3, #0]
 8003f88:	1858      	adds	r0, r3, r1
 8003f8a:	42a0      	cmp	r0, r4
 8003f8c:	d10b      	bne.n	8003fa6 <_free_r+0x72>
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	4401      	add	r1, r0
 8003f92:	1858      	adds	r0, r3, r1
 8003f94:	4282      	cmp	r2, r0
 8003f96:	6019      	str	r1, [r3, #0]
 8003f98:	d1de      	bne.n	8003f58 <_free_r+0x24>
 8003f9a:	6810      	ldr	r0, [r2, #0]
 8003f9c:	6852      	ldr	r2, [r2, #4]
 8003f9e:	4401      	add	r1, r0
 8003fa0:	6019      	str	r1, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	e7d8      	b.n	8003f58 <_free_r+0x24>
 8003fa6:	d902      	bls.n	8003fae <_free_r+0x7a>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	e7d4      	b.n	8003f58 <_free_r+0x24>
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	1821      	adds	r1, r4, r0
 8003fb2:	428a      	cmp	r2, r1
 8003fb4:	bf01      	itttt	eq
 8003fb6:	6811      	ldreq	r1, [r2, #0]
 8003fb8:	6852      	ldreq	r2, [r2, #4]
 8003fba:	1809      	addeq	r1, r1, r0
 8003fbc:	6021      	streq	r1, [r4, #0]
 8003fbe:	6062      	str	r2, [r4, #4]
 8003fc0:	605c      	str	r4, [r3, #4]
 8003fc2:	e7c9      	b.n	8003f58 <_free_r+0x24>
 8003fc4:	bd38      	pop	{r3, r4, r5, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200000c4 	.word	0x200000c4

08003fcc <_read_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4605      	mov	r5, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4c05      	ldr	r4, [pc, #20]	; (8003fec <_read_r+0x20>)
 8003fd8:	6022      	str	r2, [r4, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7ff f81a 	bl	8003014 <_read>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_read_r+0x1e>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_read_r+0x1e>
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20001174 	.word	0x20001174

08003ff0 <_fstat_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	4c06      	ldr	r4, [pc, #24]	; (8004010 <_fstat_r+0x20>)
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	f7ff f84d 	bl	800309c <_fstat>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	d102      	bne.n	800400c <_fstat_r+0x1c>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	b103      	cbz	r3, 800400c <_fstat_r+0x1c>
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	bd38      	pop	{r3, r4, r5, pc}
 800400e:	bf00      	nop
 8004010:	20001174 	.word	0x20001174

08004014 <_isatty_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	2300      	movs	r3, #0
 8004018:	4c05      	ldr	r4, [pc, #20]	; (8004030 <_isatty_r+0x1c>)
 800401a:	4605      	mov	r5, r0
 800401c:	4608      	mov	r0, r1
 800401e:	6023      	str	r3, [r4, #0]
 8004020:	f7ff f84b 	bl	80030ba <_isatty>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_isatty_r+0x1a>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	b103      	cbz	r3, 800402e <_isatty_r+0x1a>
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20001174 	.word	0x20001174

08004034 <_init>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr

08004040 <_fini>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr
