
ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003674  08003674  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003674  08003674  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003674  08003674  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080036ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080036ec  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001963  00000000  00000000  0002aa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001528d  00000000  00000000  0002d678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000706f  00000000  00000000  00042905  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070a16  00000000  00000000  00049974  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba38a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  000ba408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003594 	.word	0x08003594

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003594 	.word	0x08003594

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f900 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a0 	.word	0x200000a0

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a0 	.word	0x200000a0

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e26c      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 8087 	beq.w	800082e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000720:	4b92      	ldr	r3, [pc, #584]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f003 030c 	and.w	r3, r3, #12
 8000728:	2b04      	cmp	r3, #4
 800072a:	d00c      	beq.n	8000746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800072c:	4b8f      	ldr	r3, [pc, #572]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f003 030c 	and.w	r3, r3, #12
 8000734:	2b08      	cmp	r3, #8
 8000736:	d112      	bne.n	800075e <HAL_RCC_OscConfig+0x5e>
 8000738:	4b8c      	ldr	r3, [pc, #560]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000744:	d10b      	bne.n	800075e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000746:	4b89      	ldr	r3, [pc, #548]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d06c      	beq.n	800082c <HAL_RCC_OscConfig+0x12c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d168      	bne.n	800082c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e246      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000766:	d106      	bne.n	8000776 <HAL_RCC_OscConfig+0x76>
 8000768:	4b80      	ldr	r3, [pc, #512]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a7f      	ldr	r2, [pc, #508]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	e02e      	b.n	80007d4 <HAL_RCC_OscConfig+0xd4>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10c      	bne.n	8000798 <HAL_RCC_OscConfig+0x98>
 800077e:	4b7b      	ldr	r3, [pc, #492]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a7a      	ldr	r2, [pc, #488]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	4b78      	ldr	r3, [pc, #480]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a77      	ldr	r2, [pc, #476]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	e01d      	b.n	80007d4 <HAL_RCC_OscConfig+0xd4>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007a0:	d10c      	bne.n	80007bc <HAL_RCC_OscConfig+0xbc>
 80007a2:	4b72      	ldr	r3, [pc, #456]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a71      	ldr	r2, [pc, #452]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a6e      	ldr	r2, [pc, #440]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e00b      	b.n	80007d4 <HAL_RCC_OscConfig+0xd4>
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a6a      	ldr	r2, [pc, #424]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b68      	ldr	r3, [pc, #416]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a67      	ldr	r2, [pc, #412]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d013      	beq.n	8000804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007dc:	f7ff fd0e 	bl	80001fc <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e2:	e008      	b.n	80007f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007e4:	f7ff fd0a 	bl	80001fc <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2b64      	cmp	r3, #100	; 0x64
 80007f0:	d901      	bls.n	80007f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80007f2:	2303      	movs	r3, #3
 80007f4:	e1fa      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f6:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f0      	beq.n	80007e4 <HAL_RCC_OscConfig+0xe4>
 8000802:	e014      	b.n	800082e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000804:	f7ff fcfa 	bl	80001fc <HAL_GetTick>
 8000808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800080a:	e008      	b.n	800081e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800080c:	f7ff fcf6 	bl	80001fc <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b64      	cmp	r3, #100	; 0x64
 8000818:	d901      	bls.n	800081e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800081a:	2303      	movs	r3, #3
 800081c:	e1e6      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800081e:	4b53      	ldr	r3, [pc, #332]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f0      	bne.n	800080c <HAL_RCC_OscConfig+0x10c>
 800082a:	e000      	b.n	800082e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d063      	beq.n	8000902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800083a:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 030c 	and.w	r3, r3, #12
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00b      	beq.n	800085e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000846:	4b49      	ldr	r3, [pc, #292]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 030c 	and.w	r3, r3, #12
 800084e:	2b08      	cmp	r3, #8
 8000850:	d11c      	bne.n	800088c <HAL_RCC_OscConfig+0x18c>
 8000852:	4b46      	ldr	r3, [pc, #280]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d116      	bne.n	800088c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800085e:	4b43      	ldr	r3, [pc, #268]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d005      	beq.n	8000876 <HAL_RCC_OscConfig+0x176>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d001      	beq.n	8000876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e1ba      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	4939      	ldr	r1, [pc, #228]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000886:	4313      	orrs	r3, r2
 8000888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800088a:	e03a      	b.n	8000902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d020      	beq.n	80008d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000894:	4b36      	ldr	r3, [pc, #216]	; (8000970 <HAL_RCC_OscConfig+0x270>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089a:	f7ff fcaf 	bl	80001fc <HAL_GetTick>
 800089e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a0:	e008      	b.n	80008b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008a2:	f7ff fcab 	bl	80001fc <HAL_GetTick>
 80008a6:	4602      	mov	r2, r0
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d901      	bls.n	80008b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008b0:	2303      	movs	r3, #3
 80008b2:	e19b      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0f0      	beq.n	80008a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4927      	ldr	r1, [pc, #156]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
 80008d4:	e015      	b.n	8000902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_RCC_OscConfig+0x270>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008dc:	f7ff fc8e 	bl	80001fc <HAL_GetTick>
 80008e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e2:	e008      	b.n	80008f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008e4:	f7ff fc8a 	bl	80001fc <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d901      	bls.n	80008f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80008f2:	2303      	movs	r3, #3
 80008f4:	e17a      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f0      	bne.n	80008e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	2b00      	cmp	r3, #0
 800090c:	d03a      	beq.n	8000984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d019      	beq.n	800094a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_RCC_OscConfig+0x274>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091c:	f7ff fc6e 	bl	80001fc <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000924:	f7ff fc6a 	bl	80001fc <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b02      	cmp	r3, #2
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e15a      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f0      	beq.n	8000924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 faaa 	bl	8000e9c <RCC_Delay>
 8000948:	e01c      	b.n	8000984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_RCC_OscConfig+0x274>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000950:	f7ff fc54 	bl	80001fc <HAL_GetTick>
 8000954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000956:	e00f      	b.n	8000978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000958:	f7ff fc50 	bl	80001fc <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d908      	bls.n	8000978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000966:	2303      	movs	r3, #3
 8000968:	e140      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	42420000 	.word	0x42420000
 8000974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000978:	4b9e      	ldr	r3, [pc, #632]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1e9      	bne.n	8000958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a6 	beq.w	8000ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000996:	4b97      	ldr	r3, [pc, #604]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10d      	bne.n	80009be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b94      	ldr	r3, [pc, #592]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a93      	ldr	r2, [pc, #588]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b91      	ldr	r3, [pc, #580]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d118      	bne.n	80009fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ca:	4b8b      	ldr	r3, [pc, #556]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a8a      	ldr	r2, [pc, #552]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009d6:	f7ff fc11 	bl	80001fc <HAL_GetTick>
 80009da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	e008      	b.n	80009f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b64      	cmp	r3, #100	; 0x64
 80009ea:	d901      	bls.n	80009f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009ec:	2303      	movs	r3, #3
 80009ee:	e0fd      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f0:	4b81      	ldr	r3, [pc, #516]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f0      	beq.n	80009de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <HAL_RCC_OscConfig+0x312>
 8000a04:	4b7b      	ldr	r3, [pc, #492]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a7a      	ldr	r2, [pc, #488]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6213      	str	r3, [r2, #32]
 8000a10:	e02d      	b.n	8000a6e <HAL_RCC_OscConfig+0x36e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10c      	bne.n	8000a34 <HAL_RCC_OscConfig+0x334>
 8000a1a:	4b76      	ldr	r3, [pc, #472]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a75      	ldr	r2, [pc, #468]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	6213      	str	r3, [r2, #32]
 8000a26:	4b73      	ldr	r3, [pc, #460]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4a72      	ldr	r2, [pc, #456]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	f023 0304 	bic.w	r3, r3, #4
 8000a30:	6213      	str	r3, [r2, #32]
 8000a32:	e01c      	b.n	8000a6e <HAL_RCC_OscConfig+0x36e>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d10c      	bne.n	8000a56 <HAL_RCC_OscConfig+0x356>
 8000a3c:	4b6d      	ldr	r3, [pc, #436]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a6c      	ldr	r2, [pc, #432]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6213      	str	r3, [r2, #32]
 8000a48:	4b6a      	ldr	r3, [pc, #424]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a69      	ldr	r2, [pc, #420]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6213      	str	r3, [r2, #32]
 8000a54:	e00b      	b.n	8000a6e <HAL_RCC_OscConfig+0x36e>
 8000a56:	4b67      	ldr	r3, [pc, #412]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6213      	str	r3, [r2, #32]
 8000a62:	4b64      	ldr	r3, [pc, #400]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a63      	ldr	r2, [pc, #396]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a68:	f023 0304 	bic.w	r3, r3, #4
 8000a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d015      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a76:	f7ff fbc1 	bl	80001fc <HAL_GetTick>
 8000a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a7c:	e00a      	b.n	8000a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fbbd 	bl	80001fc <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d901      	bls.n	8000a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e0ab      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a94:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0ee      	beq.n	8000a7e <HAL_RCC_OscConfig+0x37e>
 8000aa0:	e014      	b.n	8000acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa8:	e00a      	b.n	8000ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e095      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ee      	bne.n	8000aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d105      	bne.n	8000ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad2:	4b48      	ldr	r3, [pc, #288]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a47      	ldr	r2, [pc, #284]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8081 	beq.w	8000bea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae8:	4b42      	ldr	r3, [pc, #264]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d061      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d146      	bne.n	8000b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_RCC_OscConfig+0x4fc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b08:	e008      	b.n	8000b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fb77 	bl	80001fc <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e067      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f0      	bne.n	8000b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b30:	d108      	bne.n	8000b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	492d      	ldr	r1, [pc, #180]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b40:	4313      	orrs	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a19      	ldr	r1, [r3, #32]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	430b      	orrs	r3, r1
 8000b56:	4927      	ldr	r1, [pc, #156]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <HAL_RCC_OscConfig+0x4fc>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fb4b 	bl	80001fc <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fb47 	bl	80001fc <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e037      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f0      	beq.n	8000b6a <HAL_RCC_OscConfig+0x46a>
 8000b88:	e02f      	b.n	8000bea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_RCC_OscConfig+0x4fc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b90:	f7ff fb34 	bl	80001fc <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fb30 	bl	80001fc <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e020      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f0      	bne.n	8000b98 <HAL_RCC_OscConfig+0x498>
 8000bb6:	e018      	b.n	8000bea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d101      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e013      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d106      	bne.n	8000be6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d001      	beq.n	8000bea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40007000 	.word	0x40007000
 8000bfc:	42420060 	.word	0x42420060

08000c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e0d0      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c14:	4b6a      	ldr	r3, [pc, #424]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d910      	bls.n	8000c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c22:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 0207 	bic.w	r2, r3, #7
 8000c2a:	4965      	ldr	r1, [pc, #404]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c32:	4b63      	ldr	r3, [pc, #396]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d001      	beq.n	8000c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e0b8      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d020      	beq.n	8000c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d005      	beq.n	8000c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c5c:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4a58      	ldr	r2, [pc, #352]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d005      	beq.n	8000c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c74:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a52      	ldr	r2, [pc, #328]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c80:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	494d      	ldr	r1, [pc, #308]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d040      	beq.n	8000d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d107      	bne.n	8000cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca6:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d115      	bne.n	8000cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e07f      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d107      	bne.n	8000cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d109      	bne.n	8000cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e073      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e06b      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cde:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f023 0203 	bic.w	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4936      	ldr	r1, [pc, #216]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fa84 	bl	80001fc <HAL_GetTick>
 8000cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf8:	f7ff fa80 	bl	80001fc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e053      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 020c 	and.w	r2, r3, #12
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d1eb      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d210      	bcs.n	8000d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 0207 	bic.w	r2, r3, #7
 8000d36:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d001      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e032      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4916      	ldr	r1, [pc, #88]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d009      	beq.n	8000d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d8e:	f000 f821 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8000d92:	4601      	mov	r1, r0
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	fa21 f303 	lsr.w	r3, r1, r3
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_RCC_ClockConfig+0x1cc>)
 8000da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff f9e2 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	080035cc 	.word	0x080035cc
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dd4:	b490      	push	{r4, r7}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ddc:	1d3c      	adds	r4, r7, #4
 8000dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d002      	beq.n	8000e14 <HAL_RCC_GetSysClockFreq+0x40>
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d003      	beq.n	8000e1a <HAL_RCC_GetSysClockFreq+0x46>
 8000e12:	e02d      	b.n	8000e70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e16:	623b      	str	r3, [r7, #32]
      break;
 8000e18:	e02d      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	0c9b      	lsrs	r3, r3, #18
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e26:	4413      	add	r3, r2
 8000e28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	0c5b      	lsrs	r3, r3, #17
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e46:	4413      	add	r3, r2
 8000e48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e52:	fb02 f203 	mul.w	r2, r2, r3
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e004      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	623b      	str	r3, [r7, #32]
      break;
 8000e6e:	e002      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000e72:	623b      	str	r3, [r7, #32]
      break;
 8000e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e76:	6a3b      	ldr	r3, [r7, #32]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc90      	pop	{r4, r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	080035ac 	.word	0x080035ac
 8000e88:	080035bc 	.word	0x080035bc
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	00f42400 	.word	0x00f42400
 8000e94:	003d0900 	.word	0x003d0900
 8000e98:	007a1200 	.word	0x007a1200

08000e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <RCC_Delay+0x34>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <RCC_Delay+0x38>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	0a5b      	lsrs	r3, r3, #9
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000eb8:	bf00      	nop
  }
  while (Delay --);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	60fa      	str	r2, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f9      	bne.n	8000eb8 <RCC_Delay+0x1c>
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	10624dd3 	.word	0x10624dd3

08000ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e01d      	b.n	8000f26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f001 fa66 	bl	80023d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3304      	adds	r3, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f000 fb34 	bl	8001584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e01d      	b.n	8000f7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f815 	bl	8000f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f000 fb09 	bl	8001584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e01d      	b.n	8000fe4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d106      	bne.n	8000fc2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f815 	bl	8000fec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f000 fad5 	bl	8001584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 feca 	bl	8001daa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b06      	cmp	r3, #6
 8001026:	d007      	beq.n	8001038 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_TIM_IC_ConfigChannel+0x1a>
 8001058:	2302      	movs	r3, #2
 800105a:	e08a      	b.n	8001172 <HAL_TIM_IC_ConfigChannel+0x130>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d11b      	bne.n	80010aa <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f000 fcef 	bl	8001a64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 020c 	bic.w	r2, r2, #12
 8001094:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6999      	ldr	r1, [r3, #24]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	e05a      	b.n	8001160 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d11c      	bne.n	80010ea <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	f000 fd58 	bl	8001b74 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	699a      	ldr	r2, [r3, #24]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80010d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6999      	ldr	r1, [r3, #24]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	021a      	lsls	r2, r3, #8
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	619a      	str	r2, [r3, #24]
 80010e8:	e03a      	b.n	8001160 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d11b      	bne.n	8001128 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f000 fda3 	bl	8001c4a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69da      	ldr	r2, [r3, #28]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020c 	bic.w	r2, r2, #12
 8001112:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69d9      	ldr	r1, [r3, #28]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	61da      	str	r2, [r3, #28]
 8001126:	e01b      	b.n	8001160 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	f000 fdc2 	bl	8001cc0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	69da      	ldr	r2, [r3, #28]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800114a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	69d9      	ldr	r1, [r3, #28]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	021a      	lsls	r2, r3, #8
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001192:	2302      	movs	r3, #2
 8001194:	e0b4      	b.n	8001300 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	f200 809f 	bhi.w	80012ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011e9 	.word	0x080011e9
 80011b8:	080012ed 	.word	0x080012ed
 80011bc:	080012ed 	.word	0x080012ed
 80011c0:	080012ed 	.word	0x080012ed
 80011c4:	08001229 	.word	0x08001229
 80011c8:	080012ed 	.word	0x080012ed
 80011cc:	080012ed 	.word	0x080012ed
 80011d0:	080012ed 	.word	0x080012ed
 80011d4:	0800126b 	.word	0x0800126b
 80011d8:	080012ed 	.word	0x080012ed
 80011dc:	080012ed 	.word	0x080012ed
 80011e0:	080012ed 	.word	0x080012ed
 80011e4:	080012ab 	.word	0x080012ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fa2a 	bl	8001648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0208 	orr.w	r2, r2, #8
 8001202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6999      	ldr	r1, [r3, #24]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	619a      	str	r2, [r3, #24]
      break;
 8001226:	e062      	b.n	80012ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fa70 	bl	8001714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6999      	ldr	r1, [r3, #24]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	021a      	lsls	r2, r3, #8
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	619a      	str	r2, [r3, #24]
      break;
 8001268:	e041      	b.n	80012ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fab9 	bl	80017e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69da      	ldr	r2, [r3, #28]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0208 	orr.w	r2, r2, #8
 8001284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	69da      	ldr	r2, [r3, #28]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0204 	bic.w	r2, r2, #4
 8001294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69d9      	ldr	r1, [r3, #28]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	61da      	str	r2, [r3, #28]
      break;
 80012a8:	e021      	b.n	80012ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fb03 	bl	80018bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	69da      	ldr	r2, [r3, #28]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69d9      	ldr	r1, [r3, #28]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	021a      	lsls	r2, r3, #8
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	61da      	str	r2, [r3, #28]
      break;
 80012ea:	e000      	b.n	80012ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80012ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_TIM_ConfigClockSource+0x18>
 800131c:	2302      	movs	r3, #2
 800131e:	e0a6      	b.n	800146e <HAL_TIM_ConfigClockSource+0x166>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800133e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001346:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b40      	cmp	r3, #64	; 0x40
 8001356:	d067      	beq.n	8001428 <HAL_TIM_ConfigClockSource+0x120>
 8001358:	2b40      	cmp	r3, #64	; 0x40
 800135a:	d80b      	bhi.n	8001374 <HAL_TIM_ConfigClockSource+0x6c>
 800135c:	2b10      	cmp	r3, #16
 800135e:	d073      	beq.n	8001448 <HAL_TIM_ConfigClockSource+0x140>
 8001360:	2b10      	cmp	r3, #16
 8001362:	d802      	bhi.n	800136a <HAL_TIM_ConfigClockSource+0x62>
 8001364:	2b00      	cmp	r3, #0
 8001366:	d06f      	beq.n	8001448 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001368:	e078      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800136a:	2b20      	cmp	r3, #32
 800136c:	d06c      	beq.n	8001448 <HAL_TIM_ConfigClockSource+0x140>
 800136e:	2b30      	cmp	r3, #48	; 0x30
 8001370:	d06a      	beq.n	8001448 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001372:	e073      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001374:	2b70      	cmp	r3, #112	; 0x70
 8001376:	d00d      	beq.n	8001394 <HAL_TIM_ConfigClockSource+0x8c>
 8001378:	2b70      	cmp	r3, #112	; 0x70
 800137a:	d804      	bhi.n	8001386 <HAL_TIM_ConfigClockSource+0x7e>
 800137c:	2b50      	cmp	r3, #80	; 0x50
 800137e:	d033      	beq.n	80013e8 <HAL_TIM_ConfigClockSource+0xe0>
 8001380:	2b60      	cmp	r3, #96	; 0x60
 8001382:	d041      	beq.n	8001408 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001384:	e06a      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138a:	d066      	beq.n	800145a <HAL_TIM_ConfigClockSource+0x152>
 800138c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001390:	d017      	beq.n	80013c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001392:	e063      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6899      	ldr	r1, [r3, #8]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f000 fce2 	bl	8001d6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80013b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	609a      	str	r2, [r3, #8]
      break;
 80013c0:	e04c      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6899      	ldr	r1, [r3, #8]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f000 fccb 	bl	8001d6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013e4:	609a      	str	r2, [r3, #8]
      break;
 80013e6:	e039      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	461a      	mov	r2, r3
 80013f6:	f000 fb8f 	bl	8001b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2150      	movs	r1, #80	; 0x50
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fc99 	bl	8001d38 <TIM_ITRx_SetConfig>
      break;
 8001406:	e029      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	461a      	mov	r2, r3
 8001416:	f000 fbe9 	bl	8001bec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2160      	movs	r1, #96	; 0x60
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fc89 	bl	8001d38 <TIM_ITRx_SetConfig>
      break;
 8001426:	e019      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	461a      	mov	r2, r3
 8001436:	f000 fb6f 	bl	8001b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fc79 	bl	8001d38 <TIM_ITRx_SetConfig>
      break;
 8001446:	e009      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f000 fc70 	bl	8001d38 <TIM_ITRx_SetConfig>
      break;
 8001458:	e000      	b.n	800145c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800145a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_TIM_SlaveConfigSynchro+0x18>
 800148a:	2302      	movs	r3, #2
 800148c:	e031      	b.n	80014f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fa59 	bl	8001958 <TIM_SlaveTimer_SetConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d009      	beq.n	80014c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e018      	b.n	80014f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d831      	bhi.n	8001574 <HAL_TIM_ReadCapturedValue+0x78>
 8001510:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	0800154d 	.word	0x0800154d
 800151c:	08001575 	.word	0x08001575
 8001520:	08001575 	.word	0x08001575
 8001524:	08001575 	.word	0x08001575
 8001528:	08001557 	.word	0x08001557
 800152c:	08001575 	.word	0x08001575
 8001530:	08001575 	.word	0x08001575
 8001534:	08001575 	.word	0x08001575
 8001538:	08001561 	.word	0x08001561
 800153c:	08001575 	.word	0x08001575
 8001540:	08001575 	.word	0x08001575
 8001544:	08001575 	.word	0x08001575
 8001548:	0800156b 	.word	0x0800156b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001552:	60fb      	str	r3, [r7, #12]

      break;
 8001554:	e00f      	b.n	8001576 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	60fb      	str	r3, [r7, #12]

      break;
 800155e:	e00a      	b.n	8001576 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001566:	60fb      	str	r3, [r7, #12]

      break;
 8001568:	e005      	b.n	8001576 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	60fb      	str	r3, [r7, #12]

      break;
 8001572:	e000      	b.n	8001576 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001574:	bf00      	nop
  }

  return tmpreg;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop

08001584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <TIM_Base_SetConfig+0xb8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00b      	beq.n	80015b4 <TIM_Base_SetConfig+0x30>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a2:	d007      	beq.n	80015b4 <TIM_Base_SetConfig+0x30>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a26      	ldr	r2, [pc, #152]	; (8001640 <TIM_Base_SetConfig+0xbc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d003      	beq.n	80015b4 <TIM_Base_SetConfig+0x30>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a25      	ldr	r2, [pc, #148]	; (8001644 <TIM_Base_SetConfig+0xc0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d108      	bne.n	80015c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <TIM_Base_SetConfig+0xb8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00b      	beq.n	80015e6 <TIM_Base_SetConfig+0x62>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d4:	d007      	beq.n	80015e6 <TIM_Base_SetConfig+0x62>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <TIM_Base_SetConfig+0xbc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d003      	beq.n	80015e6 <TIM_Base_SetConfig+0x62>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <TIM_Base_SetConfig+0xc0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d108      	bne.n	80015f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <TIM_Base_SetConfig+0xb8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d103      	bne.n	800162c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	615a      	str	r2, [r3, #20]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40012c00 	.word	0x40012c00
 8001640:	40000400 	.word	0x40000400
 8001644:	40000800 	.word	0x40000800

08001648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	f023 0201 	bic.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f023 0302 	bic.w	r3, r3, #2
 8001690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <TIM_OC1_SetConfig+0xc8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d10c      	bne.n	80016be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f023 0308 	bic.w	r3, r3, #8
 80016aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <TIM_OC1_SetConfig+0xc8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d111      	bne.n	80016ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	621a      	str	r2, [r3, #32]
}
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40012c00 	.word	0x40012c00

08001714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	f023 0210 	bic.w	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f023 0320 	bic.w	r3, r3, #32
 800175e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <TIM_OC2_SetConfig+0xd0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d10d      	bne.n	8001790 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800177a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800178e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <TIM_OC2_SetConfig+0xd0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d113      	bne.n	80017c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800179e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	621a      	str	r2, [r3, #32]
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40012c00 	.word	0x40012c00

080017e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <TIM_OC3_SetConfig+0xd0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10d      	bne.n	8001862 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800184c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <TIM_OC3_SetConfig+0xd0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d113      	bne.n	8001892 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	621a      	str	r2, [r3, #32]
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40012c00 	.word	0x40012c00

080018bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	031b      	lsls	r3, r3, #12
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <TIM_OC4_SetConfig+0x98>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d109      	bne.n	8001930 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	621a      	str	r2, [r3, #32]
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40012c00 	.word	0x40012c00

08001958 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001970:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b30      	cmp	r3, #48	; 0x30
 800199c:	d05c      	beq.n	8001a58 <TIM_SlaveTimer_SetConfig+0x100>
 800199e:	2b30      	cmp	r3, #48	; 0x30
 80019a0:	d806      	bhi.n	80019b0 <TIM_SlaveTimer_SetConfig+0x58>
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d058      	beq.n	8001a58 <TIM_SlaveTimer_SetConfig+0x100>
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d056      	beq.n	8001a58 <TIM_SlaveTimer_SetConfig+0x100>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d054      	beq.n	8001a58 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80019ae:	e054      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80019b0:	2b50      	cmp	r3, #80	; 0x50
 80019b2:	d03d      	beq.n	8001a30 <TIM_SlaveTimer_SetConfig+0xd8>
 80019b4:	2b50      	cmp	r3, #80	; 0x50
 80019b6:	d802      	bhi.n	80019be <TIM_SlaveTimer_SetConfig+0x66>
 80019b8:	2b40      	cmp	r3, #64	; 0x40
 80019ba:	d010      	beq.n	80019de <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80019bc:	e04d      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80019be:	2b60      	cmp	r3, #96	; 0x60
 80019c0:	d040      	beq.n	8001a44 <TIM_SlaveTimer_SetConfig+0xec>
 80019c2:	2b70      	cmp	r3, #112	; 0x70
 80019c4:	d000      	beq.n	80019c8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80019c6:	e048      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68d9      	ldr	r1, [r3, #12]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f000 f9c8 	bl	8001d6c <TIM_ETR_SetConfig>
      break;
 80019dc:	e03d      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d101      	bne.n	80019ea <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e038      	b.n	8001a5c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a10:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	621a      	str	r2, [r3, #32]
      break;
 8001a2e:	e014      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6899      	ldr	r1, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f000 f86b 	bl	8001b18 <TIM_TI1_ConfigInputStage>
      break;
 8001a42:	e00a      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	461a      	mov	r2, r3
 8001a52:	f000 f8cb 	bl	8001bec <TIM_TI2_ConfigInputStage>
      break;
 8001a56:	e000      	b.n	8001a5a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8001a58:	bf00      	nop
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	f023 0201 	bic.w	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <TIM_TI1_SetConfig+0xa8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00b      	beq.n	8001aaa <TIM_TI1_SetConfig+0x46>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d007      	beq.n	8001aaa <TIM_TI1_SetConfig+0x46>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <TIM_TI1_SetConfig+0xac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <TIM_TI1_SetConfig+0x46>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <TIM_TI1_SetConfig+0xb0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <TIM_TI1_SetConfig+0x4a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <TIM_TI1_SetConfig+0x4c>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e003      	b.n	8001ace <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f023 030a 	bic.w	r3, r3, #10
 8001ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f003 030a 	and.w	r3, r3, #10
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	621a      	str	r2, [r3, #32]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800

08001b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	f023 0201 	bic.w	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f023 030a 	bic.w	r3, r3, #10
 8001b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	621a      	str	r2, [r3, #32]
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f023 0210 	bic.w	r2, r3, #16
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001bb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	031b      	lsls	r3, r3, #12
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	621a      	str	r2, [r3, #32]
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f023 0210 	bic.w	r2, r3, #16
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	031b      	lsls	r3, r3, #12
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	621a      	str	r2, [r3, #32]
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	621a      	str	r2, [r3, #32]
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	031b      	lsls	r3, r3, #12
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	031b      	lsls	r3, r3, #12
 8001d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	621a      	str	r2, [r3, #32]
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f043 0307 	orr.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	609a      	str	r2, [r3, #8]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	021a      	lsls	r2, r3, #8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a1a      	ldr	r2, [r3, #32]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	431a      	orrs	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	621a      	str	r2, [r3, #32]
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e032      	b.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e42:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e86:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d013      	beq.n	8001eba <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e96:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001e9a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ea2:	e000      	b.n	8001ea6 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ea4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ea6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f9      	beq.n	8001ea4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001eb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
	...

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ecc:	f7fe f93e 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed0:	f000 f848 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed4:	f000 f9b8 	bl	8002248 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ed8:	f000 f88a 	bl	8001ff0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001edc:	f000 f928 	bl	8002130 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ALowOFF;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <main+0x84>)
 8001ee2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ee6:	611a      	str	r2, [r3, #16]
  BLowOFF;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <main+0x84>)
 8001eea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eee:	611a      	str	r2, [r3, #16]
  CLowOFF;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <main+0x84>)
 8001ef2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ef6:	611a      	str	r2, [r3, #16]
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4815      	ldr	r0, [pc, #84]	; (8001f50 <main+0x88>)
 8001efc:	f7ff f87f 	bl	8000ffe <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001f00:	2104      	movs	r1, #4
 8001f02:	4813      	ldr	r0, [pc, #76]	; (8001f50 <main+0x88>)
 8001f04:	f7ff f87b 	bl	8000ffe <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LED_ON;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <main+0x8c>)
 8001f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0e:	611a      	str	r2, [r3, #16]
	  HAL_Delay(500);
 8001f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f14:	f7fe f97c 	bl	8000210 <HAL_Delay>
	  LED_OFF;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <main+0x8c>)
 8001f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1e:	611a      	str	r2, [r3, #16]
	  HAL_Delay(500);
 8001f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f24:	f7fe f974 	bl	8000210 <HAL_Delay>

	  watch1++;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <main+0x90>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <main+0x90>)
 8001f30:	6013      	str	r3, [r2, #0]
	  watch2+=2;
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <main+0x94>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3302      	adds	r3, #2
 8001f38:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <main+0x94>)
 8001f3a:	6013      	str	r3, [r2, #0]

	  printf("TEST=%u \n",watch1);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <main+0x90>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	; (8001f60 <main+0x98>)
 8001f44:	f000 fc38 	bl	80027b8 <iprintf>
	  LED_ON;
 8001f48:	e7de      	b.n	8001f08 <main+0x40>
 8001f4a:	bf00      	nop
 8001f4c:	40010800 	.word	0x40010800
 8001f50:	200000b0 	.word	0x200000b0
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	200000ac 	.word	0x200000ac
 8001f5c:	200000a4 	.word	0x200000a4
 8001f60:	080035c0 	.word	0x080035c0

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b090      	sub	sp, #64	; 0x40
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	2228      	movs	r2, #40	; 0x28
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fc18 	bl	80027a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f96:	2301      	movs	r3, #1
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fa4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fba6 	bl	8000700 <HAL_RCC_OscConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001fba:	f000 f9d0 	bl	800235e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe11 	bl	8000c00 <HAL_RCC_ClockConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001fe4:	f000 f9bb 	bl	800235e <Error_Handler>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3740      	adds	r7, #64	; 0x40
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b090      	sub	sp, #64	; 0x40
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <MX_TIM1_Init+0x138>)
 800202c:	4a3f      	ldr	r2, [pc, #252]	; (800212c <MX_TIM1_Init+0x13c>)
 800202e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <MX_TIM1_Init+0x138>)
 8002032:	2247      	movs	r2, #71	; 0x47
 8002034:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <MX_TIM1_Init+0x138>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <MX_TIM1_Init+0x138>)
 800203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002042:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b38      	ldr	r3, [pc, #224]	; (8002128 <MX_TIM1_Init+0x138>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <MX_TIM1_Init+0x138>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <MX_TIM1_Init+0x138>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002056:	4834      	ldr	r0, [pc, #208]	; (8002128 <MX_TIM1_Init+0x138>)
 8002058:	f7fe ff3e 	bl	8000ed8 <HAL_TIM_Base_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002062:	f000 f97c 	bl	800235e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800206c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002070:	4619      	mov	r1, r3
 8002072:	482d      	ldr	r0, [pc, #180]	; (8002128 <MX_TIM1_Init+0x138>)
 8002074:	f7ff f948 	bl	8001308 <HAL_TIM_ConfigClockSource>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800207e:	f000 f96e 	bl	800235e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002082:	4829      	ldr	r0, [pc, #164]	; (8002128 <MX_TIM1_Init+0x138>)
 8002084:	f7fe ff87 	bl	8000f96 <HAL_TIM_IC_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800208e:	f000 f966 	bl	800235e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002092:	2304      	movs	r3, #4
 8002094:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002096:	2350      	movs	r3, #80	; 0x50
 8002098:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <MX_TIM1_Init+0x138>)
 80020ae:	f7ff f9e2 	bl	8001476 <HAL_TIM_SlaveConfigSynchro>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80020b8:	f000 f951 	bl	800235e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020c0:	2301      	movs	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4814      	ldr	r0, [pc, #80]	; (8002128 <MX_TIM1_Init+0x138>)
 80020d6:	f7fe ffb4 	bl	8001042 <HAL_TIM_IC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80020e0:	f000 f93d 	bl	800235e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80020e4:	2302      	movs	r3, #2
 80020e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <MX_TIM1_Init+0x138>)
 80020f6:	f7fe ffa4 	bl	8001042 <HAL_TIM_IC_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002100:	f000 f92d 	bl	800235e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_TIM1_Init+0x138>)
 8002112:	f7ff fe6e 	bl	8001df2 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800211c:	f000 f91f 	bl	800235e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3740      	adds	r7, #64	; 0x40
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200000b0 	.word	0x200000b0
 800212c:	40012c00 	.word	0x40012c00

08002130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	615a      	str	r2, [r3, #20]
 800215e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <MX_TIM2_Init+0x114>)
 8002162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <MX_TIM2_Init+0x114>)
 800216a:	2203      	movs	r2, #3
 800216c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <MX_TIM2_Init+0x114>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002174:	4b33      	ldr	r3, [pc, #204]	; (8002244 <MX_TIM2_Init+0x114>)
 8002176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <MX_TIM2_Init+0x114>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <MX_TIM2_Init+0x114>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002188:	482e      	ldr	r0, [pc, #184]	; (8002244 <MX_TIM2_Init+0x114>)
 800218a:	f7fe fea5 	bl	8000ed8 <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002194:	f000 f8e3 	bl	800235e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800219e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4827      	ldr	r0, [pc, #156]	; (8002244 <MX_TIM2_Init+0x114>)
 80021a6:	f7ff f8af 	bl	8001308 <HAL_TIM_ConfigClockSource>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021b0:	f000 f8d5 	bl	800235e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021b4:	4823      	ldr	r0, [pc, #140]	; (8002244 <MX_TIM2_Init+0x114>)
 80021b6:	f7fe feba 	bl	8000f2e <HAL_TIM_PWM_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021c0:	f000 f8cd 	bl	800235e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021cc:	f107 0320 	add.w	r3, r7, #32
 80021d0:	4619      	mov	r1, r3
 80021d2:	481c      	ldr	r0, [pc, #112]	; (8002244 <MX_TIM2_Init+0x114>)
 80021d4:	f7ff fe0d 	bl	8001df2 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80021de:	f000 f8be 	bl	800235e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e2:	2360      	movs	r3, #96	; 0x60
 80021e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4812      	ldr	r0, [pc, #72]	; (8002244 <MX_TIM2_Init+0x114>)
 80021fa:	f7fe ffbf 	bl	800117c <HAL_TIM_PWM_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002204:	f000 f8ab 	bl	800235e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2204      	movs	r2, #4
 800220c:	4619      	mov	r1, r3
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_TIM2_Init+0x114>)
 8002210:	f7fe ffb4 	bl	800117c <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800221a:	f000 f8a0 	bl	800235e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2208      	movs	r2, #8
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM2_Init+0x114>)
 8002226:	f7fe ffa9 	bl	800117c <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002230:	f000 f895 	bl	800235e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM2_Init+0x114>)
 8002236:	f000 f91d 	bl	8002474 <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3738      	adds	r7, #56	; 0x38
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200000f4 	.word	0x200000f4

08002248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <MX_GPIO_Init+0xe8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a33      	ldr	r2, [pc, #204]	; (8002330 <MX_GPIO_Init+0xe8>)
 8002262:	f043 0320 	orr.w	r3, r3, #32
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <MX_GPIO_Init+0xe8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <MX_GPIO_Init+0xe8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <MX_GPIO_Init+0xe8>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <MX_GPIO_Init+0xe8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <MX_GPIO_Init+0xe8>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <MX_GPIO_Init+0xe8>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <MX_GPIO_Init+0xe8>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ALow_Pin|BLow_Pin|CLow_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2138      	movs	r1, #56	; 0x38
 80022a8:	4822      	ldr	r0, [pc, #136]	; (8002334 <MX_GPIO_Init+0xec>)
 80022aa:	f7fe fa11 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b4:	4820      	ldr	r0, [pc, #128]	; (8002338 <MX_GPIO_Init+0xf0>)
 80022b6:	f7fe fa0b 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ALow_Pin BLow_Pin CLow_Pin */
  GPIO_InitStruct.Pin = ALow_Pin|BLow_Pin|CLow_Pin;
 80022ba:	2338      	movs	r3, #56	; 0x38
 80022bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	4619      	mov	r1, r3
 80022d0:	4818      	ldr	r0, [pc, #96]	; (8002334 <MX_GPIO_Init+0xec>)
 80022d2:	f7fe f8a3 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pins : Azero_Pin Bzero_Pin */
  GPIO_InitStruct.Pin = Azero_Pin|Bzero_Pin;
 80022d6:	2303      	movs	r3, #3
 80022d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <MX_GPIO_Init+0xf4>)
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	4619      	mov	r1, r3
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <MX_GPIO_Init+0xf0>)
 80022ea:	f7fe f897 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pin : Czero_Pin */
  GPIO_InitStruct.Pin = Czero_Pin;
 80022ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <MX_GPIO_Init+0xf8>)
 80022f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Czero_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_GPIO_Init+0xf0>)
 8002304:	f7fe f88a 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2302      	movs	r3, #2
 8002318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_GPIO_Init+0xf0>)
 8002322:	f7fe f87b 	bl	800041c <HAL_GPIO_Init>

}
 8002326:	bf00      	nop
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	40010800 	.word	0x40010800
 8002338:	40010c00 	.word	0x40010c00
 800233c:	10310000 	.word	0x10310000
 8002340:	10110000 	.word	0x10110000

08002344 <__io_putchar>:
  for(i=0 ; i<len ; i++)
    ITM_SendChar((*ptr++));
}

void __io_putchar(char value) //implementation of function from syscall.c to be used in _write function to be used in printf
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(value);
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fd92 	bl	8001e7a <ITM_SendChar>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
	...

0800236c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_MspInit+0x5c>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_MspInit+0x5c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6193      	str	r3, [r2, #24]
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_MspInit+0x5c>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_MspInit+0x5c>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_MspInit+0x5c>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_MspInit+0x5c>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_MspInit+0x60>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_MspInit+0x60>)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000

080023d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_TIM_Base_MspInit+0x98>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d125      	bne.n	800243c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 80023f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0318 	add.w	r3, r7, #24
 8002432:	4619      	mov	r1, r3
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <HAL_TIM_Base_MspInit+0xa0>)
 8002436:	f7fd fff1 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800243a:	e010      	b.n	800245e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d10b      	bne.n	800245e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_TIM_Base_MspInit+0x9c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	bf00      	nop
 8002460:	3728      	adds	r7, #40	; 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40010800 	.word	0x40010800

08002474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002492:	d117      	bne.n	80024c4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_TIM_MspPostInit+0x58>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <HAL_TIM_MspPostInit+0x58>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6193      	str	r3, [r2, #24]
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_TIM_MspPostInit+0x58>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = AHigh_Pin|Bhigh_Pin|Chigh_Pin;
 80024ac:	2307      	movs	r3, #7
 80024ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	4804      	ldr	r0, [pc, #16]	; (80024d0 <HAL_TIM_MspPostInit+0x5c>)
 80024c0:	f7fd ffac 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010800 	.word	0x40010800

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <HardFault_Handler+0x4>

080024e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <MemManage_Handler+0x4>

080024ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <BusFault_Handler+0x4>

080024f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <UsageFault_Handler+0x4>

080024f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002520:	f7fd fe5a 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  Pulsewidth_us=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);//numbers 1000-2000 [us] +-3 possible
 8002524:	2104      	movs	r1, #4
 8002526:	4810      	ldr	r0, [pc, #64]	; (8002568 <SysTick_Handler+0x4c>)
 8002528:	f7fe ffe8 	bl	80014fc <HAL_TIM_ReadCapturedValue>
 800252c:	4602      	mov	r2, r0
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <SysTick_Handler+0x50>)
 8002530:	601a      	str	r2, [r3, #0]
  if(Pulsewidth_us<1000)Pulsewidth_us=1000;						//Saturate max Value
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <SysTick_Handler+0x50>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253a:	d204      	bcs.n	8002546 <SysTick_Handler+0x2a>
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <SysTick_Handler+0x50>)
 800253e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e008      	b.n	8002558 <SysTick_Handler+0x3c>
  else if(Pulsewidth_us>2000)Pulsewidth_us=2000;				//Saturate min Value
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <SysTick_Handler+0x50>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800254e:	d903      	bls.n	8002558 <SysTick_Handler+0x3c>
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <SysTick_Handler+0x50>)
 8002552:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002556:	601a      	str	r2, [r3, #0]
  PulsewidthCalc_us=Pulsewidth_us-1000;							//numbers 0-1000 [us]
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <SysTick_Handler+0x50>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002560:	4a03      	ldr	r2, [pc, #12]	; (8002570 <SysTick_Handler+0x54>)
 8002562:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200000b0 	.word	0x200000b0
 800256c:	2000008c 	.word	0x2000008c
 8002570:	20000090 	.word	0x20000090

08002574 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e00a      	b.n	800259c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002586:	f3af 8000 	nop.w
 800258a:	4601      	mov	r1, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60ba      	str	r2, [r7, #8]
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dbf0      	blt.n	8002586 <_read+0x12>
	}

return len;
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e009      	b.n	80025d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff febb 	bl	8002344 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf1      	blt.n	80025c0 <_write+0x12>
		 //ITM_SendChar(*ptr++); //more direct way
	}
	return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_close>:

int _close(int file)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	return -1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260c:	605a      	str	r2, [r3, #4]
	return 0;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <_isatty>:

int _isatty(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	return 1;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
	return 0;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
	...

08002648 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x50>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x16>
		heap_end = &end;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <_sbrk+0x50>)
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <_sbrk+0x54>)
 800265c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <_sbrk+0x50>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <_sbrk+0x50>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	466a      	mov	r2, sp
 800266e:	4293      	cmp	r3, r2
 8002670:	d907      	bls.n	8002682 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002672:	f000 f86f 	bl	8002754 <__errno>
 8002676:	4602      	mov	r2, r0
 8002678:	230c      	movs	r3, #12
 800267a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002680:	e006      	b.n	8002690 <_sbrk+0x48>
	}

	heap_end += incr;
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <_sbrk+0x50>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a03      	ldr	r2, [pc, #12]	; (8002698 <_sbrk+0x50>)
 800268c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000094 	.word	0x20000094
 800269c:	20000140 	.word	0x20000140

080026a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <SystemInit+0x5c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <SystemInit+0x5c>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <SystemInit+0x5c>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4911      	ldr	r1, [pc, #68]	; (80026fc <SystemInit+0x5c>)
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <SystemInit+0x60>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <SystemInit+0x5c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <SystemInit+0x5c>)
 80026c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <SystemInit+0x5c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SystemInit+0x5c>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <SystemInit+0x5c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <SystemInit+0x5c>)
 80026de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80026e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SystemInit+0x5c>)
 80026e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80026ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SystemInit+0x64>)
 80026ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000
 8002700:	f8ff0000 	.word	0xf8ff0000
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800270a:	e003      	b.n	8002714 <LoopCopyDataInit>

0800270c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800270e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002712:	3104      	adds	r1, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002714:	480a      	ldr	r0, [pc, #40]	; (8002740 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800271a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800271c:	d3f6      	bcc.n	800270c <CopyDataInit>
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002720:	e002      	b.n	8002728 <LoopFillZerobss>

08002722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002724:	f842 3b04 	str.w	r3, [r2], #4

08002728 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800272a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800272c:	d3f9      	bcc.n	8002722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800272e:	f7ff ffb7 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002732:	f000 f815 	bl	8002760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002736:	f7ff fbc7 	bl	8001ec8 <main>
  bx lr
 800273a:	4770      	bx	lr
  ldr r3, =_sidata
 800273c:	0800367c 	.word	0x0800367c
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002744:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002748:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800274c:	2000013c 	.word	0x2000013c

08002750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_2_IRQHandler>
	...

08002754 <__errno>:
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <__errno+0x8>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	2000000c 	.word	0x2000000c

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	2500      	movs	r5, #0
 8002764:	4e0c      	ldr	r6, [pc, #48]	; (8002798 <__libc_init_array+0x38>)
 8002766:	4c0d      	ldr	r4, [pc, #52]	; (800279c <__libc_init_array+0x3c>)
 8002768:	1ba4      	subs	r4, r4, r6
 800276a:	10a4      	asrs	r4, r4, #2
 800276c:	42a5      	cmp	r5, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	f000 ff10 	bl	8003594 <_init>
 8002774:	2500      	movs	r5, #0
 8002776:	4e0a      	ldr	r6, [pc, #40]	; (80027a0 <__libc_init_array+0x40>)
 8002778:	4c0a      	ldr	r4, [pc, #40]	; (80027a4 <__libc_init_array+0x44>)
 800277a:	1ba4      	subs	r4, r4, r6
 800277c:	10a4      	asrs	r4, r4, #2
 800277e:	42a5      	cmp	r5, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002788:	4798      	blx	r3
 800278a:	3501      	adds	r5, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002792:	4798      	blx	r3
 8002794:	3501      	adds	r5, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	08003674 	.word	0x08003674
 800279c:	08003674 	.word	0x08003674
 80027a0:	08003674 	.word	0x08003674
 80027a4:	08003678 	.word	0x08003678

080027a8 <memset>:
 80027a8:	4603      	mov	r3, r0
 80027aa:	4402      	add	r2, r0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d100      	bne.n	80027b2 <memset+0xa>
 80027b0:	4770      	bx	lr
 80027b2:	f803 1b01 	strb.w	r1, [r3], #1
 80027b6:	e7f9      	b.n	80027ac <memset+0x4>

080027b8 <iprintf>:
 80027b8:	b40f      	push	{r0, r1, r2, r3}
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <iprintf+0x2c>)
 80027bc:	b513      	push	{r0, r1, r4, lr}
 80027be:	681c      	ldr	r4, [r3, #0]
 80027c0:	b124      	cbz	r4, 80027cc <iprintf+0x14>
 80027c2:	69a3      	ldr	r3, [r4, #24]
 80027c4:	b913      	cbnz	r3, 80027cc <iprintf+0x14>
 80027c6:	4620      	mov	r0, r4
 80027c8:	f000 f84e 	bl	8002868 <__sinit>
 80027cc:	ab05      	add	r3, sp, #20
 80027ce:	9a04      	ldr	r2, [sp, #16]
 80027d0:	68a1      	ldr	r1, [r4, #8]
 80027d2:	4620      	mov	r0, r4
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	f000 f953 	bl	8002a80 <_vfiprintf_r>
 80027da:	b002      	add	sp, #8
 80027dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e0:	b004      	add	sp, #16
 80027e2:	4770      	bx	lr
 80027e4:	2000000c 	.word	0x2000000c

080027e8 <std>:
 80027e8:	2300      	movs	r3, #0
 80027ea:	b510      	push	{r4, lr}
 80027ec:	4604      	mov	r4, r0
 80027ee:	e9c0 3300 	strd	r3, r3, [r0]
 80027f2:	6083      	str	r3, [r0, #8]
 80027f4:	8181      	strh	r1, [r0, #12]
 80027f6:	6643      	str	r3, [r0, #100]	; 0x64
 80027f8:	81c2      	strh	r2, [r0, #14]
 80027fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027fe:	6183      	str	r3, [r0, #24]
 8002800:	4619      	mov	r1, r3
 8002802:	2208      	movs	r2, #8
 8002804:	305c      	adds	r0, #92	; 0x5c
 8002806:	f7ff ffcf 	bl	80027a8 <memset>
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <std+0x38>)
 800280c:	6224      	str	r4, [r4, #32]
 800280e:	6263      	str	r3, [r4, #36]	; 0x24
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <std+0x3c>)
 8002812:	62a3      	str	r3, [r4, #40]	; 0x28
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <std+0x40>)
 8002816:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <std+0x44>)
 800281a:	6323      	str	r3, [r4, #48]	; 0x30
 800281c:	bd10      	pop	{r4, pc}
 800281e:	bf00      	nop
 8002820:	08002fdd 	.word	0x08002fdd
 8002824:	08002fff 	.word	0x08002fff
 8002828:	08003037 	.word	0x08003037
 800282c:	0800305b 	.word	0x0800305b

08002830 <_cleanup_r>:
 8002830:	4901      	ldr	r1, [pc, #4]	; (8002838 <_cleanup_r+0x8>)
 8002832:	f000 b885 	b.w	8002940 <_fwalk_reent>
 8002836:	bf00      	nop
 8002838:	08003335 	.word	0x08003335

0800283c <__sfmoreglue>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	2568      	movs	r5, #104	; 0x68
 8002840:	1e4a      	subs	r2, r1, #1
 8002842:	4355      	muls	r5, r2
 8002844:	460e      	mov	r6, r1
 8002846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800284a:	f000 f897 	bl	800297c <_malloc_r>
 800284e:	4604      	mov	r4, r0
 8002850:	b140      	cbz	r0, 8002864 <__sfmoreglue+0x28>
 8002852:	2100      	movs	r1, #0
 8002854:	e9c0 1600 	strd	r1, r6, [r0]
 8002858:	300c      	adds	r0, #12
 800285a:	60a0      	str	r0, [r4, #8]
 800285c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002860:	f7ff ffa2 	bl	80027a8 <memset>
 8002864:	4620      	mov	r0, r4
 8002866:	bd70      	pop	{r4, r5, r6, pc}

08002868 <__sinit>:
 8002868:	6983      	ldr	r3, [r0, #24]
 800286a:	b510      	push	{r4, lr}
 800286c:	4604      	mov	r4, r0
 800286e:	bb33      	cbnz	r3, 80028be <__sinit+0x56>
 8002870:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002874:	6503      	str	r3, [r0, #80]	; 0x50
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <__sinit+0x58>)
 8002878:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <__sinit+0x5c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6282      	str	r2, [r0, #40]	; 0x28
 800287e:	4298      	cmp	r0, r3
 8002880:	bf04      	itt	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	6183      	streq	r3, [r0, #24]
 8002886:	f000 f81f 	bl	80028c8 <__sfp>
 800288a:	6060      	str	r0, [r4, #4]
 800288c:	4620      	mov	r0, r4
 800288e:	f000 f81b 	bl	80028c8 <__sfp>
 8002892:	60a0      	str	r0, [r4, #8]
 8002894:	4620      	mov	r0, r4
 8002896:	f000 f817 	bl	80028c8 <__sfp>
 800289a:	2200      	movs	r2, #0
 800289c:	60e0      	str	r0, [r4, #12]
 800289e:	2104      	movs	r1, #4
 80028a0:	6860      	ldr	r0, [r4, #4]
 80028a2:	f7ff ffa1 	bl	80027e8 <std>
 80028a6:	2201      	movs	r2, #1
 80028a8:	2109      	movs	r1, #9
 80028aa:	68a0      	ldr	r0, [r4, #8]
 80028ac:	f7ff ff9c 	bl	80027e8 <std>
 80028b0:	2202      	movs	r2, #2
 80028b2:	2112      	movs	r1, #18
 80028b4:	68e0      	ldr	r0, [r4, #12]
 80028b6:	f7ff ff97 	bl	80027e8 <std>
 80028ba:	2301      	movs	r3, #1
 80028bc:	61a3      	str	r3, [r4, #24]
 80028be:	bd10      	pop	{r4, pc}
 80028c0:	080035dc 	.word	0x080035dc
 80028c4:	08002831 	.word	0x08002831

080028c8 <__sfp>:
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <__sfp+0x70>)
 80028cc:	4607      	mov	r7, r0
 80028ce:	681e      	ldr	r6, [r3, #0]
 80028d0:	69b3      	ldr	r3, [r6, #24]
 80028d2:	b913      	cbnz	r3, 80028da <__sfp+0x12>
 80028d4:	4630      	mov	r0, r6
 80028d6:	f7ff ffc7 	bl	8002868 <__sinit>
 80028da:	3648      	adds	r6, #72	; 0x48
 80028dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	d503      	bpl.n	80028ec <__sfp+0x24>
 80028e4:	6833      	ldr	r3, [r6, #0]
 80028e6:	b133      	cbz	r3, 80028f6 <__sfp+0x2e>
 80028e8:	6836      	ldr	r6, [r6, #0]
 80028ea:	e7f7      	b.n	80028dc <__sfp+0x14>
 80028ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028f0:	b16d      	cbz	r5, 800290e <__sfp+0x46>
 80028f2:	3468      	adds	r4, #104	; 0x68
 80028f4:	e7f4      	b.n	80028e0 <__sfp+0x18>
 80028f6:	2104      	movs	r1, #4
 80028f8:	4638      	mov	r0, r7
 80028fa:	f7ff ff9f 	bl	800283c <__sfmoreglue>
 80028fe:	6030      	str	r0, [r6, #0]
 8002900:	2800      	cmp	r0, #0
 8002902:	d1f1      	bne.n	80028e8 <__sfp+0x20>
 8002904:	230c      	movs	r3, #12
 8002906:	4604      	mov	r4, r0
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4620      	mov	r0, r4
 800290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <__sfp+0x74>)
 8002910:	6665      	str	r5, [r4, #100]	; 0x64
 8002912:	e9c4 5500 	strd	r5, r5, [r4]
 8002916:	60a5      	str	r5, [r4, #8]
 8002918:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800291c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002920:	2208      	movs	r2, #8
 8002922:	4629      	mov	r1, r5
 8002924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002928:	f7ff ff3e 	bl	80027a8 <memset>
 800292c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002934:	e7e9      	b.n	800290a <__sfp+0x42>
 8002936:	bf00      	nop
 8002938:	080035dc 	.word	0x080035dc
 800293c:	ffff0001 	.word	0xffff0001

08002940 <_fwalk_reent>:
 8002940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002944:	4680      	mov	r8, r0
 8002946:	4689      	mov	r9, r1
 8002948:	2600      	movs	r6, #0
 800294a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800294e:	b914      	cbnz	r4, 8002956 <_fwalk_reent+0x16>
 8002950:	4630      	mov	r0, r6
 8002952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002956:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800295a:	3f01      	subs	r7, #1
 800295c:	d501      	bpl.n	8002962 <_fwalk_reent+0x22>
 800295e:	6824      	ldr	r4, [r4, #0]
 8002960:	e7f5      	b.n	800294e <_fwalk_reent+0xe>
 8002962:	89ab      	ldrh	r3, [r5, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d907      	bls.n	8002978 <_fwalk_reent+0x38>
 8002968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800296c:	3301      	adds	r3, #1
 800296e:	d003      	beq.n	8002978 <_fwalk_reent+0x38>
 8002970:	4629      	mov	r1, r5
 8002972:	4640      	mov	r0, r8
 8002974:	47c8      	blx	r9
 8002976:	4306      	orrs	r6, r0
 8002978:	3568      	adds	r5, #104	; 0x68
 800297a:	e7ee      	b.n	800295a <_fwalk_reent+0x1a>

0800297c <_malloc_r>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	1ccd      	adds	r5, r1, #3
 8002980:	f025 0503 	bic.w	r5, r5, #3
 8002984:	3508      	adds	r5, #8
 8002986:	2d0c      	cmp	r5, #12
 8002988:	bf38      	it	cc
 800298a:	250c      	movcc	r5, #12
 800298c:	2d00      	cmp	r5, #0
 800298e:	4606      	mov	r6, r0
 8002990:	db01      	blt.n	8002996 <_malloc_r+0x1a>
 8002992:	42a9      	cmp	r1, r5
 8002994:	d903      	bls.n	800299e <_malloc_r+0x22>
 8002996:	230c      	movs	r3, #12
 8002998:	6033      	str	r3, [r6, #0]
 800299a:	2000      	movs	r0, #0
 800299c:	bd70      	pop	{r4, r5, r6, pc}
 800299e:	f000 fd77 	bl	8003490 <__malloc_lock>
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <_malloc_r+0xac>)
 80029a4:	6814      	ldr	r4, [r2, #0]
 80029a6:	4621      	mov	r1, r4
 80029a8:	b991      	cbnz	r1, 80029d0 <_malloc_r+0x54>
 80029aa:	4c20      	ldr	r4, [pc, #128]	; (8002a2c <_malloc_r+0xb0>)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	b91b      	cbnz	r3, 80029b8 <_malloc_r+0x3c>
 80029b0:	4630      	mov	r0, r6
 80029b2:	f000 fb03 	bl	8002fbc <_sbrk_r>
 80029b6:	6020      	str	r0, [r4, #0]
 80029b8:	4629      	mov	r1, r5
 80029ba:	4630      	mov	r0, r6
 80029bc:	f000 fafe 	bl	8002fbc <_sbrk_r>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d124      	bne.n	8002a0e <_malloc_r+0x92>
 80029c4:	230c      	movs	r3, #12
 80029c6:	4630      	mov	r0, r6
 80029c8:	6033      	str	r3, [r6, #0]
 80029ca:	f000 fd62 	bl	8003492 <__malloc_unlock>
 80029ce:	e7e4      	b.n	800299a <_malloc_r+0x1e>
 80029d0:	680b      	ldr	r3, [r1, #0]
 80029d2:	1b5b      	subs	r3, r3, r5
 80029d4:	d418      	bmi.n	8002a08 <_malloc_r+0x8c>
 80029d6:	2b0b      	cmp	r3, #11
 80029d8:	d90f      	bls.n	80029fa <_malloc_r+0x7e>
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	18cc      	adds	r4, r1, r3
 80029de:	50cd      	str	r5, [r1, r3]
 80029e0:	4630      	mov	r0, r6
 80029e2:	f000 fd56 	bl	8003492 <__malloc_unlock>
 80029e6:	f104 000b 	add.w	r0, r4, #11
 80029ea:	1d23      	adds	r3, r4, #4
 80029ec:	f020 0007 	bic.w	r0, r0, #7
 80029f0:	1ac3      	subs	r3, r0, r3
 80029f2:	d0d3      	beq.n	800299c <_malloc_r+0x20>
 80029f4:	425a      	negs	r2, r3
 80029f6:	50e2      	str	r2, [r4, r3]
 80029f8:	e7d0      	b.n	800299c <_malloc_r+0x20>
 80029fa:	684b      	ldr	r3, [r1, #4]
 80029fc:	428c      	cmp	r4, r1
 80029fe:	bf16      	itet	ne
 8002a00:	6063      	strne	r3, [r4, #4]
 8002a02:	6013      	streq	r3, [r2, #0]
 8002a04:	460c      	movne	r4, r1
 8002a06:	e7eb      	b.n	80029e0 <_malloc_r+0x64>
 8002a08:	460c      	mov	r4, r1
 8002a0a:	6849      	ldr	r1, [r1, #4]
 8002a0c:	e7cc      	b.n	80029a8 <_malloc_r+0x2c>
 8002a0e:	1cc4      	adds	r4, r0, #3
 8002a10:	f024 0403 	bic.w	r4, r4, #3
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d005      	beq.n	8002a24 <_malloc_r+0xa8>
 8002a18:	1a21      	subs	r1, r4, r0
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f000 face 	bl	8002fbc <_sbrk_r>
 8002a20:	3001      	adds	r0, #1
 8002a22:	d0cf      	beq.n	80029c4 <_malloc_r+0x48>
 8002a24:	6025      	str	r5, [r4, #0]
 8002a26:	e7db      	b.n	80029e0 <_malloc_r+0x64>
 8002a28:	20000098 	.word	0x20000098
 8002a2c:	2000009c 	.word	0x2000009c

08002a30 <__sfputc_r>:
 8002a30:	6893      	ldr	r3, [r2, #8]
 8002a32:	b410      	push	{r4}
 8002a34:	3b01      	subs	r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	da07      	bge.n	8002a4c <__sfputc_r+0x1c>
 8002a3c:	6994      	ldr	r4, [r2, #24]
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	db01      	blt.n	8002a46 <__sfputc_r+0x16>
 8002a42:	290a      	cmp	r1, #10
 8002a44:	d102      	bne.n	8002a4c <__sfputc_r+0x1c>
 8002a46:	bc10      	pop	{r4}
 8002a48:	f000 bb0c 	b.w	8003064 <__swbuf_r>
 8002a4c:	6813      	ldr	r3, [r2, #0]
 8002a4e:	1c58      	adds	r0, r3, #1
 8002a50:	6010      	str	r0, [r2, #0]
 8002a52:	7019      	strb	r1, [r3, #0]
 8002a54:	4608      	mov	r0, r1
 8002a56:	bc10      	pop	{r4}
 8002a58:	4770      	bx	lr

08002a5a <__sfputs_r>:
 8002a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	460f      	mov	r7, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	18d5      	adds	r5, r2, r3
 8002a64:	42ac      	cmp	r4, r5
 8002a66:	d101      	bne.n	8002a6c <__sfputs_r+0x12>
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e007      	b.n	8002a7c <__sfputs_r+0x22>
 8002a6c:	463a      	mov	r2, r7
 8002a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a72:	4630      	mov	r0, r6
 8002a74:	f7ff ffdc 	bl	8002a30 <__sfputc_r>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d1f3      	bne.n	8002a64 <__sfputs_r+0xa>
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a80 <_vfiprintf_r>:
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	460c      	mov	r4, r1
 8002a86:	b09d      	sub	sp, #116	; 0x74
 8002a88:	4617      	mov	r7, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	b118      	cbz	r0, 8002a98 <_vfiprintf_r+0x18>
 8002a90:	6983      	ldr	r3, [r0, #24]
 8002a92:	b90b      	cbnz	r3, 8002a98 <_vfiprintf_r+0x18>
 8002a94:	f7ff fee8 	bl	8002868 <__sinit>
 8002a98:	4b7c      	ldr	r3, [pc, #496]	; (8002c8c <_vfiprintf_r+0x20c>)
 8002a9a:	429c      	cmp	r4, r3
 8002a9c:	d158      	bne.n	8002b50 <_vfiprintf_r+0xd0>
 8002a9e:	6874      	ldr	r4, [r6, #4]
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	0718      	lsls	r0, r3, #28
 8002aa4:	d55e      	bpl.n	8002b64 <_vfiprintf_r+0xe4>
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <_vfiprintf_r+0xe4>
 8002aac:	2300      	movs	r3, #0
 8002aae:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab6:	2330      	movs	r3, #48	; 0x30
 8002ab8:	f04f 0b01 	mov.w	fp, #1
 8002abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac0:	9503      	str	r5, [sp, #12]
 8002ac2:	46b8      	mov	r8, r7
 8002ac4:	4645      	mov	r5, r8
 8002ac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002aca:	b10b      	cbz	r3, 8002ad0 <_vfiprintf_r+0x50>
 8002acc:	2b25      	cmp	r3, #37	; 0x25
 8002ace:	d154      	bne.n	8002b7a <_vfiprintf_r+0xfa>
 8002ad0:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ad4:	d00b      	beq.n	8002aee <_vfiprintf_r+0x6e>
 8002ad6:	4653      	mov	r3, sl
 8002ad8:	463a      	mov	r2, r7
 8002ada:	4621      	mov	r1, r4
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff ffbc 	bl	8002a5a <__sfputs_r>
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	f000 80c2 	beq.w	8002c6c <_vfiprintf_r+0x1ec>
 8002ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aea:	4453      	add	r3, sl
 8002aec:	9309      	str	r3, [sp, #36]	; 0x24
 8002aee:	f898 3000 	ldrb.w	r3, [r8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80ba 	beq.w	8002c6c <_vfiprintf_r+0x1ec>
 8002af8:	2300      	movs	r3, #0
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	9307      	str	r3, [sp, #28]
 8002b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b0c:	46a8      	mov	r8, r5
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002b14:	485e      	ldr	r0, [pc, #376]	; (8002c90 <_vfiprintf_r+0x210>)
 8002b16:	f000 fcad 	bl	8003474 <memchr>
 8002b1a:	9b04      	ldr	r3, [sp, #16]
 8002b1c:	bb78      	cbnz	r0, 8002b7e <_vfiprintf_r+0xfe>
 8002b1e:	06d9      	lsls	r1, r3, #27
 8002b20:	bf44      	itt	mi
 8002b22:	2220      	movmi	r2, #32
 8002b24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b28:	071a      	lsls	r2, r3, #28
 8002b2a:	bf44      	itt	mi
 8002b2c:	222b      	movmi	r2, #43	; 0x2b
 8002b2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b32:	782a      	ldrb	r2, [r5, #0]
 8002b34:	2a2a      	cmp	r2, #42	; 0x2a
 8002b36:	d02a      	beq.n	8002b8e <_vfiprintf_r+0x10e>
 8002b38:	46a8      	mov	r8, r5
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	250a      	movs	r5, #10
 8002b3e:	9a07      	ldr	r2, [sp, #28]
 8002b40:	4641      	mov	r1, r8
 8002b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b46:	3b30      	subs	r3, #48	; 0x30
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	d969      	bls.n	8002c20 <_vfiprintf_r+0x1a0>
 8002b4c:	b360      	cbz	r0, 8002ba8 <_vfiprintf_r+0x128>
 8002b4e:	e024      	b.n	8002b9a <_vfiprintf_r+0x11a>
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <_vfiprintf_r+0x214>)
 8002b52:	429c      	cmp	r4, r3
 8002b54:	d101      	bne.n	8002b5a <_vfiprintf_r+0xda>
 8002b56:	68b4      	ldr	r4, [r6, #8]
 8002b58:	e7a2      	b.n	8002aa0 <_vfiprintf_r+0x20>
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <_vfiprintf_r+0x218>)
 8002b5c:	429c      	cmp	r4, r3
 8002b5e:	bf08      	it	eq
 8002b60:	68f4      	ldreq	r4, [r6, #12]
 8002b62:	e79d      	b.n	8002aa0 <_vfiprintf_r+0x20>
 8002b64:	4621      	mov	r1, r4
 8002b66:	4630      	mov	r0, r6
 8002b68:	f000 fae0 	bl	800312c <__swsetup_r>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d09d      	beq.n	8002aac <_vfiprintf_r+0x2c>
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b74:	b01d      	add	sp, #116	; 0x74
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b7a:	46a8      	mov	r8, r5
 8002b7c:	e7a2      	b.n	8002ac4 <_vfiprintf_r+0x44>
 8002b7e:	4a44      	ldr	r2, [pc, #272]	; (8002c90 <_vfiprintf_r+0x210>)
 8002b80:	4645      	mov	r5, r8
 8002b82:	1a80      	subs	r0, r0, r2
 8002b84:	fa0b f000 	lsl.w	r0, fp, r0
 8002b88:	4318      	orrs	r0, r3
 8002b8a:	9004      	str	r0, [sp, #16]
 8002b8c:	e7be      	b.n	8002b0c <_vfiprintf_r+0x8c>
 8002b8e:	9a03      	ldr	r2, [sp, #12]
 8002b90:	1d11      	adds	r1, r2, #4
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	9103      	str	r1, [sp, #12]
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	db01      	blt.n	8002b9e <_vfiprintf_r+0x11e>
 8002b9a:	9207      	str	r2, [sp, #28]
 8002b9c:	e004      	b.n	8002ba8 <_vfiprintf_r+0x128>
 8002b9e:	4252      	negs	r2, r2
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	9207      	str	r2, [sp, #28]
 8002ba6:	9304      	str	r3, [sp, #16]
 8002ba8:	f898 3000 	ldrb.w	r3, [r8]
 8002bac:	2b2e      	cmp	r3, #46	; 0x2e
 8002bae:	d10e      	bne.n	8002bce <_vfiprintf_r+0x14e>
 8002bb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb6:	d138      	bne.n	8002c2a <_vfiprintf_r+0x1aa>
 8002bb8:	9b03      	ldr	r3, [sp, #12]
 8002bba:	f108 0802 	add.w	r8, r8, #2
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	9203      	str	r2, [sp, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bfb8      	it	lt
 8002bc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	4d33      	ldr	r5, [pc, #204]	; (8002c9c <_vfiprintf_r+0x21c>)
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f898 1000 	ldrb.w	r1, [r8]
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f000 fc4c 	bl	8003474 <memchr>
 8002bdc:	b140      	cbz	r0, 8002bf0 <_vfiprintf_r+0x170>
 8002bde:	2340      	movs	r3, #64	; 0x40
 8002be0:	1b40      	subs	r0, r0, r5
 8002be2:	fa03 f000 	lsl.w	r0, r3, r0
 8002be6:	9b04      	ldr	r3, [sp, #16]
 8002be8:	f108 0801 	add.w	r8, r8, #1
 8002bec:	4303      	orrs	r3, r0
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	f898 1000 	ldrb.w	r1, [r8]
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	482a      	ldr	r0, [pc, #168]	; (8002ca0 <_vfiprintf_r+0x220>)
 8002bf8:	f108 0701 	add.w	r7, r8, #1
 8002bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c00:	f000 fc38 	bl	8003474 <memchr>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d037      	beq.n	8002c78 <_vfiprintf_r+0x1f8>
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <_vfiprintf_r+0x224>)
 8002c0a:	bb1b      	cbnz	r3, 8002c54 <_vfiprintf_r+0x1d4>
 8002c0c:	9b03      	ldr	r3, [sp, #12]
 8002c0e:	3307      	adds	r3, #7
 8002c10:	f023 0307 	bic.w	r3, r3, #7
 8002c14:	3308      	adds	r3, #8
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c1a:	444b      	add	r3, r9
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	e750      	b.n	8002ac2 <_vfiprintf_r+0x42>
 8002c20:	fb05 3202 	mla	r2, r5, r2, r3
 8002c24:	2001      	movs	r0, #1
 8002c26:	4688      	mov	r8, r1
 8002c28:	e78a      	b.n	8002b40 <_vfiprintf_r+0xc0>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	250a      	movs	r5, #10
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f108 0801 	add.w	r8, r8, #1
 8002c34:	9305      	str	r3, [sp, #20]
 8002c36:	4640      	mov	r0, r8
 8002c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c3c:	3a30      	subs	r2, #48	; 0x30
 8002c3e:	2a09      	cmp	r2, #9
 8002c40:	d903      	bls.n	8002c4a <_vfiprintf_r+0x1ca>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0c3      	beq.n	8002bce <_vfiprintf_r+0x14e>
 8002c46:	9105      	str	r1, [sp, #20]
 8002c48:	e7c1      	b.n	8002bce <_vfiprintf_r+0x14e>
 8002c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4680      	mov	r8, r0
 8002c52:	e7f0      	b.n	8002c36 <_vfiprintf_r+0x1b6>
 8002c54:	ab03      	add	r3, sp, #12
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4622      	mov	r2, r4
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <_vfiprintf_r+0x228>)
 8002c5c:	a904      	add	r1, sp, #16
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f3af 8000 	nop.w
 8002c64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002c68:	4681      	mov	r9, r0
 8002c6a:	d1d5      	bne.n	8002c18 <_vfiprintf_r+0x198>
 8002c6c:	89a3      	ldrh	r3, [r4, #12]
 8002c6e:	065b      	lsls	r3, r3, #25
 8002c70:	f53f af7e 	bmi.w	8002b70 <_vfiprintf_r+0xf0>
 8002c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c76:	e77d      	b.n	8002b74 <_vfiprintf_r+0xf4>
 8002c78:	ab03      	add	r3, sp, #12
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <_vfiprintf_r+0x228>)
 8002c80:	a904      	add	r1, sp, #16
 8002c82:	4630      	mov	r0, r6
 8002c84:	f000 f888 	bl	8002d98 <_printf_i>
 8002c88:	e7ec      	b.n	8002c64 <_vfiprintf_r+0x1e4>
 8002c8a:	bf00      	nop
 8002c8c:	08003600 	.word	0x08003600
 8002c90:	08003640 	.word	0x08003640
 8002c94:	08003620 	.word	0x08003620
 8002c98:	080035e0 	.word	0x080035e0
 8002c9c:	08003646 	.word	0x08003646
 8002ca0:	0800364a 	.word	0x0800364a
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	08002a5b 	.word	0x08002a5b

08002cac <_printf_common>:
 8002cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb0:	4691      	mov	r9, r2
 8002cb2:	461f      	mov	r7, r3
 8002cb4:	688a      	ldr	r2, [r1, #8]
 8002cb6:	690b      	ldr	r3, [r1, #16]
 8002cb8:	4606      	mov	r6, r0
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	bfb8      	it	lt
 8002cbe:	4613      	movlt	r3, r2
 8002cc0:	f8c9 3000 	str.w	r3, [r9]
 8002cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cc8:	460c      	mov	r4, r1
 8002cca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cce:	b112      	cbz	r2, 8002cd6 <_printf_common+0x2a>
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c9 3000 	str.w	r3, [r9]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0699      	lsls	r1, r3, #26
 8002cda:	bf42      	ittt	mi
 8002cdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ce0:	3302      	addmi	r3, #2
 8002ce2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	f015 0506 	ands.w	r5, r5, #6
 8002cec:	d107      	bne.n	8002cfe <_printf_common+0x52>
 8002cee:	f104 0a19 	add.w	sl, r4, #25
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	42ab      	cmp	r3, r5
 8002cfc:	dc29      	bgt.n	8002d52 <_printf_common+0xa6>
 8002cfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	3300      	adds	r3, #0
 8002d06:	bf18      	it	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	0692      	lsls	r2, r2, #26
 8002d0c:	d42e      	bmi.n	8002d6c <_printf_common+0xc0>
 8002d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d12:	4639      	mov	r1, r7
 8002d14:	4630      	mov	r0, r6
 8002d16:	47c0      	blx	r8
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d021      	beq.n	8002d60 <_printf_common+0xb4>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	68e5      	ldr	r5, [r4, #12]
 8002d20:	f003 0306 	and.w	r3, r3, #6
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	bf18      	it	ne
 8002d28:	2500      	movne	r5, #0
 8002d2a:	f8d9 2000 	ldr.w	r2, [r9]
 8002d2e:	f04f 0900 	mov.w	r9, #0
 8002d32:	bf08      	it	eq
 8002d34:	1aad      	subeq	r5, r5, r2
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	bf08      	it	eq
 8002d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bfc4      	itt	gt
 8002d44:	1a9b      	subgt	r3, r3, r2
 8002d46:	18ed      	addgt	r5, r5, r3
 8002d48:	341a      	adds	r4, #26
 8002d4a:	454d      	cmp	r5, r9
 8002d4c:	d11a      	bne.n	8002d84 <_printf_common+0xd8>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e008      	b.n	8002d64 <_printf_common+0xb8>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4652      	mov	r2, sl
 8002d56:	4639      	mov	r1, r7
 8002d58:	4630      	mov	r0, r6
 8002d5a:	47c0      	blx	r8
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d103      	bne.n	8002d68 <_printf_common+0xbc>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7c2      	b.n	8002cf2 <_printf_common+0x46>
 8002d6c:	2030      	movs	r0, #48	; 0x30
 8002d6e:	18e1      	adds	r1, r4, r3
 8002d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7a:	4422      	add	r2, r4
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d82:	e7c4      	b.n	8002d0e <_printf_common+0x62>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4622      	mov	r2, r4
 8002d88:	4639      	mov	r1, r7
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d0e6      	beq.n	8002d60 <_printf_common+0xb4>
 8002d92:	f109 0901 	add.w	r9, r9, #1
 8002d96:	e7d8      	b.n	8002d4a <_printf_common+0x9e>

08002d98 <_printf_i>:
 8002d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002da0:	460c      	mov	r4, r1
 8002da2:	7e09      	ldrb	r1, [r1, #24]
 8002da4:	b085      	sub	sp, #20
 8002da6:	296e      	cmp	r1, #110	; 0x6e
 8002da8:	4617      	mov	r7, r2
 8002daa:	4606      	mov	r6, r0
 8002dac:	4698      	mov	r8, r3
 8002dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002db0:	f000 80b3 	beq.w	8002f1a <_printf_i+0x182>
 8002db4:	d822      	bhi.n	8002dfc <_printf_i+0x64>
 8002db6:	2963      	cmp	r1, #99	; 0x63
 8002db8:	d036      	beq.n	8002e28 <_printf_i+0x90>
 8002dba:	d80a      	bhi.n	8002dd2 <_printf_i+0x3a>
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	f000 80b9 	beq.w	8002f34 <_printf_i+0x19c>
 8002dc2:	2958      	cmp	r1, #88	; 0x58
 8002dc4:	f000 8083 	beq.w	8002ece <_printf_i+0x136>
 8002dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002dd0:	e032      	b.n	8002e38 <_printf_i+0xa0>
 8002dd2:	2964      	cmp	r1, #100	; 0x64
 8002dd4:	d001      	beq.n	8002dda <_printf_i+0x42>
 8002dd6:	2969      	cmp	r1, #105	; 0x69
 8002dd8:	d1f6      	bne.n	8002dc8 <_printf_i+0x30>
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	0605      	lsls	r5, r0, #24
 8002de0:	f103 0104 	add.w	r1, r3, #4
 8002de4:	d52a      	bpl.n	8002e3c <_printf_i+0xa4>
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da03      	bge.n	8002df6 <_printf_i+0x5e>
 8002dee:	222d      	movs	r2, #45	; 0x2d
 8002df0:	425b      	negs	r3, r3
 8002df2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002df6:	486f      	ldr	r0, [pc, #444]	; (8002fb4 <_printf_i+0x21c>)
 8002df8:	220a      	movs	r2, #10
 8002dfa:	e039      	b.n	8002e70 <_printf_i+0xd8>
 8002dfc:	2973      	cmp	r1, #115	; 0x73
 8002dfe:	f000 809d 	beq.w	8002f3c <_printf_i+0x1a4>
 8002e02:	d808      	bhi.n	8002e16 <_printf_i+0x7e>
 8002e04:	296f      	cmp	r1, #111	; 0x6f
 8002e06:	d020      	beq.n	8002e4a <_printf_i+0xb2>
 8002e08:	2970      	cmp	r1, #112	; 0x70
 8002e0a:	d1dd      	bne.n	8002dc8 <_printf_i+0x30>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	6023      	str	r3, [r4, #0]
 8002e14:	e003      	b.n	8002e1e <_printf_i+0x86>
 8002e16:	2975      	cmp	r1, #117	; 0x75
 8002e18:	d017      	beq.n	8002e4a <_printf_i+0xb2>
 8002e1a:	2978      	cmp	r1, #120	; 0x78
 8002e1c:	d1d4      	bne.n	8002dc8 <_printf_i+0x30>
 8002e1e:	2378      	movs	r3, #120	; 0x78
 8002e20:	4865      	ldr	r0, [pc, #404]	; (8002fb8 <_printf_i+0x220>)
 8002e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e26:	e055      	b.n	8002ed4 <_printf_i+0x13c>
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e2e:	1d19      	adds	r1, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6011      	str	r1, [r2, #0]
 8002e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e08c      	b.n	8002f56 <_printf_i+0x1be>
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e42:	6011      	str	r1, [r2, #0]
 8002e44:	bf18      	it	ne
 8002e46:	b21b      	sxthne	r3, r3
 8002e48:	e7cf      	b.n	8002dea <_printf_i+0x52>
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	6825      	ldr	r5, [r4, #0]
 8002e4e:	1d18      	adds	r0, r3, #4
 8002e50:	6010      	str	r0, [r2, #0]
 8002e52:	0628      	lsls	r0, r5, #24
 8002e54:	d501      	bpl.n	8002e5a <_printf_i+0xc2>
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e002      	b.n	8002e60 <_printf_i+0xc8>
 8002e5a:	0668      	lsls	r0, r5, #25
 8002e5c:	d5fb      	bpl.n	8002e56 <_printf_i+0xbe>
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	296f      	cmp	r1, #111	; 0x6f
 8002e62:	bf14      	ite	ne
 8002e64:	220a      	movne	r2, #10
 8002e66:	2208      	moveq	r2, #8
 8002e68:	4852      	ldr	r0, [pc, #328]	; (8002fb4 <_printf_i+0x21c>)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e70:	6865      	ldr	r5, [r4, #4]
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	60a5      	str	r5, [r4, #8]
 8002e76:	f2c0 8095 	blt.w	8002fa4 <_printf_i+0x20c>
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	f021 0104 	bic.w	r1, r1, #4
 8002e80:	6021      	str	r1, [r4, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13d      	bne.n	8002f02 <_printf_i+0x16a>
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	f040 808e 	bne.w	8002fa8 <_printf_i+0x210>
 8002e8c:	4665      	mov	r5, ip
 8002e8e:	2a08      	cmp	r2, #8
 8002e90:	d10b      	bne.n	8002eaa <_printf_i+0x112>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	07db      	lsls	r3, r3, #31
 8002e96:	d508      	bpl.n	8002eaa <_printf_i+0x112>
 8002e98:	6923      	ldr	r3, [r4, #16]
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bfde      	ittt	le
 8002ea0:	2330      	movle	r3, #48	; 0x30
 8002ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ea6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002eaa:	ebac 0305 	sub.w	r3, ip, r5
 8002eae:	6123      	str	r3, [r4, #16]
 8002eb0:	f8cd 8000 	str.w	r8, [sp]
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	aa03      	add	r2, sp, #12
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f7ff fef6 	bl	8002cac <_printf_common>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d14d      	bne.n	8002f60 <_printf_i+0x1c8>
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec8:	b005      	add	sp, #20
 8002eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ece:	4839      	ldr	r0, [pc, #228]	; (8002fb4 <_printf_i+0x21c>)
 8002ed0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	6821      	ldr	r1, [r4, #0]
 8002ed8:	1d1d      	adds	r5, r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6015      	str	r5, [r2, #0]
 8002ede:	060a      	lsls	r2, r1, #24
 8002ee0:	d50b      	bpl.n	8002efa <_printf_i+0x162>
 8002ee2:	07ca      	lsls	r2, r1, #31
 8002ee4:	bf44      	itt	mi
 8002ee6:	f041 0120 	orrmi.w	r1, r1, #32
 8002eea:	6021      	strmi	r1, [r4, #0]
 8002eec:	b91b      	cbnz	r3, 8002ef6 <_printf_i+0x15e>
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	f022 0220 	bic.w	r2, r2, #32
 8002ef4:	6022      	str	r2, [r4, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	e7b7      	b.n	8002e6a <_printf_i+0xd2>
 8002efa:	064d      	lsls	r5, r1, #25
 8002efc:	bf48      	it	mi
 8002efe:	b29b      	uxthmi	r3, r3
 8002f00:	e7ef      	b.n	8002ee2 <_printf_i+0x14a>
 8002f02:	4665      	mov	r5, ip
 8002f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f08:	fb02 3311 	mls	r3, r2, r1, r3
 8002f0c:	5cc3      	ldrb	r3, [r0, r3]
 8002f0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f12:	460b      	mov	r3, r1
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d1f5      	bne.n	8002f04 <_printf_i+0x16c>
 8002f18:	e7b9      	b.n	8002e8e <_printf_i+0xf6>
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1d18      	adds	r0, r3, #4
 8002f20:	6961      	ldr	r1, [r4, #20]
 8002f22:	6010      	str	r0, [r2, #0]
 8002f24:	0628      	lsls	r0, r5, #24
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	d501      	bpl.n	8002f2e <_printf_i+0x196>
 8002f2a:	6019      	str	r1, [r3, #0]
 8002f2c:	e002      	b.n	8002f34 <_printf_i+0x19c>
 8002f2e:	066a      	lsls	r2, r5, #25
 8002f30:	d5fb      	bpl.n	8002f2a <_printf_i+0x192>
 8002f32:	8019      	strh	r1, [r3, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	4665      	mov	r5, ip
 8002f38:	6123      	str	r3, [r4, #16]
 8002f3a:	e7b9      	b.n	8002eb0 <_printf_i+0x118>
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	1d19      	adds	r1, r3, #4
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	681d      	ldr	r5, [r3, #0]
 8002f44:	6862      	ldr	r2, [r4, #4]
 8002f46:	2100      	movs	r1, #0
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 fa93 	bl	8003474 <memchr>
 8002f4e:	b108      	cbz	r0, 8002f54 <_printf_i+0x1bc>
 8002f50:	1b40      	subs	r0, r0, r5
 8002f52:	6060      	str	r0, [r4, #4]
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	6123      	str	r3, [r4, #16]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5e:	e7a7      	b.n	8002eb0 <_printf_i+0x118>
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	462a      	mov	r2, r5
 8002f64:	4639      	mov	r1, r7
 8002f66:	4630      	mov	r0, r6
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d0aa      	beq.n	8002ec4 <_printf_i+0x12c>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	079b      	lsls	r3, r3, #30
 8002f72:	d413      	bmi.n	8002f9c <_printf_i+0x204>
 8002f74:	68e0      	ldr	r0, [r4, #12]
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	4298      	cmp	r0, r3
 8002f7a:	bfb8      	it	lt
 8002f7c:	4618      	movlt	r0, r3
 8002f7e:	e7a3      	b.n	8002ec8 <_printf_i+0x130>
 8002f80:	2301      	movs	r3, #1
 8002f82:	464a      	mov	r2, r9
 8002f84:	4639      	mov	r1, r7
 8002f86:	4630      	mov	r0, r6
 8002f88:	47c0      	blx	r8
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d09a      	beq.n	8002ec4 <_printf_i+0x12c>
 8002f8e:	3501      	adds	r5, #1
 8002f90:	68e3      	ldr	r3, [r4, #12]
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	42ab      	cmp	r3, r5
 8002f98:	dcf2      	bgt.n	8002f80 <_printf_i+0x1e8>
 8002f9a:	e7eb      	b.n	8002f74 <_printf_i+0x1dc>
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	f104 0919 	add.w	r9, r4, #25
 8002fa2:	e7f5      	b.n	8002f90 <_printf_i+0x1f8>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ac      	bne.n	8002f02 <_printf_i+0x16a>
 8002fa8:	7803      	ldrb	r3, [r0, #0]
 8002faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb2:	e76c      	b.n	8002e8e <_printf_i+0xf6>
 8002fb4:	08003651 	.word	0x08003651
 8002fb8:	08003662 	.word	0x08003662

08002fbc <_sbrk_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	4c05      	ldr	r4, [pc, #20]	; (8002fd8 <_sbrk_r+0x1c>)
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	f7ff fb3e 	bl	8002648 <_sbrk>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_sbrk_r+0x1a>
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_sbrk_r+0x1a>
 8002fd4:	602b      	str	r3, [r5, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	20000138 	.word	0x20000138

08002fdc <__sread>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	460c      	mov	r4, r1
 8002fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe4:	f000 faa2 	bl	800352c <_read_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	bfab      	itete	ge
 8002fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fee:	89a3      	ldrhlt	r3, [r4, #12]
 8002ff0:	181b      	addge	r3, r3, r0
 8002ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ff6:	bfac      	ite	ge
 8002ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ffa:	81a3      	strhlt	r3, [r4, #12]
 8002ffc:	bd10      	pop	{r4, pc}

08002ffe <__swrite>:
 8002ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	461f      	mov	r7, r3
 8003004:	898b      	ldrh	r3, [r1, #12]
 8003006:	4605      	mov	r5, r0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	460c      	mov	r4, r1
 800300c:	4616      	mov	r6, r2
 800300e:	d505      	bpl.n	800301c <__swrite+0x1e>
 8003010:	2302      	movs	r3, #2
 8003012:	2200      	movs	r2, #0
 8003014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003018:	f000 f9b6 	bl	8003388 <_lseek_r>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	4632      	mov	r2, r6
 8003020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800302a:	463b      	mov	r3, r7
 800302c:	4628      	mov	r0, r5
 800302e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003032:	f000 b869 	b.w	8003108 <_write_r>

08003036 <__sseek>:
 8003036:	b510      	push	{r4, lr}
 8003038:	460c      	mov	r4, r1
 800303a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303e:	f000 f9a3 	bl	8003388 <_lseek_r>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	bf15      	itete	ne
 8003048:	6560      	strne	r0, [r4, #84]	; 0x54
 800304a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800304e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003052:	81a3      	strheq	r3, [r4, #12]
 8003054:	bf18      	it	ne
 8003056:	81a3      	strhne	r3, [r4, #12]
 8003058:	bd10      	pop	{r4, pc}

0800305a <__sclose>:
 800305a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305e:	f000 b8d3 	b.w	8003208 <_close_r>
	...

08003064 <__swbuf_r>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	460e      	mov	r6, r1
 8003068:	4614      	mov	r4, r2
 800306a:	4605      	mov	r5, r0
 800306c:	b118      	cbz	r0, 8003076 <__swbuf_r+0x12>
 800306e:	6983      	ldr	r3, [r0, #24]
 8003070:	b90b      	cbnz	r3, 8003076 <__swbuf_r+0x12>
 8003072:	f7ff fbf9 	bl	8002868 <__sinit>
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <__swbuf_r+0x98>)
 8003078:	429c      	cmp	r4, r3
 800307a:	d12a      	bne.n	80030d2 <__swbuf_r+0x6e>
 800307c:	686c      	ldr	r4, [r5, #4]
 800307e:	69a3      	ldr	r3, [r4, #24]
 8003080:	60a3      	str	r3, [r4, #8]
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	071a      	lsls	r2, r3, #28
 8003086:	d52e      	bpl.n	80030e6 <__swbuf_r+0x82>
 8003088:	6923      	ldr	r3, [r4, #16]
 800308a:	b363      	cbz	r3, 80030e6 <__swbuf_r+0x82>
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	6820      	ldr	r0, [r4, #0]
 8003090:	b2f6      	uxtb	r6, r6
 8003092:	1ac0      	subs	r0, r0, r3
 8003094:	6963      	ldr	r3, [r4, #20]
 8003096:	4637      	mov	r7, r6
 8003098:	4283      	cmp	r3, r0
 800309a:	dc04      	bgt.n	80030a6 <__swbuf_r+0x42>
 800309c:	4621      	mov	r1, r4
 800309e:	4628      	mov	r0, r5
 80030a0:	f000 f948 	bl	8003334 <_fflush_r>
 80030a4:	bb28      	cbnz	r0, 80030f2 <__swbuf_r+0x8e>
 80030a6:	68a3      	ldr	r3, [r4, #8]
 80030a8:	3001      	adds	r0, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60a3      	str	r3, [r4, #8]
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	6022      	str	r2, [r4, #0]
 80030b4:	701e      	strb	r6, [r3, #0]
 80030b6:	6963      	ldr	r3, [r4, #20]
 80030b8:	4283      	cmp	r3, r0
 80030ba:	d004      	beq.n	80030c6 <__swbuf_r+0x62>
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	07db      	lsls	r3, r3, #31
 80030c0:	d519      	bpl.n	80030f6 <__swbuf_r+0x92>
 80030c2:	2e0a      	cmp	r6, #10
 80030c4:	d117      	bne.n	80030f6 <__swbuf_r+0x92>
 80030c6:	4621      	mov	r1, r4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 f933 	bl	8003334 <_fflush_r>
 80030ce:	b190      	cbz	r0, 80030f6 <__swbuf_r+0x92>
 80030d0:	e00f      	b.n	80030f2 <__swbuf_r+0x8e>
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <__swbuf_r+0x9c>)
 80030d4:	429c      	cmp	r4, r3
 80030d6:	d101      	bne.n	80030dc <__swbuf_r+0x78>
 80030d8:	68ac      	ldr	r4, [r5, #8]
 80030da:	e7d0      	b.n	800307e <__swbuf_r+0x1a>
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <__swbuf_r+0xa0>)
 80030de:	429c      	cmp	r4, r3
 80030e0:	bf08      	it	eq
 80030e2:	68ec      	ldreq	r4, [r5, #12]
 80030e4:	e7cb      	b.n	800307e <__swbuf_r+0x1a>
 80030e6:	4621      	mov	r1, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	f000 f81f 	bl	800312c <__swsetup_r>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d0cc      	beq.n	800308c <__swbuf_r+0x28>
 80030f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80030f6:	4638      	mov	r0, r7
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	08003600 	.word	0x08003600
 8003100:	08003620 	.word	0x08003620
 8003104:	080035e0 	.word	0x080035e0

08003108 <_write_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4605      	mov	r5, r0
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	2200      	movs	r2, #0
 8003112:	4c05      	ldr	r4, [pc, #20]	; (8003128 <_write_r+0x20>)
 8003114:	6022      	str	r2, [r4, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	f7ff fa49 	bl	80025ae <_write>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d102      	bne.n	8003126 <_write_r+0x1e>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	b103      	cbz	r3, 8003126 <_write_r+0x1e>
 8003124:	602b      	str	r3, [r5, #0]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	20000138 	.word	0x20000138

0800312c <__swsetup_r>:
 800312c:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <__swsetup_r+0xcc>)
 800312e:	b570      	push	{r4, r5, r6, lr}
 8003130:	681d      	ldr	r5, [r3, #0]
 8003132:	4606      	mov	r6, r0
 8003134:	460c      	mov	r4, r1
 8003136:	b125      	cbz	r5, 8003142 <__swsetup_r+0x16>
 8003138:	69ab      	ldr	r3, [r5, #24]
 800313a:	b913      	cbnz	r3, 8003142 <__swsetup_r+0x16>
 800313c:	4628      	mov	r0, r5
 800313e:	f7ff fb93 	bl	8002868 <__sinit>
 8003142:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <__swsetup_r+0xd0>)
 8003144:	429c      	cmp	r4, r3
 8003146:	d10f      	bne.n	8003168 <__swsetup_r+0x3c>
 8003148:	686c      	ldr	r4, [r5, #4]
 800314a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800314e:	b29a      	uxth	r2, r3
 8003150:	0715      	lsls	r5, r2, #28
 8003152:	d42c      	bmi.n	80031ae <__swsetup_r+0x82>
 8003154:	06d0      	lsls	r0, r2, #27
 8003156:	d411      	bmi.n	800317c <__swsetup_r+0x50>
 8003158:	2209      	movs	r2, #9
 800315a:	6032      	str	r2, [r6, #0]
 800315c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003160:	81a3      	strh	r3, [r4, #12]
 8003162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003166:	e03e      	b.n	80031e6 <__swsetup_r+0xba>
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <__swsetup_r+0xd4>)
 800316a:	429c      	cmp	r4, r3
 800316c:	d101      	bne.n	8003172 <__swsetup_r+0x46>
 800316e:	68ac      	ldr	r4, [r5, #8]
 8003170:	e7eb      	b.n	800314a <__swsetup_r+0x1e>
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <__swsetup_r+0xd8>)
 8003174:	429c      	cmp	r4, r3
 8003176:	bf08      	it	eq
 8003178:	68ec      	ldreq	r4, [r5, #12]
 800317a:	e7e6      	b.n	800314a <__swsetup_r+0x1e>
 800317c:	0751      	lsls	r1, r2, #29
 800317e:	d512      	bpl.n	80031a6 <__swsetup_r+0x7a>
 8003180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003182:	b141      	cbz	r1, 8003196 <__swsetup_r+0x6a>
 8003184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003188:	4299      	cmp	r1, r3
 800318a:	d002      	beq.n	8003192 <__swsetup_r+0x66>
 800318c:	4630      	mov	r0, r6
 800318e:	f000 f981 	bl	8003494 <_free_r>
 8003192:	2300      	movs	r3, #0
 8003194:	6363      	str	r3, [r4, #52]	; 0x34
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	6063      	str	r3, [r4, #4]
 80031a2:	6923      	ldr	r3, [r4, #16]
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	b94b      	cbnz	r3, 80031c6 <__swsetup_r+0x9a>
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d003      	beq.n	80031c6 <__swsetup_r+0x9a>
 80031be:	4621      	mov	r1, r4
 80031c0:	4630      	mov	r0, r6
 80031c2:	f000 f917 	bl	80033f4 <__smakebuf_r>
 80031c6:	89a2      	ldrh	r2, [r4, #12]
 80031c8:	f012 0301 	ands.w	r3, r2, #1
 80031cc:	d00c      	beq.n	80031e8 <__swsetup_r+0xbc>
 80031ce:	2300      	movs	r3, #0
 80031d0:	60a3      	str	r3, [r4, #8]
 80031d2:	6963      	ldr	r3, [r4, #20]
 80031d4:	425b      	negs	r3, r3
 80031d6:	61a3      	str	r3, [r4, #24]
 80031d8:	6923      	ldr	r3, [r4, #16]
 80031da:	b953      	cbnz	r3, 80031f2 <__swsetup_r+0xc6>
 80031dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80031e4:	d1ba      	bne.n	800315c <__swsetup_r+0x30>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	0792      	lsls	r2, r2, #30
 80031ea:	bf58      	it	pl
 80031ec:	6963      	ldrpl	r3, [r4, #20]
 80031ee:	60a3      	str	r3, [r4, #8]
 80031f0:	e7f2      	b.n	80031d8 <__swsetup_r+0xac>
 80031f2:	2000      	movs	r0, #0
 80031f4:	e7f7      	b.n	80031e6 <__swsetup_r+0xba>
 80031f6:	bf00      	nop
 80031f8:	2000000c 	.word	0x2000000c
 80031fc:	08003600 	.word	0x08003600
 8003200:	08003620 	.word	0x08003620
 8003204:	080035e0 	.word	0x080035e0

08003208 <_close_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	2300      	movs	r3, #0
 800320c:	4c05      	ldr	r4, [pc, #20]	; (8003224 <_close_r+0x1c>)
 800320e:	4605      	mov	r5, r0
 8003210:	4608      	mov	r0, r1
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	f7ff f9e7 	bl	80025e6 <_close>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d102      	bne.n	8003222 <_close_r+0x1a>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	b103      	cbz	r3, 8003222 <_close_r+0x1a>
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	20000138 	.word	0x20000138

08003228 <__sflush_r>:
 8003228:	898a      	ldrh	r2, [r1, #12]
 800322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322e:	4605      	mov	r5, r0
 8003230:	0710      	lsls	r0, r2, #28
 8003232:	460c      	mov	r4, r1
 8003234:	d458      	bmi.n	80032e8 <__sflush_r+0xc0>
 8003236:	684b      	ldr	r3, [r1, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	dc05      	bgt.n	8003248 <__sflush_r+0x20>
 800323c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	dc02      	bgt.n	8003248 <__sflush_r+0x20>
 8003242:	2000      	movs	r0, #0
 8003244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800324a:	2e00      	cmp	r6, #0
 800324c:	d0f9      	beq.n	8003242 <__sflush_r+0x1a>
 800324e:	2300      	movs	r3, #0
 8003250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003254:	682f      	ldr	r7, [r5, #0]
 8003256:	6a21      	ldr	r1, [r4, #32]
 8003258:	602b      	str	r3, [r5, #0]
 800325a:	d032      	beq.n	80032c2 <__sflush_r+0x9a>
 800325c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	075a      	lsls	r2, r3, #29
 8003262:	d505      	bpl.n	8003270 <__sflush_r+0x48>
 8003264:	6863      	ldr	r3, [r4, #4]
 8003266:	1ac0      	subs	r0, r0, r3
 8003268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800326a:	b10b      	cbz	r3, 8003270 <__sflush_r+0x48>
 800326c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800326e:	1ac0      	subs	r0, r0, r3
 8003270:	2300      	movs	r3, #0
 8003272:	4602      	mov	r2, r0
 8003274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003276:	6a21      	ldr	r1, [r4, #32]
 8003278:	4628      	mov	r0, r5
 800327a:	47b0      	blx	r6
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	d106      	bne.n	8003290 <__sflush_r+0x68>
 8003282:	6829      	ldr	r1, [r5, #0]
 8003284:	291d      	cmp	r1, #29
 8003286:	d848      	bhi.n	800331a <__sflush_r+0xf2>
 8003288:	4a29      	ldr	r2, [pc, #164]	; (8003330 <__sflush_r+0x108>)
 800328a:	40ca      	lsrs	r2, r1
 800328c:	07d6      	lsls	r6, r2, #31
 800328e:	d544      	bpl.n	800331a <__sflush_r+0xf2>
 8003290:	2200      	movs	r2, #0
 8003292:	6062      	str	r2, [r4, #4]
 8003294:	6922      	ldr	r2, [r4, #16]
 8003296:	04d9      	lsls	r1, r3, #19
 8003298:	6022      	str	r2, [r4, #0]
 800329a:	d504      	bpl.n	80032a6 <__sflush_r+0x7e>
 800329c:	1c42      	adds	r2, r0, #1
 800329e:	d101      	bne.n	80032a4 <__sflush_r+0x7c>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	b903      	cbnz	r3, 80032a6 <__sflush_r+0x7e>
 80032a4:	6560      	str	r0, [r4, #84]	; 0x54
 80032a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a8:	602f      	str	r7, [r5, #0]
 80032aa:	2900      	cmp	r1, #0
 80032ac:	d0c9      	beq.n	8003242 <__sflush_r+0x1a>
 80032ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b2:	4299      	cmp	r1, r3
 80032b4:	d002      	beq.n	80032bc <__sflush_r+0x94>
 80032b6:	4628      	mov	r0, r5
 80032b8:	f000 f8ec 	bl	8003494 <_free_r>
 80032bc:	2000      	movs	r0, #0
 80032be:	6360      	str	r0, [r4, #52]	; 0x34
 80032c0:	e7c0      	b.n	8003244 <__sflush_r+0x1c>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b0      	blx	r6
 80032c8:	1c41      	adds	r1, r0, #1
 80032ca:	d1c8      	bne.n	800325e <__sflush_r+0x36>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0c5      	beq.n	800325e <__sflush_r+0x36>
 80032d2:	2b1d      	cmp	r3, #29
 80032d4:	d001      	beq.n	80032da <__sflush_r+0xb2>
 80032d6:	2b16      	cmp	r3, #22
 80032d8:	d101      	bne.n	80032de <__sflush_r+0xb6>
 80032da:	602f      	str	r7, [r5, #0]
 80032dc:	e7b1      	b.n	8003242 <__sflush_r+0x1a>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	e7ad      	b.n	8003244 <__sflush_r+0x1c>
 80032e8:	690f      	ldr	r7, [r1, #16]
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d0a9      	beq.n	8003242 <__sflush_r+0x1a>
 80032ee:	0793      	lsls	r3, r2, #30
 80032f0:	bf18      	it	ne
 80032f2:	2300      	movne	r3, #0
 80032f4:	680e      	ldr	r6, [r1, #0]
 80032f6:	bf08      	it	eq
 80032f8:	694b      	ldreq	r3, [r1, #20]
 80032fa:	eba6 0807 	sub.w	r8, r6, r7
 80032fe:	600f      	str	r7, [r1, #0]
 8003300:	608b      	str	r3, [r1, #8]
 8003302:	f1b8 0f00 	cmp.w	r8, #0
 8003306:	dd9c      	ble.n	8003242 <__sflush_r+0x1a>
 8003308:	4643      	mov	r3, r8
 800330a:	463a      	mov	r2, r7
 800330c:	6a21      	ldr	r1, [r4, #32]
 800330e:	4628      	mov	r0, r5
 8003310:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003312:	47b0      	blx	r6
 8003314:	2800      	cmp	r0, #0
 8003316:	dc06      	bgt.n	8003326 <__sflush_r+0xfe>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331e:	81a3      	strh	r3, [r4, #12]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003324:	e78e      	b.n	8003244 <__sflush_r+0x1c>
 8003326:	4407      	add	r7, r0
 8003328:	eba8 0800 	sub.w	r8, r8, r0
 800332c:	e7e9      	b.n	8003302 <__sflush_r+0xda>
 800332e:	bf00      	nop
 8003330:	20400001 	.word	0x20400001

08003334 <_fflush_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	690b      	ldr	r3, [r1, #16]
 8003338:	4605      	mov	r5, r0
 800333a:	460c      	mov	r4, r1
 800333c:	b1db      	cbz	r3, 8003376 <_fflush_r+0x42>
 800333e:	b118      	cbz	r0, 8003348 <_fflush_r+0x14>
 8003340:	6983      	ldr	r3, [r0, #24]
 8003342:	b90b      	cbnz	r3, 8003348 <_fflush_r+0x14>
 8003344:	f7ff fa90 	bl	8002868 <__sinit>
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <_fflush_r+0x48>)
 800334a:	429c      	cmp	r4, r3
 800334c:	d109      	bne.n	8003362 <_fflush_r+0x2e>
 800334e:	686c      	ldr	r4, [r5, #4]
 8003350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003354:	b17b      	cbz	r3, 8003376 <_fflush_r+0x42>
 8003356:	4621      	mov	r1, r4
 8003358:	4628      	mov	r0, r5
 800335a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800335e:	f7ff bf63 	b.w	8003228 <__sflush_r>
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_fflush_r+0x4c>)
 8003364:	429c      	cmp	r4, r3
 8003366:	d101      	bne.n	800336c <_fflush_r+0x38>
 8003368:	68ac      	ldr	r4, [r5, #8]
 800336a:	e7f1      	b.n	8003350 <_fflush_r+0x1c>
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <_fflush_r+0x50>)
 800336e:	429c      	cmp	r4, r3
 8003370:	bf08      	it	eq
 8003372:	68ec      	ldreq	r4, [r5, #12]
 8003374:	e7ec      	b.n	8003350 <_fflush_r+0x1c>
 8003376:	2000      	movs	r0, #0
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	08003600 	.word	0x08003600
 8003380:	08003620 	.word	0x08003620
 8003384:	080035e0 	.word	0x080035e0

08003388 <_lseek_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4605      	mov	r5, r0
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	2200      	movs	r2, #0
 8003392:	4c05      	ldr	r4, [pc, #20]	; (80033a8 <_lseek_r+0x20>)
 8003394:	6022      	str	r2, [r4, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	f7ff f949 	bl	800262e <_lseek>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	d102      	bne.n	80033a6 <_lseek_r+0x1e>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	b103      	cbz	r3, 80033a6 <_lseek_r+0x1e>
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	20000138 	.word	0x20000138

080033ac <__swhatbuf_r>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	460e      	mov	r6, r1
 80033b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b4:	b096      	sub	sp, #88	; 0x58
 80033b6:	2900      	cmp	r1, #0
 80033b8:	4614      	mov	r4, r2
 80033ba:	461d      	mov	r5, r3
 80033bc:	da07      	bge.n	80033ce <__swhatbuf_r+0x22>
 80033be:	2300      	movs	r3, #0
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	89b3      	ldrh	r3, [r6, #12]
 80033c4:	061a      	lsls	r2, r3, #24
 80033c6:	d410      	bmi.n	80033ea <__swhatbuf_r+0x3e>
 80033c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033cc:	e00e      	b.n	80033ec <__swhatbuf_r+0x40>
 80033ce:	466a      	mov	r2, sp
 80033d0:	f000 f8be 	bl	8003550 <_fstat_r>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	dbf2      	blt.n	80033be <__swhatbuf_r+0x12>
 80033d8:	9a01      	ldr	r2, [sp, #4]
 80033da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033e2:	425a      	negs	r2, r3
 80033e4:	415a      	adcs	r2, r3
 80033e6:	602a      	str	r2, [r5, #0]
 80033e8:	e7ee      	b.n	80033c8 <__swhatbuf_r+0x1c>
 80033ea:	2340      	movs	r3, #64	; 0x40
 80033ec:	2000      	movs	r0, #0
 80033ee:	6023      	str	r3, [r4, #0]
 80033f0:	b016      	add	sp, #88	; 0x58
 80033f2:	bd70      	pop	{r4, r5, r6, pc}

080033f4 <__smakebuf_r>:
 80033f4:	898b      	ldrh	r3, [r1, #12]
 80033f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033f8:	079d      	lsls	r5, r3, #30
 80033fa:	4606      	mov	r6, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	d507      	bpl.n	8003410 <__smakebuf_r+0x1c>
 8003400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	2301      	movs	r3, #1
 800340a:	6163      	str	r3, [r4, #20]
 800340c:	b002      	add	sp, #8
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	ab01      	add	r3, sp, #4
 8003412:	466a      	mov	r2, sp
 8003414:	f7ff ffca 	bl	80033ac <__swhatbuf_r>
 8003418:	9900      	ldr	r1, [sp, #0]
 800341a:	4605      	mov	r5, r0
 800341c:	4630      	mov	r0, r6
 800341e:	f7ff faad 	bl	800297c <_malloc_r>
 8003422:	b948      	cbnz	r0, 8003438 <__smakebuf_r+0x44>
 8003424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003428:	059a      	lsls	r2, r3, #22
 800342a:	d4ef      	bmi.n	800340c <__smakebuf_r+0x18>
 800342c:	f023 0303 	bic.w	r3, r3, #3
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	e7e3      	b.n	8003400 <__smakebuf_r+0xc>
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <__smakebuf_r+0x7c>)
 800343a:	62b3      	str	r3, [r6, #40]	; 0x28
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	6020      	str	r0, [r4, #0]
 8003440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	9b00      	ldr	r3, [sp, #0]
 8003448:	6120      	str	r0, [r4, #16]
 800344a:	6163      	str	r3, [r4, #20]
 800344c:	9b01      	ldr	r3, [sp, #4]
 800344e:	b15b      	cbz	r3, 8003468 <__smakebuf_r+0x74>
 8003450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003454:	4630      	mov	r0, r6
 8003456:	f000 f88d 	bl	8003574 <_isatty_r>
 800345a:	b128      	cbz	r0, 8003468 <__smakebuf_r+0x74>
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	81a3      	strh	r3, [r4, #12]
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	431d      	orrs	r5, r3
 800346c:	81a5      	strh	r5, [r4, #12]
 800346e:	e7cd      	b.n	800340c <__smakebuf_r+0x18>
 8003470:	08002831 	.word	0x08002831

08003474 <memchr>:
 8003474:	b510      	push	{r4, lr}
 8003476:	b2c9      	uxtb	r1, r1
 8003478:	4402      	add	r2, r0
 800347a:	4290      	cmp	r0, r2
 800347c:	4603      	mov	r3, r0
 800347e:	d101      	bne.n	8003484 <memchr+0x10>
 8003480:	2300      	movs	r3, #0
 8003482:	e003      	b.n	800348c <memchr+0x18>
 8003484:	781c      	ldrb	r4, [r3, #0]
 8003486:	3001      	adds	r0, #1
 8003488:	428c      	cmp	r4, r1
 800348a:	d1f6      	bne.n	800347a <memchr+0x6>
 800348c:	4618      	mov	r0, r3
 800348e:	bd10      	pop	{r4, pc}

08003490 <__malloc_lock>:
 8003490:	4770      	bx	lr

08003492 <__malloc_unlock>:
 8003492:	4770      	bx	lr

08003494 <_free_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4605      	mov	r5, r0
 8003498:	2900      	cmp	r1, #0
 800349a:	d043      	beq.n	8003524 <_free_r+0x90>
 800349c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a0:	1f0c      	subs	r4, r1, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bfb8      	it	lt
 80034a6:	18e4      	addlt	r4, r4, r3
 80034a8:	f7ff fff2 	bl	8003490 <__malloc_lock>
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <_free_r+0x94>)
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	4610      	mov	r0, r2
 80034b2:	b933      	cbnz	r3, 80034c2 <_free_r+0x2e>
 80034b4:	6063      	str	r3, [r4, #4]
 80034b6:	6014      	str	r4, [r2, #0]
 80034b8:	4628      	mov	r0, r5
 80034ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034be:	f7ff bfe8 	b.w	8003492 <__malloc_unlock>
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	d90b      	bls.n	80034de <_free_r+0x4a>
 80034c6:	6821      	ldr	r1, [r4, #0]
 80034c8:	1862      	adds	r2, r4, r1
 80034ca:	4293      	cmp	r3, r2
 80034cc:	bf01      	itttt	eq
 80034ce:	681a      	ldreq	r2, [r3, #0]
 80034d0:	685b      	ldreq	r3, [r3, #4]
 80034d2:	1852      	addeq	r2, r2, r1
 80034d4:	6022      	streq	r2, [r4, #0]
 80034d6:	6063      	str	r3, [r4, #4]
 80034d8:	6004      	str	r4, [r0, #0]
 80034da:	e7ed      	b.n	80034b8 <_free_r+0x24>
 80034dc:	4613      	mov	r3, r2
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	b10a      	cbz	r2, 80034e6 <_free_r+0x52>
 80034e2:	42a2      	cmp	r2, r4
 80034e4:	d9fa      	bls.n	80034dc <_free_r+0x48>
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	1858      	adds	r0, r3, r1
 80034ea:	42a0      	cmp	r0, r4
 80034ec:	d10b      	bne.n	8003506 <_free_r+0x72>
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	4401      	add	r1, r0
 80034f2:	1858      	adds	r0, r3, r1
 80034f4:	4282      	cmp	r2, r0
 80034f6:	6019      	str	r1, [r3, #0]
 80034f8:	d1de      	bne.n	80034b8 <_free_r+0x24>
 80034fa:	6810      	ldr	r0, [r2, #0]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	4401      	add	r1, r0
 8003500:	6019      	str	r1, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	e7d8      	b.n	80034b8 <_free_r+0x24>
 8003506:	d902      	bls.n	800350e <_free_r+0x7a>
 8003508:	230c      	movs	r3, #12
 800350a:	602b      	str	r3, [r5, #0]
 800350c:	e7d4      	b.n	80034b8 <_free_r+0x24>
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1821      	adds	r1, r4, r0
 8003512:	428a      	cmp	r2, r1
 8003514:	bf01      	itttt	eq
 8003516:	6811      	ldreq	r1, [r2, #0]
 8003518:	6852      	ldreq	r2, [r2, #4]
 800351a:	1809      	addeq	r1, r1, r0
 800351c:	6021      	streq	r1, [r4, #0]
 800351e:	6062      	str	r2, [r4, #4]
 8003520:	605c      	str	r4, [r3, #4]
 8003522:	e7c9      	b.n	80034b8 <_free_r+0x24>
 8003524:	bd38      	pop	{r3, r4, r5, pc}
 8003526:	bf00      	nop
 8003528:	20000098 	.word	0x20000098

0800352c <_read_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4605      	mov	r5, r0
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	2200      	movs	r2, #0
 8003536:	4c05      	ldr	r4, [pc, #20]	; (800354c <_read_r+0x20>)
 8003538:	6022      	str	r2, [r4, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f7ff f81a 	bl	8002574 <_read>
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	d102      	bne.n	800354a <_read_r+0x1e>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	b103      	cbz	r3, 800354a <_read_r+0x1e>
 8003548:	602b      	str	r3, [r5, #0]
 800354a:	bd38      	pop	{r3, r4, r5, pc}
 800354c:	20000138 	.word	0x20000138

08003550 <_fstat_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	2300      	movs	r3, #0
 8003554:	4c06      	ldr	r4, [pc, #24]	; (8003570 <_fstat_r+0x20>)
 8003556:	4605      	mov	r5, r0
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	f7ff f84d 	bl	80025fc <_fstat>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	d102      	bne.n	800356c <_fstat_r+0x1c>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	b103      	cbz	r3, 800356c <_fstat_r+0x1c>
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	bd38      	pop	{r3, r4, r5, pc}
 800356e:	bf00      	nop
 8003570:	20000138 	.word	0x20000138

08003574 <_isatty_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	2300      	movs	r3, #0
 8003578:	4c05      	ldr	r4, [pc, #20]	; (8003590 <_isatty_r+0x1c>)
 800357a:	4605      	mov	r5, r0
 800357c:	4608      	mov	r0, r1
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	f7ff f84b 	bl	800261a <_isatty>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d102      	bne.n	800358e <_isatty_r+0x1a>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	b103      	cbz	r3, 800358e <_isatty_r+0x1a>
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	20000138 	.word	0x20000138

08003594 <_init>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr

080035a0 <_fini>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	bf00      	nop
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr
