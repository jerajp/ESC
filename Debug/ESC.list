
ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ef0  08001ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001f28  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fde  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f0  00000000  00000000  00029013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002a508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013e9b  00000000  00000000  0002b650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000617d  00000000  00000000  0003f4eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f5ba  00000000  00000000  00045668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c4  00000000  00000000  000b4ca0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ed8 	.word	0x08001ed8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ed8 	.word	0x08001ed8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fd6e 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000030 	.word	0x20000030

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000030 	.word	0x20000030

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e26c      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 8087 	beq.w	800082e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000720:	4b92      	ldr	r3, [pc, #584]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f003 030c 	and.w	r3, r3, #12
 8000728:	2b04      	cmp	r3, #4
 800072a:	d00c      	beq.n	8000746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800072c:	4b8f      	ldr	r3, [pc, #572]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f003 030c 	and.w	r3, r3, #12
 8000734:	2b08      	cmp	r3, #8
 8000736:	d112      	bne.n	800075e <HAL_RCC_OscConfig+0x5e>
 8000738:	4b8c      	ldr	r3, [pc, #560]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000744:	d10b      	bne.n	800075e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000746:	4b89      	ldr	r3, [pc, #548]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d06c      	beq.n	800082c <HAL_RCC_OscConfig+0x12c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d168      	bne.n	800082c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e246      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000766:	d106      	bne.n	8000776 <HAL_RCC_OscConfig+0x76>
 8000768:	4b80      	ldr	r3, [pc, #512]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a7f      	ldr	r2, [pc, #508]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	e02e      	b.n	80007d4 <HAL_RCC_OscConfig+0xd4>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10c      	bne.n	8000798 <HAL_RCC_OscConfig+0x98>
 800077e:	4b7b      	ldr	r3, [pc, #492]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a7a      	ldr	r2, [pc, #488]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	4b78      	ldr	r3, [pc, #480]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a77      	ldr	r2, [pc, #476]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	e01d      	b.n	80007d4 <HAL_RCC_OscConfig+0xd4>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007a0:	d10c      	bne.n	80007bc <HAL_RCC_OscConfig+0xbc>
 80007a2:	4b72      	ldr	r3, [pc, #456]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a71      	ldr	r2, [pc, #452]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a6e      	ldr	r2, [pc, #440]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e00b      	b.n	80007d4 <HAL_RCC_OscConfig+0xd4>
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a6a      	ldr	r2, [pc, #424]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b68      	ldr	r3, [pc, #416]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a67      	ldr	r2, [pc, #412]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d013      	beq.n	8000804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007dc:	f7ff fd0e 	bl	80001fc <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e2:	e008      	b.n	80007f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007e4:	f7ff fd0a 	bl	80001fc <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2b64      	cmp	r3, #100	; 0x64
 80007f0:	d901      	bls.n	80007f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80007f2:	2303      	movs	r3, #3
 80007f4:	e1fa      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f6:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f0      	beq.n	80007e4 <HAL_RCC_OscConfig+0xe4>
 8000802:	e014      	b.n	800082e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000804:	f7ff fcfa 	bl	80001fc <HAL_GetTick>
 8000808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800080a:	e008      	b.n	800081e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800080c:	f7ff fcf6 	bl	80001fc <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b64      	cmp	r3, #100	; 0x64
 8000818:	d901      	bls.n	800081e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800081a:	2303      	movs	r3, #3
 800081c:	e1e6      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800081e:	4b53      	ldr	r3, [pc, #332]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f0      	bne.n	800080c <HAL_RCC_OscConfig+0x10c>
 800082a:	e000      	b.n	800082e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d063      	beq.n	8000902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800083a:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 030c 	and.w	r3, r3, #12
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00b      	beq.n	800085e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000846:	4b49      	ldr	r3, [pc, #292]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 030c 	and.w	r3, r3, #12
 800084e:	2b08      	cmp	r3, #8
 8000850:	d11c      	bne.n	800088c <HAL_RCC_OscConfig+0x18c>
 8000852:	4b46      	ldr	r3, [pc, #280]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d116      	bne.n	800088c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800085e:	4b43      	ldr	r3, [pc, #268]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d005      	beq.n	8000876 <HAL_RCC_OscConfig+0x176>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d001      	beq.n	8000876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e1ba      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	4939      	ldr	r1, [pc, #228]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000886:	4313      	orrs	r3, r2
 8000888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800088a:	e03a      	b.n	8000902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d020      	beq.n	80008d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000894:	4b36      	ldr	r3, [pc, #216]	; (8000970 <HAL_RCC_OscConfig+0x270>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089a:	f7ff fcaf 	bl	80001fc <HAL_GetTick>
 800089e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a0:	e008      	b.n	80008b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008a2:	f7ff fcab 	bl	80001fc <HAL_GetTick>
 80008a6:	4602      	mov	r2, r0
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d901      	bls.n	80008b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008b0:	2303      	movs	r3, #3
 80008b2:	e19b      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0f0      	beq.n	80008a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4927      	ldr	r1, [pc, #156]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
 80008d4:	e015      	b.n	8000902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_RCC_OscConfig+0x270>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008dc:	f7ff fc8e 	bl	80001fc <HAL_GetTick>
 80008e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e2:	e008      	b.n	80008f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008e4:	f7ff fc8a 	bl	80001fc <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d901      	bls.n	80008f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80008f2:	2303      	movs	r3, #3
 80008f4:	e17a      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f0      	bne.n	80008e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	2b00      	cmp	r3, #0
 800090c:	d03a      	beq.n	8000984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d019      	beq.n	800094a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_RCC_OscConfig+0x274>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091c:	f7ff fc6e 	bl	80001fc <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000924:	f7ff fc6a 	bl	80001fc <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b02      	cmp	r3, #2
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e15a      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_RCC_OscConfig+0x26c>)
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f0      	beq.n	8000924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 faa8 	bl	8000e98 <RCC_Delay>
 8000948:	e01c      	b.n	8000984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_RCC_OscConfig+0x274>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000950:	f7ff fc54 	bl	80001fc <HAL_GetTick>
 8000954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000956:	e00f      	b.n	8000978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000958:	f7ff fc50 	bl	80001fc <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d908      	bls.n	8000978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000966:	2303      	movs	r3, #3
 8000968:	e140      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	42420000 	.word	0x42420000
 8000974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000978:	4b9e      	ldr	r3, [pc, #632]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1e9      	bne.n	8000958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a6 	beq.w	8000ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000996:	4b97      	ldr	r3, [pc, #604]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10d      	bne.n	80009be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b94      	ldr	r3, [pc, #592]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a93      	ldr	r2, [pc, #588]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b91      	ldr	r3, [pc, #580]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d118      	bne.n	80009fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ca:	4b8b      	ldr	r3, [pc, #556]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a8a      	ldr	r2, [pc, #552]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009d6:	f7ff fc11 	bl	80001fc <HAL_GetTick>
 80009da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	e008      	b.n	80009f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b64      	cmp	r3, #100	; 0x64
 80009ea:	d901      	bls.n	80009f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009ec:	2303      	movs	r3, #3
 80009ee:	e0fd      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f0:	4b81      	ldr	r3, [pc, #516]	; (8000bf8 <HAL_RCC_OscConfig+0x4f8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f0      	beq.n	80009de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <HAL_RCC_OscConfig+0x312>
 8000a04:	4b7b      	ldr	r3, [pc, #492]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a7a      	ldr	r2, [pc, #488]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6213      	str	r3, [r2, #32]
 8000a10:	e02d      	b.n	8000a6e <HAL_RCC_OscConfig+0x36e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10c      	bne.n	8000a34 <HAL_RCC_OscConfig+0x334>
 8000a1a:	4b76      	ldr	r3, [pc, #472]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a75      	ldr	r2, [pc, #468]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	6213      	str	r3, [r2, #32]
 8000a26:	4b73      	ldr	r3, [pc, #460]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4a72      	ldr	r2, [pc, #456]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	f023 0304 	bic.w	r3, r3, #4
 8000a30:	6213      	str	r3, [r2, #32]
 8000a32:	e01c      	b.n	8000a6e <HAL_RCC_OscConfig+0x36e>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d10c      	bne.n	8000a56 <HAL_RCC_OscConfig+0x356>
 8000a3c:	4b6d      	ldr	r3, [pc, #436]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a6c      	ldr	r2, [pc, #432]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6213      	str	r3, [r2, #32]
 8000a48:	4b6a      	ldr	r3, [pc, #424]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a69      	ldr	r2, [pc, #420]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6213      	str	r3, [r2, #32]
 8000a54:	e00b      	b.n	8000a6e <HAL_RCC_OscConfig+0x36e>
 8000a56:	4b67      	ldr	r3, [pc, #412]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6213      	str	r3, [r2, #32]
 8000a62:	4b64      	ldr	r3, [pc, #400]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a63      	ldr	r2, [pc, #396]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a68:	f023 0304 	bic.w	r3, r3, #4
 8000a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d015      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a76:	f7ff fbc1 	bl	80001fc <HAL_GetTick>
 8000a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a7c:	e00a      	b.n	8000a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fbbd 	bl	80001fc <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d901      	bls.n	8000a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e0ab      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a94:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0ee      	beq.n	8000a7e <HAL_RCC_OscConfig+0x37e>
 8000aa0:	e014      	b.n	8000acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa8:	e00a      	b.n	8000ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e095      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ee      	bne.n	8000aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d105      	bne.n	8000ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad2:	4b48      	ldr	r3, [pc, #288]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a47      	ldr	r2, [pc, #284]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8081 	beq.w	8000bea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae8:	4b42      	ldr	r3, [pc, #264]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d061      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d146      	bne.n	8000b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_RCC_OscConfig+0x4fc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b08:	e008      	b.n	8000b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fb77 	bl	80001fc <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e067      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f0      	bne.n	8000b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b30:	d108      	bne.n	8000b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	492d      	ldr	r1, [pc, #180]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b40:	4313      	orrs	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a19      	ldr	r1, [r3, #32]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	430b      	orrs	r3, r1
 8000b56:	4927      	ldr	r1, [pc, #156]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <HAL_RCC_OscConfig+0x4fc>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fb4b 	bl	80001fc <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fb47 	bl	80001fc <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e037      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f0      	beq.n	8000b6a <HAL_RCC_OscConfig+0x46a>
 8000b88:	e02f      	b.n	8000bea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_RCC_OscConfig+0x4fc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b90:	f7ff fb34 	bl	80001fc <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fb30 	bl	80001fc <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e020      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f0      	bne.n	8000b98 <HAL_RCC_OscConfig+0x498>
 8000bb6:	e018      	b.n	8000bea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d101      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e013      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_RCC_OscConfig+0x4f4>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d106      	bne.n	8000be6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d001      	beq.n	8000bea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40007000 	.word	0x40007000
 8000bfc:	42420060 	.word	0x42420060

08000c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e0d0      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c14:	4b6a      	ldr	r3, [pc, #424]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d910      	bls.n	8000c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c22:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 0207 	bic.w	r2, r3, #7
 8000c2a:	4965      	ldr	r1, [pc, #404]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c32:	4b63      	ldr	r3, [pc, #396]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d001      	beq.n	8000c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e0b8      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d020      	beq.n	8000c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d005      	beq.n	8000c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c5c:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4a58      	ldr	r2, [pc, #352]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d005      	beq.n	8000c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c74:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a52      	ldr	r2, [pc, #328]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c80:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	494d      	ldr	r1, [pc, #308]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d040      	beq.n	8000d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d107      	bne.n	8000cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca6:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d115      	bne.n	8000cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e07f      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d107      	bne.n	8000cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d109      	bne.n	8000cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e073      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e06b      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cde:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f023 0203 	bic.w	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4936      	ldr	r1, [pc, #216]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fa84 	bl	80001fc <HAL_GetTick>
 8000cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf8:	f7ff fa80 	bl	80001fc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e053      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 020c 	and.w	r2, r3, #12
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d1eb      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d210      	bcs.n	8000d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 0207 	bic.w	r2, r3, #7
 8000d36:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d001      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e032      	b.n	8000db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4916      	ldr	r1, [pc, #88]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d009      	beq.n	8000d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d8e:	f000 f821 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8000d92:	4601      	mov	r1, r0
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	fa21 f303 	lsr.w	r3, r1, r3
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_RCC_ClockConfig+0x1cc>)
 8000da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff f9e2 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	08001f04 	.word	0x08001f04
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dd4:	b490      	push	{r4, r7}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ddc:	1d3c      	adds	r4, r7, #4
 8000dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d002      	beq.n	8000e14 <HAL_RCC_GetSysClockFreq+0x40>
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d003      	beq.n	8000e1a <HAL_RCC_GetSysClockFreq+0x46>
 8000e12:	e02d      	b.n	8000e70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e16:	623b      	str	r3, [r7, #32]
      break;
 8000e18:	e02d      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	0c9b      	lsrs	r3, r3, #18
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e26:	4413      	add	r3, r2
 8000e28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	0c5b      	lsrs	r3, r3, #17
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e46:	4413      	add	r3, r2
 8000e48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e52:	fb02 f203 	mul.w	r2, r2, r3
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e004      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	623b      	str	r3, [r7, #32]
      break;
 8000e6e:	e002      	b.n	8000e76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e72:	623b      	str	r3, [r7, #32]
      break;
 8000e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e76:	6a3b      	ldr	r3, [r7, #32]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc90      	pop	{r4, r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	08001ef0 	.word	0x08001ef0
 8000e88:	08001f00 	.word	0x08001f00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	007a1200 	.word	0x007a1200
 8000e94:	003d0900 	.word	0x003d0900

08000e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <RCC_Delay+0x34>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <RCC_Delay+0x38>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0a5b      	lsrs	r3, r3, #9
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000eb4:	bf00      	nop
  }
  while (Delay --);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	60fa      	str	r2, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f9      	bne.n	8000eb4 <RCC_Delay+0x1c>
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	10624dd3 	.word	0x10624dd3

08000ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e01d      	b.n	8000f22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fed6 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 fa38 	bl	8001388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e01d      	b.n	8000f78 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d106      	bne.n	8000f56 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f815 	bl	8000f80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f000 fa0d 	bl	8001388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6839      	ldr	r1, [r7, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fc7a 	bl	800189e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d007      	beq.n	8000fcc <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e08a      	b.n	8001106 <HAL_TIM_IC_ConfigChannel+0x130>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d11b      	bne.n	800103e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f000 fa9f 	bl	8001558 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 020c 	bic.w	r2, r2, #12
 8001028:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6999      	ldr	r1, [r3, #24]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	e05a      	b.n	80010f4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d11c      	bne.n	800107e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f000 fb08 	bl	8001668 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001066:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6999      	ldr	r1, [r3, #24]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	021a      	lsls	r2, r3, #8
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	619a      	str	r2, [r3, #24]
 800107c:	e03a      	b.n	80010f4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b08      	cmp	r3, #8
 8001082:	d11b      	bne.n	80010bc <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f000 fb53 	bl	800173e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	69da      	ldr	r2, [r3, #28]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020c 	bic.w	r2, r2, #12
 80010a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69d9      	ldr	r1, [r3, #28]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	61da      	str	r2, [r3, #28]
 80010ba:	e01b      	b.n	80010f4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f000 fb72 	bl	80017b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	69da      	ldr	r2, [r3, #28]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80010de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	69d9      	ldr	r1, [r3, #28]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	021a      	lsls	r2, r3, #8
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_TIM_ConfigClockSource+0x18>
 8001122:	2302      	movs	r3, #2
 8001124:	e0a6      	b.n	8001274 <HAL_TIM_ConfigClockSource+0x166>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2202      	movs	r2, #2
 8001132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001144:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800114c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b40      	cmp	r3, #64	; 0x40
 800115c:	d067      	beq.n	800122e <HAL_TIM_ConfigClockSource+0x120>
 800115e:	2b40      	cmp	r3, #64	; 0x40
 8001160:	d80b      	bhi.n	800117a <HAL_TIM_ConfigClockSource+0x6c>
 8001162:	2b10      	cmp	r3, #16
 8001164:	d073      	beq.n	800124e <HAL_TIM_ConfigClockSource+0x140>
 8001166:	2b10      	cmp	r3, #16
 8001168:	d802      	bhi.n	8001170 <HAL_TIM_ConfigClockSource+0x62>
 800116a:	2b00      	cmp	r3, #0
 800116c:	d06f      	beq.n	800124e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800116e:	e078      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001170:	2b20      	cmp	r3, #32
 8001172:	d06c      	beq.n	800124e <HAL_TIM_ConfigClockSource+0x140>
 8001174:	2b30      	cmp	r3, #48	; 0x30
 8001176:	d06a      	beq.n	800124e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001178:	e073      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800117a:	2b70      	cmp	r3, #112	; 0x70
 800117c:	d00d      	beq.n	800119a <HAL_TIM_ConfigClockSource+0x8c>
 800117e:	2b70      	cmp	r3, #112	; 0x70
 8001180:	d804      	bhi.n	800118c <HAL_TIM_ConfigClockSource+0x7e>
 8001182:	2b50      	cmp	r3, #80	; 0x50
 8001184:	d033      	beq.n	80011ee <HAL_TIM_ConfigClockSource+0xe0>
 8001186:	2b60      	cmp	r3, #96	; 0x60
 8001188:	d041      	beq.n	800120e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800118a:	e06a      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800118c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001190:	d066      	beq.n	8001260 <HAL_TIM_ConfigClockSource+0x152>
 8001192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001196:	d017      	beq.n	80011c8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001198:	e063      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6899      	ldr	r1, [r3, #8]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f000 fb59 	bl	8001860 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80011bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	609a      	str	r2, [r3, #8]
      break;
 80011c6:	e04c      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6899      	ldr	r1, [r3, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f000 fb42 	bl	8001860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ea:	609a      	str	r2, [r3, #8]
      break;
 80011ec:	e039      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6859      	ldr	r1, [r3, #4]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	461a      	mov	r2, r3
 80011fc:	f000 fa06 	bl	800160c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2150      	movs	r1, #80	; 0x50
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb10 	bl	800182c <TIM_ITRx_SetConfig>
      break;
 800120c:	e029      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	6859      	ldr	r1, [r3, #4]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	461a      	mov	r2, r3
 800121c:	f000 fa60 	bl	80016e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2160      	movs	r1, #96	; 0x60
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fb00 	bl	800182c <TIM_ITRx_SetConfig>
      break;
 800122c:	e019      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6859      	ldr	r1, [r3, #4]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	461a      	mov	r2, r3
 800123c:	f000 f9e6 	bl	800160c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	4618      	mov	r0, r3
 8001248:	f000 faf0 	bl	800182c <TIM_ITRx_SetConfig>
      break;
 800124c:	e009      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	4610      	mov	r0, r2
 800125a:	f000 fae7 	bl	800182c <TIM_ITRx_SetConfig>
      break;
 800125e:	e000      	b.n	8001262 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001260:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001290:	2302      	movs	r3, #2
 8001292:	e031      	b.n	80012f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2202      	movs	r2, #2
 80012a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f8d0 	bl	800144c <TIM_SlaveTimer_SetConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e018      	b.n	80012f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012e4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b0c      	cmp	r3, #12
 8001312:	d831      	bhi.n	8001378 <HAL_TIM_ReadCapturedValue+0x78>
 8001314:	a201      	add	r2, pc, #4	; (adr r2, 800131c <HAL_TIM_ReadCapturedValue+0x1c>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	08001351 	.word	0x08001351
 8001320:	08001379 	.word	0x08001379
 8001324:	08001379 	.word	0x08001379
 8001328:	08001379 	.word	0x08001379
 800132c:	0800135b 	.word	0x0800135b
 8001330:	08001379 	.word	0x08001379
 8001334:	08001379 	.word	0x08001379
 8001338:	08001379 	.word	0x08001379
 800133c:	08001365 	.word	0x08001365
 8001340:	08001379 	.word	0x08001379
 8001344:	08001379 	.word	0x08001379
 8001348:	08001379 	.word	0x08001379
 800134c:	0800136f 	.word	0x0800136f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	60fb      	str	r3, [r7, #12]

      break;
 8001358:	e00f      	b.n	800137a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001360:	60fb      	str	r3, [r7, #12]

      break;
 8001362:	e00a      	b.n	800137a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136a:	60fb      	str	r3, [r7, #12]

      break;
 800136c:	e005      	b.n	800137a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	60fb      	str	r3, [r7, #12]

      break;
 8001376:	e000      	b.n	800137a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001378:	bf00      	nop
  }

  return tmpreg;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <TIM_Base_SetConfig+0xb8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00b      	beq.n	80013b8 <TIM_Base_SetConfig+0x30>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a6:	d007      	beq.n	80013b8 <TIM_Base_SetConfig+0x30>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a26      	ldr	r2, [pc, #152]	; (8001444 <TIM_Base_SetConfig+0xbc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d003      	beq.n	80013b8 <TIM_Base_SetConfig+0x30>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <TIM_Base_SetConfig+0xc0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d108      	bne.n	80013ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <TIM_Base_SetConfig+0xb8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00b      	beq.n	80013ea <TIM_Base_SetConfig+0x62>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d007      	beq.n	80013ea <TIM_Base_SetConfig+0x62>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <TIM_Base_SetConfig+0xbc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d003      	beq.n	80013ea <TIM_Base_SetConfig+0x62>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <TIM_Base_SetConfig+0xc0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d108      	bne.n	80013fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <TIM_Base_SetConfig+0xb8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d103      	bne.n	8001430 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	615a      	str	r2, [r3, #20]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40012c00 	.word	0x40012c00
 8001444:	40000400 	.word	0x40000400
 8001448:	40000800 	.word	0x40000800

0800144c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001464:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f023 0307 	bic.w	r3, r3, #7
 8001476:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b30      	cmp	r3, #48	; 0x30
 8001490:	d05c      	beq.n	800154c <TIM_SlaveTimer_SetConfig+0x100>
 8001492:	2b30      	cmp	r3, #48	; 0x30
 8001494:	d806      	bhi.n	80014a4 <TIM_SlaveTimer_SetConfig+0x58>
 8001496:	2b10      	cmp	r3, #16
 8001498:	d058      	beq.n	800154c <TIM_SlaveTimer_SetConfig+0x100>
 800149a:	2b20      	cmp	r3, #32
 800149c:	d056      	beq.n	800154c <TIM_SlaveTimer_SetConfig+0x100>
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d054      	beq.n	800154c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80014a2:	e054      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80014a4:	2b50      	cmp	r3, #80	; 0x50
 80014a6:	d03d      	beq.n	8001524 <TIM_SlaveTimer_SetConfig+0xd8>
 80014a8:	2b50      	cmp	r3, #80	; 0x50
 80014aa:	d802      	bhi.n	80014b2 <TIM_SlaveTimer_SetConfig+0x66>
 80014ac:	2b40      	cmp	r3, #64	; 0x40
 80014ae:	d010      	beq.n	80014d2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80014b0:	e04d      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80014b2:	2b60      	cmp	r3, #96	; 0x60
 80014b4:	d040      	beq.n	8001538 <TIM_SlaveTimer_SetConfig+0xec>
 80014b6:	2b70      	cmp	r3, #112	; 0x70
 80014b8:	d000      	beq.n	80014bc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80014ba:	e048      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68d9      	ldr	r1, [r3, #12]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f000 f9c8 	bl	8001860 <TIM_ETR_SetConfig>
      break;
 80014d0:	e03d      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d101      	bne.n	80014de <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e038      	b.n	8001550 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001504:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	621a      	str	r2, [r3, #32]
      break;
 8001522:	e014      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	461a      	mov	r2, r3
 8001532:	f000 f86b 	bl	800160c <TIM_TI1_ConfigInputStage>
      break;
 8001536:	e00a      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	461a      	mov	r2, r3
 8001546:	f000 f8cb 	bl	80016e0 <TIM_TI2_ConfigInputStage>
      break;
 800154a:	e000      	b.n	800154e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800154c:	bf00      	nop
  }
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	f023 0201 	bic.w	r2, r3, #1
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <TIM_TI1_SetConfig+0xa8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00b      	beq.n	800159e <TIM_TI1_SetConfig+0x46>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800158c:	d007      	beq.n	800159e <TIM_TI1_SetConfig+0x46>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <TIM_TI1_SetConfig+0xac>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <TIM_TI1_SetConfig+0x46>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <TIM_TI1_SetConfig+0xb0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <TIM_TI1_SetConfig+0x4a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <TIM_TI1_SetConfig+0x4c>
 80015a2:	2300      	movs	r3, #0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e003      	b.n	80015c2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f023 030a 	bic.w	r3, r3, #10
 80015dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 030a 	and.w	r3, r3, #10
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	621a      	str	r2, [r3, #32]
}
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40012c00 	.word	0x40012c00
 8001604:	40000400 	.word	0x40000400
 8001608:	40000800 	.word	0x40000800

0800160c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f023 030a 	bic.w	r3, r3, #10
 8001648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	621a      	str	r2, [r3, #32]
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	f023 0210 	bic.w	r2, r3, #16
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4313      	orrs	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80016a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	031b      	lsls	r3, r3, #12
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	621a      	str	r2, [r3, #32]
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f023 0210 	bic.w	r2, r3, #16
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800170a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	031b      	lsls	r3, r3, #12
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800171c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	621a      	str	r2, [r3, #32]
}
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800173e:	b480      	push	{r7}
 8001740:	b087      	sub	sp, #28
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	b2db      	uxtb	r3, r3
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800178e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	621a      	str	r2, [r3, #32]
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80017f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	031b      	lsls	r3, r3, #12
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001806:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	031b      	lsls	r3, r3, #12
 800180c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	621a      	str	r2, [r3, #32]
}
 8001822:	bf00      	nop
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001842:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	f043 0307 	orr.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	609a      	str	r2, [r3, #8]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800187a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	021a      	lsls	r2, r3, #8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	431a      	orrs	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	609a      	str	r2, [r3, #8]
}
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800189e:	b480      	push	{r7}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	2201      	movs	r2, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	43db      	mvns	r3, r3
 80018c0:	401a      	ands	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	621a      	str	r2, [r3, #32]
}
 80018dc:	bf00      	nop
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e032      	b.n	8001964 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001924:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001936:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001974:	f7fe fbea 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f822 	bl	80019c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f000 f906 	bl	8001b8c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001980:	f000 f864 	bl	8001a4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <main+0x48>)
 8001988:	f7ff fb03 	bl	8000f92 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800198c:	2104      	movs	r1, #4
 800198e:	480a      	ldr	r0, [pc, #40]	; (80019b8 <main+0x48>)
 8001990:	f7ff faff 	bl	8000f92 <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PIN_C13_ON;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <main+0x4c>)
 8001996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199a:	611a      	str	r2, [r3, #16]
	  HAL_Delay(1000);
 800199c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a0:	f7fe fc36 	bl	8000210 <HAL_Delay>
	  PIN_C13_OFF;
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <main+0x4c>)
 80019a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019aa:	611a      	str	r2, [r3, #16]
	  HAL_Delay(1000);
 80019ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b0:	f7fe fc2e 	bl	8000210 <HAL_Delay>
	  PIN_C13_ON;
 80019b4:	e7ee      	b.n	8001994 <main+0x24>
 80019b6:	bf00      	nop
 80019b8:	20000040 	.word	0x20000040
 80019bc:	40011000 	.word	0x40011000

080019c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b090      	sub	sp, #64	; 0x40
 80019c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	2228      	movs	r2, #40	; 0x28
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa7a 	bl	8001ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f4:	2302      	movs	r3, #2
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fe79 	bl	8000700 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a14:	f000 f912 	bl	8001c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2102      	movs	r1, #2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f8e4 	bl	8000c00 <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a3e:	f000 f8fd 	bl	8001c3c <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3740      	adds	r7, #64	; 0x40
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b090      	sub	sp, #64	; 0x40
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001a88:	4a3f      	ldr	r2, [pc, #252]	; (8001b88 <MX_TIM1_Init+0x13c>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001a8e:	2247      	movs	r2, #71	; 0x47
 8001a90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ab2:	4834      	ldr	r0, [pc, #208]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001ab4:	f7ff fa0e 	bl	8000ed4 <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001abe:	f000 f8bd 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001acc:	4619      	mov	r1, r3
 8001ace:	482d      	ldr	r0, [pc, #180]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001ad0:	f7ff fb1d 	bl	800110e <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ada:	f000 f8af 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ade:	4829      	ldr	r0, [pc, #164]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001ae0:	f7ff fa23 	bl	8000f2a <HAL_TIM_IC_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001aea:	f000 f8a7 	bl	8001c3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001aee:	2304      	movs	r3, #4
 8001af0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001af2:	2350      	movs	r3, #80	; 0x50
 8001af4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	481e      	ldr	r0, [pc, #120]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001b0a:	f7ff fbb7 	bl	800127c <HAL_TIM_SlaveConfigSynchro>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001b14:	f000 f892 	bl	8001c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4814      	ldr	r0, [pc, #80]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001b32:	f7ff fa50 	bl	8000fd6 <HAL_TIM_IC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001b3c:	f000 f87e 	bl	8001c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b40:	2302      	movs	r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b44:	2302      	movs	r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001b52:	f7ff fa40 	bl	8000fd6 <HAL_TIM_IC_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001b5c:	f000 f86e 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_TIM1_Init+0x138>)
 8001b6e:	f7ff feba 	bl	80018e6 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001b78:	f000 f860 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3740      	adds	r7, #64	; 0x40
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000040 	.word	0x20000040
 8001b88:	40012c00 	.word	0x40012c00

08001b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bbe:	f043 0320 	orr.w	r3, r3, #32
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_GPIO_Init+0xa8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <MX_GPIO_Init+0xac>)
 8001c08:	f7fe fd62 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_GPIO_Init+0xac>)
 8001c26:	f7fe fbf9 	bl	800041c <HAL_GPIO_Init>

}
 8001c2a:	bf00      	nop
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40011000 	.word	0x40011000

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6193      	str	r3, [r2, #24]
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_MspInit+0x60>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_MspInit+0x60>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000

08001cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <HAL_TIM_Base_MspInit+0x74>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d124      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_TIM_Base_MspInit+0x78>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_TIM_Base_MspInit+0x78>)
 8001cd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_TIM_Base_MspInit+0x78>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_TIM_Base_MspInit+0x78>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_TIM_Base_MspInit+0x78>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_TIM_Base_MspInit+0x78>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <HAL_TIM_Base_MspInit+0x7c>)
 8001d12:	f7fe fb83 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010800 	.word	0x40010800

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <HardFault_Handler+0x4>

08001d3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <MemManage_Handler+0x4>

08001d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <BusFault_Handler+0x4>

08001d4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <UsageFault_Handler+0x4>

08001d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f7fe fa2e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  Pulsewidth_us=HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);//numbers 1000-2000 [us] +-3 possible
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <SysTick_Handler+0x4c>)
 8001d80:	f7ff fabe 	bl	8001300 <HAL_TIM_ReadCapturedValue>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <SysTick_Handler+0x50>)
 8001d88:	601a      	str	r2, [r3, #0]
  if(Pulsewidth_us<1000)Pulsewidth_us=1000;						//Saturate max Value
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <SysTick_Handler+0x50>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d92:	d204      	bcs.n	8001d9e <SysTick_Handler+0x2a>
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <SysTick_Handler+0x50>)
 8001d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e008      	b.n	8001db0 <SysTick_Handler+0x3c>
  else if(Pulsewidth_us>2000)Pulsewidth_us=2000;				//Saturate min Value
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <SysTick_Handler+0x50>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001da6:	d903      	bls.n	8001db0 <SysTick_Handler+0x3c>
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <SysTick_Handler+0x50>)
 8001daa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dae:	601a      	str	r2, [r3, #0]
  PulsewidthCalc_us=Pulsewidth_us-1000;							//numbers 0-1000 [us]
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Handler+0x50>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <SysTick_Handler+0x54>)
 8001dba:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000040 	.word	0x20000040
 8001dc4:	20000028 	.word	0x20000028
 8001dc8:	2000002c 	.word	0x2000002c

08001dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <SystemInit+0x5c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <SystemInit+0x5c>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <SystemInit+0x5c>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4911      	ldr	r1, [pc, #68]	; (8001e28 <SystemInit+0x5c>)
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <SystemInit+0x60>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <SystemInit+0x5c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <SystemInit+0x5c>)
 8001dee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <SystemInit+0x5c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SystemInit+0x5c>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <SystemInit+0x5c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <SystemInit+0x5c>)
 8001e0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SystemInit+0x5c>)
 8001e12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e16:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SystemInit+0x64>)
 8001e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	f8ff0000 	.word	0xf8ff0000
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e36:	e003      	b.n	8001e40 <LoopCopyDataInit>

08001e38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e3e:	3104      	adds	r1, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e40:	480a      	ldr	r0, [pc, #40]	; (8001e6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e48:	d3f6      	bcc.n	8001e38 <CopyDataInit>
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e4c:	e002      	b.n	8001e54 <LoopFillZerobss>

08001e4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e50:	f842 3b04 	str.w	r3, [r2], #4

08001e54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e58:	d3f9      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e5a:	f7ff ffb7 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f000 f80f 	bl	8001e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e62:	f7ff fd85 	bl	8001970 <main>
  bx lr
 8001e66:	4770      	bx	lr
  ldr r3, =_sidata
 8001e68:	08001f1c 	.word	0x08001f1c
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001e74:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001e78:	20000088 	.word	0x20000088

08001e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_2_IRQHandler>
	...

08001e80 <__libc_init_array>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	2500      	movs	r5, #0
 8001e84:	4e0c      	ldr	r6, [pc, #48]	; (8001eb8 <__libc_init_array+0x38>)
 8001e86:	4c0d      	ldr	r4, [pc, #52]	; (8001ebc <__libc_init_array+0x3c>)
 8001e88:	1ba4      	subs	r4, r4, r6
 8001e8a:	10a4      	asrs	r4, r4, #2
 8001e8c:	42a5      	cmp	r5, r4
 8001e8e:	d109      	bne.n	8001ea4 <__libc_init_array+0x24>
 8001e90:	f000 f822 	bl	8001ed8 <_init>
 8001e94:	2500      	movs	r5, #0
 8001e96:	4e0a      	ldr	r6, [pc, #40]	; (8001ec0 <__libc_init_array+0x40>)
 8001e98:	4c0a      	ldr	r4, [pc, #40]	; (8001ec4 <__libc_init_array+0x44>)
 8001e9a:	1ba4      	subs	r4, r4, r6
 8001e9c:	10a4      	asrs	r4, r4, #2
 8001e9e:	42a5      	cmp	r5, r4
 8001ea0:	d105      	bne.n	8001eae <__libc_init_array+0x2e>
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
 8001ea4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea8:	4798      	blx	r3
 8001eaa:	3501      	adds	r5, #1
 8001eac:	e7ee      	b.n	8001e8c <__libc_init_array+0xc>
 8001eae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eb2:	4798      	blx	r3
 8001eb4:	3501      	adds	r5, #1
 8001eb6:	e7f2      	b.n	8001e9e <__libc_init_array+0x1e>
 8001eb8:	08001f14 	.word	0x08001f14
 8001ebc:	08001f14 	.word	0x08001f14
 8001ec0:	08001f14 	.word	0x08001f14
 8001ec4:	08001f18 	.word	0x08001f18

08001ec8 <memset>:
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4402      	add	r2, r0
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <memset+0xa>
 8001ed0:	4770      	bx	lr
 8001ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed6:	e7f9      	b.n	8001ecc <memset+0x4>

08001ed8 <_init>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	bf00      	nop
 8001edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ede:	bc08      	pop	{r3}
 8001ee0:	469e      	mov	lr, r3
 8001ee2:	4770      	bx	lr

08001ee4 <_fini>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	bf00      	nop
 8001ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eea:	bc08      	pop	{r3}
 8001eec:	469e      	mov	lr, r3
 8001eee:	4770      	bx	lr
